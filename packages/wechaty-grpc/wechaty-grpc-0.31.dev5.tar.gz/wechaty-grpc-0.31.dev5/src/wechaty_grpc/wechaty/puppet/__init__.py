# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: wechaty/puppet.proto, wechaty/puppet/base.proto, wechaty/puppet/contact.proto, wechaty/puppet/download-upload.proto, wechaty/puppet/event.proto, wechaty/puppet/file-box.proto, wechaty/puppet/friendship.proto, wechaty/puppet/location.proto, wechaty/puppet/message.proto, wechaty/puppet/mini-program.proto, wechaty/puppet/referrer.proto, wechaty/puppet/room-invitation.proto, wechaty/puppet/room-member.proto, wechaty/puppet/room.proto, wechaty/puppet/tag.proto, wechaty/puppet/url-link.proto
# plugin: python-betterproto
import warnings
from dataclasses import dataclass
from datetime import datetime
from typing import AsyncIterable, AsyncIterator, Dict, Iterable, List, Optional, Union

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


class PayloadType(betterproto.Enum):
    PAYLOAD_TYPE_UNSPECIFIED = 0
    PAYLOAD_TYPE_MESSAGE = 1
    PAYLOAD_TYPE_CONTACT = 2
    PAYLOAD_TYPE_ROOM = 3
    PAYLOAD_TYPE_ROOM_MEMBER = 4
    PAYLOAD_TYPE_FRIENDSHIP = 5


class ContactGender(betterproto.Enum):
    CONTACT_GENDER_UNSPECIFIED = 0
    CONTACT_GENDER_MALE = 1
    CONTACT_GENDER_FEMALE = 2


class ContactType(betterproto.Enum):
    CONTACT_TYPE_UNSPECIFIED = 0
    CONTACT_TYPE_PERSONAL = 1
    CONTACT_TYPE_OFFICIAL = 2
    CONTACT_TYPE_CORPORATION = 3


class EventType(betterproto.Enum):
    EVENT_TYPE_UNSPECIFIED = 0
    EVENT_TYPE_HEARTBEAT = 1
    EVENT_TYPE_MESSAGE = 2
    EVENT_TYPE_DONG = 3
    EVENT_TYPE_ERROR = 16
    EVENT_TYPE_FRIENDSHIP = 17
    EVENT_TYPE_ROOM_INVITE = 18
    EVENT_TYPE_ROOM_JOIN = 19
    EVENT_TYPE_ROOM_LEAVE = 20
    EVENT_TYPE_ROOM_TOPIC = 21
    EVENT_TYPE_SCAN = 22
    EVENT_TYPE_READY = 23
    EVENT_TYPE_RESET = 24
    EVENT_TYPE_LOGIN = 25
    EVENT_TYPE_LOGOUT = 26
    EVENT_TYPE_DIRTY = 27


class FriendshipType(betterproto.Enum):
    FRIENDSHIP_TYPE_UNSPECIFIED = 0
    FRIENDSHIP_TYPE_CONFIRM = 1
    FRIENDSHIP_TYPE_RECEIVE = 2
    FRIENDSHIP_TYPE_VERIFY = 3


class FriendshipSceneType(betterproto.Enum):
    FRIENDSHIP_SCENE_TYPE_UNSPECIFIED = 0
    FRIENDSHIP_SCENE_TYPE_QQ = 1
    FRIENDSHIP_SCENE_TYPE_EMAIL = 2
    FRIENDSHIP_SCENE_TYPE_WEIXIN = 3
    FRIENDSHIP_SCENE_TYPE_QQTBD = 12
    FRIENDSHIP_SCENE_TYPE_ROOM = 14
    FRIENDSHIP_SCENE_TYPE_PHONE = 15
    FRIENDSHIP_SCENE_TYPE_CARD = 17
    FRIENDSHIP_SCENE_TYPE_LOCATION = 18
    FRIENDSHIP_SCENE_TYPE_BOTTLE = 25
    FRIENDSHIP_SCENE_TYPE_SHAKING = 29
    FRIENDSHIP_SCENE_TYPE_QRCODE = 30


class MessageType(betterproto.Enum):
    MESSAGE_TYPE_UNSPECIFIED = 0
    MESSAGE_TYPE_ATTACHMENT = 1
    MESSAGE_TYPE_AUDIO = 2
    MESSAGE_TYPE_CONTACT = 3
    MESSAGE_TYPE_EMOTICON = 4
    MESSAGE_TYPE_IMAGE = 5
    MESSAGE_TYPE_TEXT = 6
    MESSAGE_TYPE_VIDEO = 7
    MESSAGE_TYPE_CHAT_HISTORY = 8
    MESSAGE_TYPE_LOCATION = 9
    MESSAGE_TYPE_MINI_PROGRAM = 10
    MESSAGE_TYPE_TRANSFER = 11
    MESSAGE_TYPE_RED_ENVELOPE = 12
    MESSAGE_TYPE_RECALLED = 13
    MESSAGE_TYPE_URL = 14


class ImageType(betterproto.Enum):
    IMAGE_TYPE_UNSPECIFIED = 0
    IMAGE_TYPE_THUMBNAIL = 1
    IMAGE_TYPE_HD = 2
    IMAGE_TYPE_ARTWORK = 3


@dataclass(eq=False, repr=False)
class StartRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class StartResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class StopRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class StopResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class VersionRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class VersionResponse(betterproto.Message):
    version: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class LogoutRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LogoutResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DingRequest(betterproto.Message):
    data: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DingResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DirtyPayloadRequest(betterproto.Message):
    type: "PayloadType" = betterproto.enum_field(1)
    id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DirtyPayloadResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ContactListRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ContactListResponse(betterproto.Message):
    ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ContactPayloadRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ContactPayloadResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    gender: "ContactGender" = betterproto.enum_field(2)
    type: "ContactType" = betterproto.enum_field(3)
    name: str = betterproto.string_field(4)
    avatar: str = betterproto.string_field(5)
    address: str = betterproto.string_field(6)
    alias: str = betterproto.string_field(7)
    city: str = betterproto.string_field(8)
    friend: bool = betterproto.bool_field(9)
    province: str = betterproto.string_field(10)
    signature: str = betterproto.string_field(11)
    star: bool = betterproto.bool_field(12)
    weixin: str = betterproto.string_field(13)
    corporation: str = betterproto.string_field(14)
    title: str = betterproto.string_field(15)
    description: str = betterproto.string_field(16)
    coworker: bool = betterproto.bool_field(17)
    phones: List[str] = betterproto.string_field(18)


@dataclass(eq=False, repr=False)
class ContactSelfQrCodeRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ContactSelfQrCodeResponse(betterproto.Message):
    qrcode: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ContactSelfNameRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ContactSelfNameResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ContactSelfSignatureRequest(betterproto.Message):
    signature: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ContactSelfSignatureResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ContactAliasRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    # nullable
    alias_string_value_deprecated: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    alias: str = betterproto.string_field(3, group="_alias")

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.alias_string_value_deprecated:
            warnings.warn(
                "ContactAliasRequest.alias_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class ContactAliasResponse(betterproto.Message):
    alias_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    alias: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.alias_string_value_deprecated:
            warnings.warn(
                "ContactAliasResponse.alias_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class ContactAvatarRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    # * Huan(202011) TODO:  1. rename to file_box  2. replace it by FileBoxChunk
    # with stream support
    filebox_string_value_deprecated: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    filebox: str = betterproto.string_field(3, group="_filebox")

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.filebox_string_value_deprecated:
            warnings.warn(
                "ContactAvatarRequest.filebox_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class ContactAvatarResponse(betterproto.Message):
    # * Huan(202011) TODO:  1. rename to file_box  2. replace it by FileBoxChunk
    # with stream support
    filebox_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    filebox: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.filebox_string_value_deprecated:
            warnings.warn(
                "ContactAvatarResponse.filebox_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class ContactPhoneRequest(betterproto.Message):
    contact_id: str = betterproto.string_field(1)
    phones: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ContactPhoneResponse(betterproto.Message):
    phones: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ContactCorporationRemarkRequest(betterproto.Message):
    contact_id: str = betterproto.string_field(1)
    corporation_remark_string_value_deprecated: Optional[
        str
    ] = betterproto.message_field(2, wraps=betterproto.TYPE_STRING)
    corporation_remark: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.corporation_remark_string_value_deprecated:
            warnings.warn(
                "ContactCorporationRemarkRequest.corporation_remark_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class ContactCorporationRemarkResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ContactDescriptionRequest(betterproto.Message):
    contact_id: str = betterproto.string_field(1)
    description_string_value_deprecated: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    description: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.description_string_value_deprecated:
            warnings.warn(
                "ContactDescriptionRequest.description_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class ContactDescriptionResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class UploadRequest(betterproto.Message):
    chunk: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class UploadResponse(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DownloadRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DownloadResponse(betterproto.Message):
    chunk: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class EventRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class EventResponse(betterproto.Message):
    type: "EventType" = betterproto.enum_field(1)
    # TODO: Huan(202002) consider to use a PB Map?
    payload: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Referrer(betterproto.Message):
    """
    * "Referrer" and "Referral" refers to different things. "Referrer" is
    something or somebody who refers. "Referral" is the act of referring.  -
    https://english.stackexchange.com/questions/33135/referrer-versus-referral-
    versus-referer
    """

    contact_id: str = betterproto.string_field(1)
    room_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class FriendshipPayloadRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    # * Huan(202003):  What's the reason we need belowing payload?  We should
    # remove it if possible.
    payload_string_value_deprecated: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    payload: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.payload_string_value_deprecated:
            warnings.warn(
                "FriendshipPayloadRequest.payload_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class FriendshipPayloadResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    contact_id: str = betterproto.string_field(2)
    hello: str = betterproto.string_field(3)
    type: "FriendshipType" = betterproto.enum_field(4)
    stranger: str = betterproto.string_field(5)
    ticket: str = betterproto.string_field(6)
    scene: "FriendshipSceneType" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class FriendshipSearchPhoneRequest(betterproto.Message):
    phone: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class FriendshipSearchPhoneResponse(betterproto.Message):
    # nullable
    contact_id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    contact_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.contact_id_string_value_deprecated:
            warnings.warn(
                "FriendshipSearchPhoneResponse.contact_id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class FriendshipSearchWeixinRequest(betterproto.Message):
    weixin: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class FriendshipSearchWeixinResponse(betterproto.Message):
    # nullable
    contact_id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    contact_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.contact_id_string_value_deprecated:
            warnings.warn(
                "FriendshipSearchWeixinResponse.contact_id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class FriendshipAddRequest(betterproto.Message):
    contact_id: str = betterproto.string_field(1)
    hello: str = betterproto.string_field(2)
    source_room_id_string_value_deprecated: Optional[str] = betterproto.message_field(
        3, wraps=betterproto.TYPE_STRING
    )
    source_contact_id_string_value_deprecated: Optional[
        str
    ] = betterproto.message_field(4, wraps=betterproto.TYPE_STRING)
    referrer: "Referrer" = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.source_room_id_string_value_deprecated:
            warnings.warn(
                "FriendshipAddRequest.source_room_id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )
        if self.source_contact_id_string_value_deprecated:
            warnings.warn(
                "FriendshipAddRequest.source_contact_id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class FriendshipAddResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FriendshipAcceptRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class FriendshipAcceptResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FileBoxChunk(betterproto.Message):
    # oneof payload {
    data: bytes = betterproto.bytes_field(1, group="_data")
    name: str = betterproto.string_field(2, group="_name")


@dataclass(eq=False, repr=False)
class LocationPayload(betterproto.Message):
    accuracy: float = betterproto.float_field(1)
    address: str = betterproto.string_field(2)
    latitude: float = betterproto.double_field(3)
    longitude: float = betterproto.double_field(4)
    name: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class MiniProgramPayload(betterproto.Message):
    appid: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    page_path: str = betterproto.string_field(3)
    icon_url: str = betterproto.string_field(4)
    share_id: str = betterproto.string_field(5)
    thumb_url: str = betterproto.string_field(6)
    title: str = betterproto.string_field(7)
    username: str = betterproto.string_field(8)
    thumb_key: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class UrlLinkPayload(betterproto.Message):
    description: str = betterproto.string_field(1)
    thumbnail_url: str = betterproto.string_field(2)
    title: str = betterproto.string_field(3)
    url: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MessagePayloadRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessagePayloadResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    filename: str = betterproto.string_field(2)
    text: str = betterproto.string_field(3)
    # * @deprecated will be removed after Dec 31, 2022  Huan(202109): use
    # receive_time(10) instead
    timestamp_deprecated: int = betterproto.uint64_field(4)
    type: "MessageType" = betterproto.enum_field(5)
    from_id: str = betterproto.string_field(6)
    room_id: str = betterproto.string_field(7)
    to_id: str = betterproto.string_field(8)
    mention_ids: List[str] = betterproto.string_field(9)
    receive_time: datetime = betterproto.message_field(10)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.timestamp_deprecated:
            warnings.warn(
                "MessagePayloadResponse.timestamp_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageImageRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    type: "ImageType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class MessageImageResponse(betterproto.Message):
    # * Huan(202011) TODO:  1. rename to file_box  2. replace it by FileBoxChunk
    # with stream support
    filebox: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageImageStreamRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    type: "ImageType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class MessageImageStreamResponse(betterproto.Message):
    file_box_chunk: "FileBoxChunk" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MessageContactRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageContactResponse(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageFileRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageFileResponse(betterproto.Message):
    # * Huan(202011) deprecated: use MessageFileStreamResponse instead
    filebox: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.filebox:
            warnings.warn(
                "MessageFileResponse.filebox is deprecated", DeprecationWarning
            )


@dataclass(eq=False, repr=False)
class MessageFileStreamRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageFileStreamResponse(betterproto.Message):
    file_box_chunk: "FileBoxChunk" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MessageMiniProgramRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageMiniProgramResponse(betterproto.Message):
    # * Huan(202110): We should use payload instead of JSON.stringify string  The
    # compatible code will be removed after Dec 31, 2022
    mini_program_deprecated: str = betterproto.string_field(1)
    mini_program: "MiniProgramPayload" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.mini_program_deprecated:
            warnings.warn(
                "MessageMiniProgramResponse.mini_program_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageUrlRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageUrlResponse(betterproto.Message):
    # * Huan(202110): We should use payload instead of JSON.stringify string  The
    # compatible code will be removed after Dec 31, 2022
    url_link_deprecated: str = betterproto.string_field(1)
    url_link: "UrlLinkPayload" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.url_link_deprecated:
            warnings.warn(
                "MessageUrlResponse.url_link_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendContactRequest(betterproto.Message):
    conversation_id: str = betterproto.string_field(1)
    contact_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MessageSendContactResponse(betterproto.Message):
    # * @deprecated:  Huan(202109): Wrapper types must not be used going forward.
    # https://cloud.google.com/apis/design/design_patterns#optional_primitive_fie
    # lds
    id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.id_string_value_deprecated:
            warnings.warn(
                "MessageSendContactResponse.id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendFileRequest(betterproto.Message):
    conversation_id: str = betterproto.string_field(1)
    filebox: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MessageSendFileResponse(betterproto.Message):
    # * @deprecated:  Huan(202109): Wrapper types must not be used going forward.
    # https://cloud.google.com/apis/design/design_patterns#optional_primitive_fie
    # lds
    id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.id_string_value_deprecated:
            warnings.warn(
                "MessageSendFileResponse.id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendFileStreamRequest(betterproto.Message):
    # oneof payload {
    conversation_id: str = betterproto.string_field(1, group="_conversation_id")
    file_box_chunk: "FileBoxChunk" = betterproto.message_field(
        2, group="_file_box_chunk"
    )


@dataclass(eq=False, repr=False)
class MessageSendFileStreamResponse(betterproto.Message):
    # * @deprecated:  Huan(202109): Wrapper types must not be used going forward.
    # https://cloud.google.com/apis/design/design_patterns#optional_primitive_fie
    # lds
    id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.id_string_value_deprecated:
            warnings.warn(
                "MessageSendFileStreamResponse.id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendTextRequest(betterproto.Message):
    conversation_id: str = betterproto.string_field(1)
    text: str = betterproto.string_field(2)
    # Huan(202011) FIXME: Issue #99 https://github.com/wechaty/grpc/issues/99
    mentional_ids: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MessageSendTextResponse(betterproto.Message):
    # * @deprecated:  Huan(202109): Wrapper types must not be used going forward.
    # https://cloud.google.com/apis/design/design_patterns#optional_primitive_fie
    # lds
    id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.id_string_value_deprecated:
            warnings.warn(
                "MessageSendTextResponse.id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendMiniProgramRequest(betterproto.Message):
    conversation_id: str = betterproto.string_field(1)
    # * Huan(202110): We should use payload instead of JSON.stringify string  The
    # compatible code will be removed after Dec 31, 2022
    mini_program_deprecated: str = betterproto.string_field(2)
    mini_program: "MiniProgramPayload" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.mini_program_deprecated:
            warnings.warn(
                "MessageSendMiniProgramRequest.mini_program_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendMiniProgramResponse(betterproto.Message):
    # * @deprecated:  Huan(202109): Wrapper types must not be used going forward.
    # https://cloud.google.com/apis/design/design_patterns#optional_primitive_fie
    # lds
    id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.id_string_value_deprecated:
            warnings.warn(
                "MessageSendMiniProgramResponse.id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendUrlRequest(betterproto.Message):
    conversation_id: str = betterproto.string_field(1)
    # * Huan(202110): We should use payload instead of JSON.stringify string  The
    # compatible code will be removed after Dec 31, 2022
    url_link_deprecated: str = betterproto.string_field(2)
    url_link: "UrlLinkPayload" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.url_link_deprecated:
            warnings.warn(
                "MessageSendUrlRequest.url_link_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageSendUrlResponse(betterproto.Message):
    # * @deprecated:  Huan(202109): Wrapper types must not be used going forward.
    # https://cloud.google.com/apis/design/design_patterns#optional_primitive_fie
    # lds
    id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.id_string_value_deprecated:
            warnings.warn(
                "MessageSendUrlResponse.id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageRecallRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageRecallResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class MessageForwardRequest(betterproto.Message):
    message_id: str = betterproto.string_field(1)
    conversation_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MessageForwardResponse(betterproto.Message):
    # * @deprecated: use payload instead.  Huan(202109): Wrapper types must not
    # be used going forward.    https://cloud.google.com/apis/design/design_patte
    # rns#optional_primitive_fields
    id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.id_string_value_deprecated:
            warnings.warn(
                "MessageForwardResponse.id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class MessageLocationRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MessageLocationResponse(betterproto.Message):
    location: "LocationPayload" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MessageSendLocationRequest(betterproto.Message):
    conversation_id: str = betterproto.string_field(1)
    location: "LocationPayload" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MessageSendLocationResponse(betterproto.Message):
    # * Huan(202110): we will not use wrappers any more by following the Google
    # Style Guide:  If not using optional would add complexity or ambiguity, then
    # use optional primitive fields,  Wrapper types must not be used going
    # forward.  — Optional Primitive Fields
    # (https://cloud.google.com/apis/design/design_patterns.md#optional-
    # primitive-fields)
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomInvitationPayloadRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    # * Huan(202002): `payload` should be removed.  The puppet server should take
    # the responsibilities  for storing the unaccepted friend-request payload.
    # @deprecated: use payload instead.  Huan(202109): Wrapper types must not be
    # used going forward.    https://cloud.google.com/apis/design/design_patterns
    # #optional_primitive_fields
    payload_string_value_deprecated: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    payload: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.payload_string_value_deprecated:
            warnings.warn(
                "RoomInvitationPayloadRequest.payload_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class RoomInvitationPayloadResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    inviter_id: str = betterproto.string_field(2)
    topic: str = betterproto.string_field(3)
    member_count: int = betterproto.int32_field(4)
    member_ids: List[str] = betterproto.string_field(5)
    # * @deprecated will be removed after Dec 31, 2022  Huan(202109): use
    # receive_time(10) instead
    timestamp_uint64_deprecated: int = betterproto.uint64_field(6)
    avatar: str = betterproto.string_field(7)
    invitation: str = betterproto.string_field(8)
    receiver_id: str = betterproto.string_field(9)
    receive_time: datetime = betterproto.message_field(10)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.timestamp_uint64_deprecated:
            warnings.warn(
                "RoomInvitationPayloadResponse.timestamp_uint64_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class RoomInvitationAcceptRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomInvitationAcceptResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RoomMemberPayloadRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    member_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RoomMemberPayloadResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    room_alias: str = betterproto.string_field(2)
    inviter_id: str = betterproto.string_field(3)
    avatar: str = betterproto.string_field(4)
    name: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class RoomMemberListRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomMemberListResponse(betterproto.Message):
    member_ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomListRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RoomListResponse(betterproto.Message):
    ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomPayloadRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomPayloadResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    topic: str = betterproto.string_field(2)
    avatar: str = betterproto.string_field(3)
    owner_id: str = betterproto.string_field(4)
    admin_ids: List[str] = betterproto.string_field(5)
    member_ids: List[str] = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class RoomAddRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    contact_id: str = betterproto.string_field(2)
    invite_only: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class RoomAddResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RoomAvatarRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomAvatarResponse(betterproto.Message):
    # * Huan(202011) TODO:  1. rename to file_box  2. replace it by FileBoxChunk
    # with stream support
    filebox: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomCreateRequest(betterproto.Message):
    contact_ids: List[str] = betterproto.string_field(1)
    topic: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RoomCreateResponse(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomDelRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    contact_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RoomDelResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RoomQuitRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomQuitResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RoomTopicRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    topic_string_value_deprecated: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    topic: str = betterproto.string_field(3, group="_topic")

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.topic_string_value_deprecated:
            warnings.warn(
                "RoomTopicRequest.topic_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class RoomTopicResponse(betterproto.Message):
    topic_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    topic: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.topic_string_value_deprecated:
            warnings.warn(
                "RoomTopicResponse.topic_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class RoomQrCodeRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomQrCodeResponse(betterproto.Message):
    qrcode: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RoomAnnounceRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    text_string_value_deprecated: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    text: str = betterproto.string_field(3, group="_text")

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.text_string_value_deprecated:
            warnings.warn(
                "RoomAnnounceRequest.text_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class RoomAnnounceResponse(betterproto.Message):
    text_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    text: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.text_string_value_deprecated:
            warnings.warn(
                "RoomAnnounceResponse.text_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class TagContactAddRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    contact_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TagContactAddResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TagContactRemoveRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    contact_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TagContactRemoveResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TagContactDeleteRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class TagContactDeleteResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TagContactListRequest(betterproto.Message):
    # @deprecated:  Huan(202109): Wrapper types must not be used going forward.
    # https://cloud.google.com/apis/design/design_patterns#optional_primitive_fie
    # lds
    contact_id_string_value_deprecated: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    contact_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.contact_id_string_value_deprecated:
            warnings.warn(
                "TagContactListRequest.contact_id_string_value_deprecated is deprecated",
                DeprecationWarning,
            )


@dataclass(eq=False, repr=False)
class TagContactListResponse(betterproto.Message):
    ids: List[str] = betterproto.string_field(1)


class PuppetStub(betterproto.ServiceStub):
    async def start(self) -> "StartResponse":

        request = StartRequest()

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/Start", request, StartResponse
        )

    async def stop(self) -> "StopResponse":

        request = StopRequest()

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/Stop", request, StopResponse
        )

    async def logout(self) -> "LogoutResponse":

        request = LogoutRequest()

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/Logout", request, LogoutResponse
        )

    async def ding(self, *, data: str = "") -> "DingResponse":

        request = DingRequest()
        request.data = data

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/Ding", request, DingResponse
        )

    async def version(self) -> "VersionResponse":

        request = VersionRequest()

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/Version", request, VersionResponse
        )

    async def event(self) -> AsyncIterator["EventResponse"]:

        request = EventRequest()

        async for response in self._unary_stream(
            "/wechaty.puppet.Puppet/Event",
            request,
            EventResponse,
        ):
            yield response

    async def dirty_payload(
        self, *, type: "PayloadType" = None, id: str = ""
    ) -> "DirtyPayloadResponse":

        request = DirtyPayloadRequest()
        request.type = type
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/DirtyPayload", request, DirtyPayloadResponse
        )

    async def contact_self_qr_code(self) -> "ContactSelfQrCodeResponse":

        request = ContactSelfQrCodeRequest()

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/ContactSelfQRCode",
            request,
            ContactSelfQrCodeResponse,
        )

    async def contact_self_name(self, *, name: str = "") -> "ContactSelfNameResponse":

        request = ContactSelfNameRequest()
        request.name = name

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/ContactSelfName", request, ContactSelfNameResponse
        )

    async def contact_self_signature(
        self, *, signature: str = ""
    ) -> "ContactSelfSignatureResponse":

        request = ContactSelfSignatureRequest()
        request.signature = signature

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/ContactSelfSignature",
            request,
            ContactSelfSignatureResponse,
        )

    async def contact_payload(self, *, id: str = "") -> "ContactPayloadResponse":

        request = ContactPayloadRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/ContactPayload", request, ContactPayloadResponse
        )

    async def contact_alias(
        self,
        *,
        id: str = "",
        alias_string_value_deprecated: Optional[str] = None,
        alias: str = "",
    ) -> "ContactAliasResponse":

        request = ContactAliasRequest()
        request.id = id
        if alias_string_value_deprecated is not None:
            request.alias_string_value_deprecated = alias_string_value_deprecated
        request.alias = alias

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/ContactAlias", request, ContactAliasResponse
        )

    async def contact_avatar(
        self,
        *,
        id: str = "",
        filebox_string_value_deprecated: Optional[str] = None,
        filebox: str = "",
    ) -> "ContactAvatarResponse":

        request = ContactAvatarRequest()
        request.id = id
        if filebox_string_value_deprecated is not None:
            request.filebox_string_value_deprecated = filebox_string_value_deprecated
        request.filebox = filebox

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/ContactAvatar", request, ContactAvatarResponse
        )

    async def contact_phone(
        self, *, contact_id: str = "", phones: Optional[List[str]] = None
    ) -> "ContactPhoneResponse":
        phones = phones or []

        request = ContactPhoneRequest()
        request.contact_id = contact_id
        request.phones = phones

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/ContactPhone", request, ContactPhoneResponse
        )

    async def contact_corporation_remark(
        self,
        *,
        contact_id: str = "",
        corporation_remark_string_value_deprecated: Optional[str] = None,
        corporation_remark: str = "",
    ) -> "ContactCorporationRemarkResponse":

        request = ContactCorporationRemarkRequest()
        request.contact_id = contact_id
        if corporation_remark_string_value_deprecated is not None:
            request.corporation_remark_string_value_deprecated = (
                corporation_remark_string_value_deprecated
            )
        request.corporation_remark = corporation_remark

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/ContactCorporationRemark",
            request,
            ContactCorporationRemarkResponse,
        )

    async def contact_description(
        self,
        *,
        contact_id: str = "",
        description_string_value_deprecated: Optional[str] = None,
        description: str = "",
    ) -> "ContactDescriptionResponse":

        request = ContactDescriptionRequest()
        request.contact_id = contact_id
        if description_string_value_deprecated is not None:
            request.description_string_value_deprecated = (
                description_string_value_deprecated
            )
        request.description = description

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/ContactDescription",
            request,
            ContactDescriptionResponse,
        )

    async def contact_list(self) -> "ContactListResponse":

        request = ContactListRequest()

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/ContactList", request, ContactListResponse
        )

    async def friendship_payload(
        self,
        *,
        id: str = "",
        payload_string_value_deprecated: Optional[str] = None,
        payload: str = "",
    ) -> "FriendshipPayloadResponse":

        request = FriendshipPayloadRequest()
        request.id = id
        if payload_string_value_deprecated is not None:
            request.payload_string_value_deprecated = payload_string_value_deprecated
        request.payload = payload

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/FriendshipPayload",
            request,
            FriendshipPayloadResponse,
        )

    async def friendship_search_phone(
        self, *, phone: str = ""
    ) -> "FriendshipSearchPhoneResponse":

        request = FriendshipSearchPhoneRequest()
        request.phone = phone

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/FriendshipSearchPhone",
            request,
            FriendshipSearchPhoneResponse,
        )

    async def friendship_search_weixin(
        self, *, weixin: str = ""
    ) -> "FriendshipSearchWeixinResponse":

        request = FriendshipSearchWeixinRequest()
        request.weixin = weixin

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/FriendshipSearchWeixin",
            request,
            FriendshipSearchWeixinResponse,
        )

    async def friendship_add(
        self,
        *,
        contact_id: str = "",
        hello: str = "",
        source_room_id_string_value_deprecated: Optional[str] = None,
        source_contact_id_string_value_deprecated: Optional[str] = None,
        referrer: "Referrer" = None,
    ) -> "FriendshipAddResponse":

        request = FriendshipAddRequest()
        request.contact_id = contact_id
        request.hello = hello
        if source_room_id_string_value_deprecated is not None:
            request.source_room_id_string_value_deprecated = (
                source_room_id_string_value_deprecated
            )
        if source_contact_id_string_value_deprecated is not None:
            request.source_contact_id_string_value_deprecated = (
                source_contact_id_string_value_deprecated
            )
        if referrer is not None:
            request.referrer = referrer

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/FriendshipAdd", request, FriendshipAddResponse
        )

    async def friendship_accept(self, *, id: str = "") -> "FriendshipAcceptResponse":

        request = FriendshipAcceptRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/FriendshipAccept", request, FriendshipAcceptResponse
        )

    async def message_file(self, *, id: str = "") -> "MessageFileResponse":

        request = MessageFileRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessageFile", request, MessageFileResponse
        )

    async def message_image(
        self, *, id: str = "", type: "ImageType" = None
    ) -> "MessageImageResponse":

        request = MessageImageRequest()
        request.id = id
        request.type = type

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessageImage", request, MessageImageResponse
        )

    async def message_send_file(
        self, *, conversation_id: str = "", filebox: str = ""
    ) -> "MessageSendFileResponse":

        request = MessageSendFileRequest()
        request.conversation_id = conversation_id
        request.filebox = filebox

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessageSendFile", request, MessageSendFileResponse
        )

    async def message_payload(self, *, id: str = "") -> "MessagePayloadResponse":

        request = MessagePayloadRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessagePayload", request, MessagePayloadResponse
        )

    async def message_contact(self, *, id: str = "") -> "MessageContactResponse":

        request = MessageContactRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessageContact", request, MessageContactResponse
        )

    async def message_file_stream(
        self, *, id: str = ""
    ) -> AsyncIterator["MessageFileStreamResponse"]:

        request = MessageFileStreamRequest()
        request.id = id

        async for response in self._unary_stream(
            "/wechaty.puppet.Puppet/MessageFileStream",
            request,
            MessageFileStreamResponse,
        ):
            yield response

    async def message_image_stream(
        self, *, id: str = "", type: "ImageType" = None
    ) -> AsyncIterator["MessageImageStreamResponse"]:

        request = MessageImageStreamRequest()
        request.id = id
        request.type = type

        async for response in self._unary_stream(
            "/wechaty.puppet.Puppet/MessageImageStream",
            request,
            MessageImageStreamResponse,
        ):
            yield response

    async def message_mini_program(
        self, *, id: str = ""
    ) -> "MessageMiniProgramResponse":

        request = MessageMiniProgramRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessageMiniProgram",
            request,
            MessageMiniProgramResponse,
        )

    async def message_url(self, *, id: str = "") -> "MessageUrlResponse":

        request = MessageUrlRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessageUrl", request, MessageUrlResponse
        )

    async def message_recall(self, *, id: str = "") -> "MessageRecallResponse":

        request = MessageRecallRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessageRecall", request, MessageRecallResponse
        )

    async def message_forward(
        self, *, message_id: str = "", conversation_id: str = ""
    ) -> "MessageForwardResponse":

        request = MessageForwardRequest()
        request.message_id = message_id
        request.conversation_id = conversation_id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessageForward", request, MessageForwardResponse
        )

    async def message_location(self, *, id: str = "") -> "MessageLocationResponse":

        request = MessageLocationRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessageLocation", request, MessageLocationResponse
        )

    async def message_send_contact(
        self, *, conversation_id: str = "", contact_id: str = ""
    ) -> "MessageSendContactResponse":

        request = MessageSendContactRequest()
        request.conversation_id = conversation_id
        request.contact_id = contact_id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessageSendContact",
            request,
            MessageSendContactResponse,
        )

    async def message_send_file_stream(
        self,
        request_iterator: Union[
            AsyncIterable["MessageSendFileStreamRequest"],
            Iterable["MessageSendFileStreamRequest"],
        ],
    ) -> "MessageSendFileStreamResponse":

        return await self._stream_unary(
            "/wechaty.puppet.Puppet/MessageSendFileStream",
            request_iterator,
            MessageSendFileStreamRequest,
            MessageSendFileStreamResponse,
        )

    async def message_send_text(
        self,
        *,
        conversation_id: str = "",
        text: str = "",
        mentional_ids: Optional[List[str]] = None,
    ) -> "MessageSendTextResponse":
        mentional_ids = mentional_ids or []

        request = MessageSendTextRequest()
        request.conversation_id = conversation_id
        request.text = text
        request.mentional_ids = mentional_ids

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessageSendText", request, MessageSendTextResponse
        )

    async def message_send_mini_program(
        self,
        *,
        conversation_id: str = "",
        mini_program_deprecated: str = "",
        mini_program: "MiniProgramPayload" = None,
    ) -> "MessageSendMiniProgramResponse":

        request = MessageSendMiniProgramRequest()
        request.conversation_id = conversation_id
        request.mini_program_deprecated = mini_program_deprecated
        if mini_program is not None:
            request.mini_program = mini_program

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessageSendMiniProgram",
            request,
            MessageSendMiniProgramResponse,
        )

    async def message_send_url(
        self,
        *,
        conversation_id: str = "",
        url_link_deprecated: str = "",
        url_link: "UrlLinkPayload" = None,
    ) -> "MessageSendUrlResponse":

        request = MessageSendUrlRequest()
        request.conversation_id = conversation_id
        request.url_link_deprecated = url_link_deprecated
        if url_link is not None:
            request.url_link = url_link

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessageSendUrl", request, MessageSendUrlResponse
        )

    async def message_send_location(
        self, *, conversation_id: str = "", location: "LocationPayload" = None
    ) -> "MessageSendLocationResponse":

        request = MessageSendLocationRequest()
        request.conversation_id = conversation_id
        if location is not None:
            request.location = location

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/MessageSendLocation",
            request,
            MessageSendLocationResponse,
        )

    async def room_payload(self, *, id: str = "") -> "RoomPayloadResponse":

        request = RoomPayloadRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/RoomPayload", request, RoomPayloadResponse
        )

    async def room_list(self) -> "RoomListResponse":

        request = RoomListRequest()

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/RoomList", request, RoomListResponse
        )

    async def room_add(
        self, *, id: str = "", contact_id: str = "", invite_only: bool = False
    ) -> "RoomAddResponse":

        request = RoomAddRequest()
        request.id = id
        request.contact_id = contact_id
        request.invite_only = invite_only

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/RoomAdd", request, RoomAddResponse
        )

    async def room_avatar(self, *, id: str = "") -> "RoomAvatarResponse":

        request = RoomAvatarRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/RoomAvatar", request, RoomAvatarResponse
        )

    async def room_create(
        self, *, contact_ids: Optional[List[str]] = None, topic: str = ""
    ) -> "RoomCreateResponse":
        contact_ids = contact_ids or []

        request = RoomCreateRequest()
        request.contact_ids = contact_ids
        request.topic = topic

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/RoomCreate", request, RoomCreateResponse
        )

    async def room_del(
        self, *, id: str = "", contact_id: str = ""
    ) -> "RoomDelResponse":

        request = RoomDelRequest()
        request.id = id
        request.contact_id = contact_id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/RoomDel", request, RoomDelResponse
        )

    async def room_quit(self, *, id: str = "") -> "RoomQuitResponse":

        request = RoomQuitRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/RoomQuit", request, RoomQuitResponse
        )

    async def room_topic(
        self,
        *,
        id: str = "",
        topic_string_value_deprecated: Optional[str] = None,
        topic: str = "",
    ) -> "RoomTopicResponse":

        request = RoomTopicRequest()
        request.id = id
        if topic_string_value_deprecated is not None:
            request.topic_string_value_deprecated = topic_string_value_deprecated
        request.topic = topic

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/RoomTopic", request, RoomTopicResponse
        )

    async def room_qr_code(self) -> "RoomQrCodeResponse":

        request = RoomQrCodeRequest()

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/RoomQRCode", request, RoomQrCodeResponse
        )

    async def room_announce(
        self,
        *,
        id: str = "",
        text_string_value_deprecated: Optional[str] = None,
        text: str = "",
    ) -> "RoomAnnounceResponse":

        request = RoomAnnounceRequest()
        request.id = id
        if text_string_value_deprecated is not None:
            request.text_string_value_deprecated = text_string_value_deprecated
        request.text = text

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/RoomAnnounce", request, RoomAnnounceResponse
        )

    async def room_member_payload(
        self, *, id: str = "", member_id: str = ""
    ) -> "RoomMemberPayloadResponse":

        request = RoomMemberPayloadRequest()
        request.id = id
        request.member_id = member_id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/RoomMemberPayload",
            request,
            RoomMemberPayloadResponse,
        )

    async def room_member_list(self, *, id: str = "") -> "RoomMemberListResponse":

        request = RoomMemberListRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/RoomMemberList", request, RoomMemberListResponse
        )

    async def room_invitation_payload(
        self,
        *,
        id: str = "",
        payload_string_value_deprecated: Optional[str] = None,
        payload: str = "",
    ) -> "RoomInvitationPayloadResponse":

        request = RoomInvitationPayloadRequest()
        request.id = id
        if payload_string_value_deprecated is not None:
            request.payload_string_value_deprecated = payload_string_value_deprecated
        request.payload = payload

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/RoomInvitationPayload",
            request,
            RoomInvitationPayloadResponse,
        )

    async def room_invitation_accept(
        self, *, id: str = ""
    ) -> "RoomInvitationAcceptResponse":

        request = RoomInvitationAcceptRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/RoomInvitationAccept",
            request,
            RoomInvitationAcceptResponse,
        )

    async def tag_contact_add(
        self, *, id: str = "", contact_id: str = ""
    ) -> "TagContactAddResponse":

        request = TagContactAddRequest()
        request.id = id
        request.contact_id = contact_id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/TagContactAdd", request, TagContactAddResponse
        )

    async def tag_contact_remove(
        self, *, id: str = "", contact_id: str = ""
    ) -> "TagContactRemoveResponse":

        request = TagContactRemoveRequest()
        request.id = id
        request.contact_id = contact_id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/TagContactRemove", request, TagContactRemoveResponse
        )

    async def tag_contact_delete(self, *, id: str = "") -> "TagContactDeleteResponse":

        request = TagContactDeleteRequest()
        request.id = id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/TagContactDelete", request, TagContactDeleteResponse
        )

    async def tag_contact_list(
        self,
        *,
        contact_id_string_value_deprecated: Optional[str] = None,
        contact_id: str = "",
    ) -> "TagContactListResponse":

        request = TagContactListRequest()
        if contact_id_string_value_deprecated is not None:
            request.contact_id_string_value_deprecated = (
                contact_id_string_value_deprecated
            )
        request.contact_id = contact_id

        return await self._unary_unary(
            "/wechaty.puppet.Puppet/TagContactList", request, TagContactListResponse
        )

    async def download(self, *, id: str = "") -> AsyncIterator["DownloadResponse"]:

        request = DownloadRequest()
        request.id = id

        async for response in self._unary_stream(
            "/wechaty.puppet.Puppet/Download",
            request,
            DownloadResponse,
        ):
            yield response

    async def upload(
        self,
        request_iterator: Union[
            AsyncIterable["UploadRequest"], Iterable["UploadRequest"]
        ],
    ) -> "UploadResponse":

        return await self._stream_unary(
            "/wechaty.puppet.Puppet/Upload",
            request_iterator,
            UploadRequest,
            UploadResponse,
        )


class PuppetBase(ServiceBase):
    async def start(self) -> "StartResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop(self) -> "StopResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def logout(self) -> "LogoutResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def ding(self, data: str) -> "DingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def version(self) -> "VersionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def event(self) -> AsyncIterator["EventResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def dirty_payload(
        self, type: "PayloadType", id: str
    ) -> "DirtyPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_self_qr_code(self) -> "ContactSelfQrCodeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_self_name(self, name: str) -> "ContactSelfNameResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_self_signature(
        self, signature: str
    ) -> "ContactSelfSignatureResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_payload(self, id: str) -> "ContactPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_alias(
        self, id: str, alias_string_value_deprecated: Optional[str], alias: str
    ) -> "ContactAliasResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_avatar(
        self, id: str, filebox_string_value_deprecated: Optional[str], filebox: str
    ) -> "ContactAvatarResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_phone(
        self, contact_id: str, phones: Optional[List[str]]
    ) -> "ContactPhoneResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_corporation_remark(
        self,
        contact_id: str,
        corporation_remark_string_value_deprecated: Optional[str],
        corporation_remark: str,
    ) -> "ContactCorporationRemarkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_description(
        self,
        contact_id: str,
        description_string_value_deprecated: Optional[str],
        description: str,
    ) -> "ContactDescriptionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contact_list(self) -> "ContactListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def friendship_payload(
        self, id: str, payload_string_value_deprecated: Optional[str], payload: str
    ) -> "FriendshipPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def friendship_search_phone(
        self, phone: str
    ) -> "FriendshipSearchPhoneResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def friendship_search_weixin(
        self, weixin: str
    ) -> "FriendshipSearchWeixinResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def friendship_add(
        self,
        contact_id: str,
        hello: str,
        source_room_id_string_value_deprecated: Optional[str],
        source_contact_id_string_value_deprecated: Optional[str],
        referrer: "Referrer",
    ) -> "FriendshipAddResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def friendship_accept(self, id: str) -> "FriendshipAcceptResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_file(self, id: str) -> "MessageFileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_image(self, id: str, type: "ImageType") -> "MessageImageResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_send_file(
        self, conversation_id: str, filebox: str
    ) -> "MessageSendFileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_payload(self, id: str) -> "MessagePayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_contact(self, id: str) -> "MessageContactResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_file_stream(
        self, id: str
    ) -> AsyncIterator["MessageFileStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_image_stream(
        self, id: str, type: "ImageType"
    ) -> AsyncIterator["MessageImageStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_mini_program(self, id: str) -> "MessageMiniProgramResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_url(self, id: str) -> "MessageUrlResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_recall(self, id: str) -> "MessageRecallResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_forward(
        self, message_id: str, conversation_id: str
    ) -> "MessageForwardResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_location(self, id: str) -> "MessageLocationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_send_contact(
        self, conversation_id: str, contact_id: str
    ) -> "MessageSendContactResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_send_file_stream(
        self, request_iterator: AsyncIterator["MessageSendFileStreamRequest"]
    ) -> "MessageSendFileStreamResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_send_text(
        self, conversation_id: str, text: str, mentional_ids: Optional[List[str]]
    ) -> "MessageSendTextResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_send_mini_program(
        self,
        conversation_id: str,
        mini_program_deprecated: str,
        mini_program: "MiniProgramPayload",
    ) -> "MessageSendMiniProgramResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_send_url(
        self, conversation_id: str, url_link_deprecated: str, url_link: "UrlLinkPayload"
    ) -> "MessageSendUrlResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def message_send_location(
        self, conversation_id: str, location: "LocationPayload"
    ) -> "MessageSendLocationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_payload(self, id: str) -> "RoomPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_list(self) -> "RoomListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_add(
        self, id: str, contact_id: str, invite_only: bool
    ) -> "RoomAddResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_avatar(self, id: str) -> "RoomAvatarResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_create(
        self, contact_ids: Optional[List[str]], topic: str
    ) -> "RoomCreateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_del(self, id: str, contact_id: str) -> "RoomDelResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_quit(self, id: str) -> "RoomQuitResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_topic(
        self, id: str, topic_string_value_deprecated: Optional[str], topic: str
    ) -> "RoomTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_qr_code(self) -> "RoomQrCodeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_announce(
        self, id: str, text_string_value_deprecated: Optional[str], text: str
    ) -> "RoomAnnounceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_member_payload(
        self, id: str, member_id: str
    ) -> "RoomMemberPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_member_list(self, id: str) -> "RoomMemberListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_invitation_payload(
        self, id: str, payload_string_value_deprecated: Optional[str], payload: str
    ) -> "RoomInvitationPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def room_invitation_accept(self, id: str) -> "RoomInvitationAcceptResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def tag_contact_add(
        self, id: str, contact_id: str
    ) -> "TagContactAddResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def tag_contact_remove(
        self, id: str, contact_id: str
    ) -> "TagContactRemoveResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def tag_contact_delete(self, id: str) -> "TagContactDeleteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def tag_contact_list(
        self, contact_id_string_value_deprecated: Optional[str], contact_id: str
    ) -> "TagContactListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def download(self, id: str) -> AsyncIterator["DownloadResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def upload(
        self, request_iterator: AsyncIterator["UploadRequest"]
    ) -> "UploadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_start(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.start(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_stop(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.stop(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_logout(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.logout(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_ding(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "data": request.data,
        }

        response = await self.ding(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_version(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.version(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_event(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        await self._call_rpc_handler_server_stream(
            self.event,
            stream,
            request_kwargs,
        )

    async def __rpc_dirty_payload(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "type": request.type,
            "id": request.id,
        }

        response = await self.dirty_payload(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_contact_self_qr_code(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.contact_self_qr_code(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_contact_self_name(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "name": request.name,
        }

        response = await self.contact_self_name(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_contact_self_signature(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "signature": request.signature,
        }

        response = await self.contact_self_signature(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_contact_payload(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.contact_payload(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_contact_alias(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "alias_string_value_deprecated": request.alias_string_value_deprecated,
            "alias": request.alias,
        }

        response = await self.contact_alias(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_contact_avatar(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "filebox_string_value_deprecated": request.filebox_string_value_deprecated,
            "filebox": request.filebox,
        }

        response = await self.contact_avatar(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_contact_phone(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "contact_id": request.contact_id,
            "phones": request.phones,
        }

        response = await self.contact_phone(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_contact_corporation_remark(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "contact_id": request.contact_id,
            "corporation_remark_string_value_deprecated": request.corporation_remark_string_value_deprecated,
            "corporation_remark": request.corporation_remark,
        }

        response = await self.contact_corporation_remark(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_contact_description(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "contact_id": request.contact_id,
            "description_string_value_deprecated": request.description_string_value_deprecated,
            "description": request.description,
        }

        response = await self.contact_description(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_contact_list(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.contact_list(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_friendship_payload(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "payload_string_value_deprecated": request.payload_string_value_deprecated,
            "payload": request.payload,
        }

        response = await self.friendship_payload(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_friendship_search_phone(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "phone": request.phone,
        }

        response = await self.friendship_search_phone(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_friendship_search_weixin(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "weixin": request.weixin,
        }

        response = await self.friendship_search_weixin(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_friendship_add(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "contact_id": request.contact_id,
            "hello": request.hello,
            "source_room_id_string_value_deprecated": request.source_room_id_string_value_deprecated,
            "source_contact_id_string_value_deprecated": request.source_contact_id_string_value_deprecated,
            "referrer": request.referrer,
        }

        response = await self.friendship_add(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_friendship_accept(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.friendship_accept(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_file(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.message_file(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_image(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "type": request.type,
        }

        response = await self.message_image(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_send_file(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "conversation_id": request.conversation_id,
            "filebox": request.filebox,
        }

        response = await self.message_send_file(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_payload(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.message_payload(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_contact(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.message_contact(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_file_stream(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        await self._call_rpc_handler_server_stream(
            self.message_file_stream,
            stream,
            request_kwargs,
        )

    async def __rpc_message_image_stream(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "type": request.type,
        }

        await self._call_rpc_handler_server_stream(
            self.message_image_stream,
            stream,
            request_kwargs,
        )

    async def __rpc_message_mini_program(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.message_mini_program(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_url(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.message_url(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_recall(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.message_recall(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_forward(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "message_id": request.message_id,
            "conversation_id": request.conversation_id,
        }

        response = await self.message_forward(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_location(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.message_location(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_send_contact(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "conversation_id": request.conversation_id,
            "contact_id": request.contact_id,
        }

        response = await self.message_send_contact(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_send_file_stream(
        self, stream: grpclib.server.Stream
    ) -> None:
        request_kwargs = {"request_iterator": stream.__aiter__()}

        response = await self.message_send_file_stream(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_send_text(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "conversation_id": request.conversation_id,
            "text": request.text,
            "mentional_ids": request.mentional_ids,
        }

        response = await self.message_send_text(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_send_mini_program(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "conversation_id": request.conversation_id,
            "mini_program_deprecated": request.mini_program_deprecated,
            "mini_program": request.mini_program,
        }

        response = await self.message_send_mini_program(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_send_url(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "conversation_id": request.conversation_id,
            "url_link_deprecated": request.url_link_deprecated,
            "url_link": request.url_link,
        }

        response = await self.message_send_url(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_message_send_location(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "conversation_id": request.conversation_id,
            "location": request.location,
        }

        response = await self.message_send_location(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_room_payload(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.room_payload(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_room_list(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.room_list(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_room_add(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "contact_id": request.contact_id,
            "invite_only": request.invite_only,
        }

        response = await self.room_add(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_room_avatar(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.room_avatar(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_room_create(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "contact_ids": request.contact_ids,
            "topic": request.topic,
        }

        response = await self.room_create(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_room_del(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "contact_id": request.contact_id,
        }

        response = await self.room_del(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_room_quit(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.room_quit(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_room_topic(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "topic_string_value_deprecated": request.topic_string_value_deprecated,
            "topic": request.topic,
        }

        response = await self.room_topic(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_room_qr_code(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.room_qr_code(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_room_announce(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "text_string_value_deprecated": request.text_string_value_deprecated,
            "text": request.text,
        }

        response = await self.room_announce(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_room_member_payload(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "member_id": request.member_id,
        }

        response = await self.room_member_payload(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_room_member_list(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.room_member_list(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_room_invitation_payload(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "payload_string_value_deprecated": request.payload_string_value_deprecated,
            "payload": request.payload,
        }

        response = await self.room_invitation_payload(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_room_invitation_accept(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.room_invitation_accept(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_tag_contact_add(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "contact_id": request.contact_id,
        }

        response = await self.tag_contact_add(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_tag_contact_remove(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "contact_id": request.contact_id,
        }

        response = await self.tag_contact_remove(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_tag_contact_delete(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.tag_contact_delete(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_tag_contact_list(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "contact_id_string_value_deprecated": request.contact_id_string_value_deprecated,
            "contact_id": request.contact_id,
        }

        response = await self.tag_contact_list(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_download(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        await self._call_rpc_handler_server_stream(
            self.download,
            stream,
            request_kwargs,
        )

    async def __rpc_upload(self, stream: grpclib.server.Stream) -> None:
        request_kwargs = {"request_iterator": stream.__aiter__()}

        response = await self.upload(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/wechaty.puppet.Puppet/Start": grpclib.const.Handler(
                self.__rpc_start,
                grpclib.const.Cardinality.UNARY_UNARY,
                StartRequest,
                StartResponse,
            ),
            "/wechaty.puppet.Puppet/Stop": grpclib.const.Handler(
                self.__rpc_stop,
                grpclib.const.Cardinality.UNARY_UNARY,
                StopRequest,
                StopResponse,
            ),
            "/wechaty.puppet.Puppet/Logout": grpclib.const.Handler(
                self.__rpc_logout,
                grpclib.const.Cardinality.UNARY_UNARY,
                LogoutRequest,
                LogoutResponse,
            ),
            "/wechaty.puppet.Puppet/Ding": grpclib.const.Handler(
                self.__rpc_ding,
                grpclib.const.Cardinality.UNARY_UNARY,
                DingRequest,
                DingResponse,
            ),
            "/wechaty.puppet.Puppet/Version": grpclib.const.Handler(
                self.__rpc_version,
                grpclib.const.Cardinality.UNARY_UNARY,
                VersionRequest,
                VersionResponse,
            ),
            "/wechaty.puppet.Puppet/Event": grpclib.const.Handler(
                self.__rpc_event,
                grpclib.const.Cardinality.UNARY_STREAM,
                EventRequest,
                EventResponse,
            ),
            "/wechaty.puppet.Puppet/DirtyPayload": grpclib.const.Handler(
                self.__rpc_dirty_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                DirtyPayloadRequest,
                DirtyPayloadResponse,
            ),
            "/wechaty.puppet.Puppet/ContactSelfQRCode": grpclib.const.Handler(
                self.__rpc_contact_self_qr_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                ContactSelfQrCodeRequest,
                ContactSelfQrCodeResponse,
            ),
            "/wechaty.puppet.Puppet/ContactSelfName": grpclib.const.Handler(
                self.__rpc_contact_self_name,
                grpclib.const.Cardinality.UNARY_UNARY,
                ContactSelfNameRequest,
                ContactSelfNameResponse,
            ),
            "/wechaty.puppet.Puppet/ContactSelfSignature": grpclib.const.Handler(
                self.__rpc_contact_self_signature,
                grpclib.const.Cardinality.UNARY_UNARY,
                ContactSelfSignatureRequest,
                ContactSelfSignatureResponse,
            ),
            "/wechaty.puppet.Puppet/ContactPayload": grpclib.const.Handler(
                self.__rpc_contact_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                ContactPayloadRequest,
                ContactPayloadResponse,
            ),
            "/wechaty.puppet.Puppet/ContactAlias": grpclib.const.Handler(
                self.__rpc_contact_alias,
                grpclib.const.Cardinality.UNARY_UNARY,
                ContactAliasRequest,
                ContactAliasResponse,
            ),
            "/wechaty.puppet.Puppet/ContactAvatar": grpclib.const.Handler(
                self.__rpc_contact_avatar,
                grpclib.const.Cardinality.UNARY_UNARY,
                ContactAvatarRequest,
                ContactAvatarResponse,
            ),
            "/wechaty.puppet.Puppet/ContactPhone": grpclib.const.Handler(
                self.__rpc_contact_phone,
                grpclib.const.Cardinality.UNARY_UNARY,
                ContactPhoneRequest,
                ContactPhoneResponse,
            ),
            "/wechaty.puppet.Puppet/ContactCorporationRemark": grpclib.const.Handler(
                self.__rpc_contact_corporation_remark,
                grpclib.const.Cardinality.UNARY_UNARY,
                ContactCorporationRemarkRequest,
                ContactCorporationRemarkResponse,
            ),
            "/wechaty.puppet.Puppet/ContactDescription": grpclib.const.Handler(
                self.__rpc_contact_description,
                grpclib.const.Cardinality.UNARY_UNARY,
                ContactDescriptionRequest,
                ContactDescriptionResponse,
            ),
            "/wechaty.puppet.Puppet/ContactList": grpclib.const.Handler(
                self.__rpc_contact_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ContactListRequest,
                ContactListResponse,
            ),
            "/wechaty.puppet.Puppet/FriendshipPayload": grpclib.const.Handler(
                self.__rpc_friendship_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                FriendshipPayloadRequest,
                FriendshipPayloadResponse,
            ),
            "/wechaty.puppet.Puppet/FriendshipSearchPhone": grpclib.const.Handler(
                self.__rpc_friendship_search_phone,
                grpclib.const.Cardinality.UNARY_UNARY,
                FriendshipSearchPhoneRequest,
                FriendshipSearchPhoneResponse,
            ),
            "/wechaty.puppet.Puppet/FriendshipSearchWeixin": grpclib.const.Handler(
                self.__rpc_friendship_search_weixin,
                grpclib.const.Cardinality.UNARY_UNARY,
                FriendshipSearchWeixinRequest,
                FriendshipSearchWeixinResponse,
            ),
            "/wechaty.puppet.Puppet/FriendshipAdd": grpclib.const.Handler(
                self.__rpc_friendship_add,
                grpclib.const.Cardinality.UNARY_UNARY,
                FriendshipAddRequest,
                FriendshipAddResponse,
            ),
            "/wechaty.puppet.Puppet/FriendshipAccept": grpclib.const.Handler(
                self.__rpc_friendship_accept,
                grpclib.const.Cardinality.UNARY_UNARY,
                FriendshipAcceptRequest,
                FriendshipAcceptResponse,
            ),
            "/wechaty.puppet.Puppet/MessageFile": grpclib.const.Handler(
                self.__rpc_message_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessageFileRequest,
                MessageFileResponse,
            ),
            "/wechaty.puppet.Puppet/MessageImage": grpclib.const.Handler(
                self.__rpc_message_image,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessageImageRequest,
                MessageImageResponse,
            ),
            "/wechaty.puppet.Puppet/MessageSendFile": grpclib.const.Handler(
                self.__rpc_message_send_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessageSendFileRequest,
                MessageSendFileResponse,
            ),
            "/wechaty.puppet.Puppet/MessagePayload": grpclib.const.Handler(
                self.__rpc_message_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessagePayloadRequest,
                MessagePayloadResponse,
            ),
            "/wechaty.puppet.Puppet/MessageContact": grpclib.const.Handler(
                self.__rpc_message_contact,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessageContactRequest,
                MessageContactResponse,
            ),
            "/wechaty.puppet.Puppet/MessageFileStream": grpclib.const.Handler(
                self.__rpc_message_file_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                MessageFileStreamRequest,
                MessageFileStreamResponse,
            ),
            "/wechaty.puppet.Puppet/MessageImageStream": grpclib.const.Handler(
                self.__rpc_message_image_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                MessageImageStreamRequest,
                MessageImageStreamResponse,
            ),
            "/wechaty.puppet.Puppet/MessageMiniProgram": grpclib.const.Handler(
                self.__rpc_message_mini_program,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessageMiniProgramRequest,
                MessageMiniProgramResponse,
            ),
            "/wechaty.puppet.Puppet/MessageUrl": grpclib.const.Handler(
                self.__rpc_message_url,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessageUrlRequest,
                MessageUrlResponse,
            ),
            "/wechaty.puppet.Puppet/MessageRecall": grpclib.const.Handler(
                self.__rpc_message_recall,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessageRecallRequest,
                MessageRecallResponse,
            ),
            "/wechaty.puppet.Puppet/MessageForward": grpclib.const.Handler(
                self.__rpc_message_forward,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessageForwardRequest,
                MessageForwardResponse,
            ),
            "/wechaty.puppet.Puppet/MessageLocation": grpclib.const.Handler(
                self.__rpc_message_location,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessageLocationRequest,
                MessageLocationResponse,
            ),
            "/wechaty.puppet.Puppet/MessageSendContact": grpclib.const.Handler(
                self.__rpc_message_send_contact,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessageSendContactRequest,
                MessageSendContactResponse,
            ),
            "/wechaty.puppet.Puppet/MessageSendFileStream": grpclib.const.Handler(
                self.__rpc_message_send_file_stream,
                grpclib.const.Cardinality.STREAM_UNARY,
                MessageSendFileStreamRequest,
                MessageSendFileStreamResponse,
            ),
            "/wechaty.puppet.Puppet/MessageSendText": grpclib.const.Handler(
                self.__rpc_message_send_text,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessageSendTextRequest,
                MessageSendTextResponse,
            ),
            "/wechaty.puppet.Puppet/MessageSendMiniProgram": grpclib.const.Handler(
                self.__rpc_message_send_mini_program,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessageSendMiniProgramRequest,
                MessageSendMiniProgramResponse,
            ),
            "/wechaty.puppet.Puppet/MessageSendUrl": grpclib.const.Handler(
                self.__rpc_message_send_url,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessageSendUrlRequest,
                MessageSendUrlResponse,
            ),
            "/wechaty.puppet.Puppet/MessageSendLocation": grpclib.const.Handler(
                self.__rpc_message_send_location,
                grpclib.const.Cardinality.UNARY_UNARY,
                MessageSendLocationRequest,
                MessageSendLocationResponse,
            ),
            "/wechaty.puppet.Puppet/RoomPayload": grpclib.const.Handler(
                self.__rpc_room_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                RoomPayloadRequest,
                RoomPayloadResponse,
            ),
            "/wechaty.puppet.Puppet/RoomList": grpclib.const.Handler(
                self.__rpc_room_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                RoomListRequest,
                RoomListResponse,
            ),
            "/wechaty.puppet.Puppet/RoomAdd": grpclib.const.Handler(
                self.__rpc_room_add,
                grpclib.const.Cardinality.UNARY_UNARY,
                RoomAddRequest,
                RoomAddResponse,
            ),
            "/wechaty.puppet.Puppet/RoomAvatar": grpclib.const.Handler(
                self.__rpc_room_avatar,
                grpclib.const.Cardinality.UNARY_UNARY,
                RoomAvatarRequest,
                RoomAvatarResponse,
            ),
            "/wechaty.puppet.Puppet/RoomCreate": grpclib.const.Handler(
                self.__rpc_room_create,
                grpclib.const.Cardinality.UNARY_UNARY,
                RoomCreateRequest,
                RoomCreateResponse,
            ),
            "/wechaty.puppet.Puppet/RoomDel": grpclib.const.Handler(
                self.__rpc_room_del,
                grpclib.const.Cardinality.UNARY_UNARY,
                RoomDelRequest,
                RoomDelResponse,
            ),
            "/wechaty.puppet.Puppet/RoomQuit": grpclib.const.Handler(
                self.__rpc_room_quit,
                grpclib.const.Cardinality.UNARY_UNARY,
                RoomQuitRequest,
                RoomQuitResponse,
            ),
            "/wechaty.puppet.Puppet/RoomTopic": grpclib.const.Handler(
                self.__rpc_room_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                RoomTopicRequest,
                RoomTopicResponse,
            ),
            "/wechaty.puppet.Puppet/RoomQRCode": grpclib.const.Handler(
                self.__rpc_room_qr_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                RoomQrCodeRequest,
                RoomQrCodeResponse,
            ),
            "/wechaty.puppet.Puppet/RoomAnnounce": grpclib.const.Handler(
                self.__rpc_room_announce,
                grpclib.const.Cardinality.UNARY_UNARY,
                RoomAnnounceRequest,
                RoomAnnounceResponse,
            ),
            "/wechaty.puppet.Puppet/RoomMemberPayload": grpclib.const.Handler(
                self.__rpc_room_member_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                RoomMemberPayloadRequest,
                RoomMemberPayloadResponse,
            ),
            "/wechaty.puppet.Puppet/RoomMemberList": grpclib.const.Handler(
                self.__rpc_room_member_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                RoomMemberListRequest,
                RoomMemberListResponse,
            ),
            "/wechaty.puppet.Puppet/RoomInvitationPayload": grpclib.const.Handler(
                self.__rpc_room_invitation_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                RoomInvitationPayloadRequest,
                RoomInvitationPayloadResponse,
            ),
            "/wechaty.puppet.Puppet/RoomInvitationAccept": grpclib.const.Handler(
                self.__rpc_room_invitation_accept,
                grpclib.const.Cardinality.UNARY_UNARY,
                RoomInvitationAcceptRequest,
                RoomInvitationAcceptResponse,
            ),
            "/wechaty.puppet.Puppet/TagContactAdd": grpclib.const.Handler(
                self.__rpc_tag_contact_add,
                grpclib.const.Cardinality.UNARY_UNARY,
                TagContactAddRequest,
                TagContactAddResponse,
            ),
            "/wechaty.puppet.Puppet/TagContactRemove": grpclib.const.Handler(
                self.__rpc_tag_contact_remove,
                grpclib.const.Cardinality.UNARY_UNARY,
                TagContactRemoveRequest,
                TagContactRemoveResponse,
            ),
            "/wechaty.puppet.Puppet/TagContactDelete": grpclib.const.Handler(
                self.__rpc_tag_contact_delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                TagContactDeleteRequest,
                TagContactDeleteResponse,
            ),
            "/wechaty.puppet.Puppet/TagContactList": grpclib.const.Handler(
                self.__rpc_tag_contact_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                TagContactListRequest,
                TagContactListResponse,
            ),
            "/wechaty.puppet.Puppet/Download": grpclib.const.Handler(
                self.__rpc_download,
                grpclib.const.Cardinality.UNARY_STREAM,
                DownloadRequest,
                DownloadResponse,
            ),
            "/wechaty.puppet.Puppet/Upload": grpclib.const.Handler(
                self.__rpc_upload,
                grpclib.const.Cardinality.STREAM_UNARY,
                UploadRequest,
                UploadResponse,
            ),
        }
