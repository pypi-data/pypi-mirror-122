{"version":3,"file":"lib_index_js.e717c98a5e199aa8.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAA0E;AACzB;AACO;AACA;AACJ;AACb;AACQ;AAC/C,wBAAwB,8DAAO,GAAG,sBAAsB,+DAAM,EAAE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,mCAAmC;AACrG,qEAAqE,wCAAwC;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iDAAI,GAAG,6BAA6B;AACnE;AACA,mCAAmC,oCAAoC;AACvE,mCAAmC,2CAA2C;AAC9E,mCAAmC,mBAAmB;AACtD,mCAAmC,0CAA0C;AAC7E,mCAAmC,0CAA0C;AAC7E,mCAAmC,uCAAuC;AAC1E,mCAAmC,uCAAuC;AAC1E,mCAAmC,mBAAmB;AACtD,2BAA2B,iDAAI,GAAG,6BAA6B;AAC/D,mCAAmC,wCAAwC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA,oBAAoB;AACpB;AACA;AACA,SAAS;AACT;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA,oBAAoB;AACpB;AACA;AACA,SAAS;AACT;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA,yBAAyB,+DAAa;AACtC;AACA,6BAA6B,kBAAkB;AAC/C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wDAAS;AAC/C,4BAA4B,4DAA4D;AACxF,iBAAiB;AACjB;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAgB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wDAAwD;AAC3F;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,wDAAM;AACxC;AACA,sBAAsB,qEAAmB,IAAI,iEAAe,GAAG,kBAAkB;AACjF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAmB,GAAG,iCAAiC;AAC/D;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAmB,GAAG,iCAAiC;AAC/D;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAmB,GAAG,iCAAiC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wDAAM;AACjC;AACA,sBAAsB,iEAAe,GAAG,iBAAiB,GAAG,qEAAmB;AAC/E,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,0CAA0C;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB,EAAE,2DAAS;AAC1C;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;ACletB,iEAAe,4dAA4d","sources":["webpack://jupyterlab_cell_autorun_kernel_restart/./lib/index.js","webpack://jupyterlab_cell_autorun_kernel_restart/./style/icons/reinit.svg"],"sourcesContent":["import { Dialog, InputDialog, ToolbarButton } from '@jupyterlab/apputils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { CodeCell, CellModel } from '@jupyterlab/cells';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { Menu } from '@lumino/widgets';\nimport reinit from '../style/icons/reinit.svg';\nconst reinit_icon = new LabIcon({ name: 'test', svgstr: reinit });\nconst verbose = false;\nclass ReInit {\n    constructor(app, nbtracker, mainmenu) {\n        this.command_id_new_empty_scene = 'cell-autorun-kernel-restart:new-scene';\n        this.command_id_duplicate_scene = 'cell-autorun-kernel-restart:duplicate-scene';\n        this.command_id_rename_scene = 'cell-autorun-kernel-restart:rename-scene';\n        this.command_id_delete_scene = 'cell-autorun-kernel-restart:delete-scene';\n        this.command_id_toggle_init_cell = 'cell-autorun-kernel-restart:toggle-initcell';\n        this.command_id_do_reinit = 'cell-autorun-kernel-restart:do-reinit';\n        if (verbose)\n            console.log('Called constructor of ReInit');\n        this.app = app;\n        this.nbtracker = nbtracker;\n        this.mainmenu = mainmenu;\n        this.submenu = null;\n        this.reinit_menu = null;\n        this.kernel_status_listener_connected = false;\n        this.init_on_connect_stage = 'ignore reconnect';\n    }\n    initialize() {\n        this.setupGlobalCommands();\n        this.setupReinitMenu();\n        // connect some callbacks\n        this.nbtracker.widgetAdded.connect((sender, nbpanel) => { this.onNotebookTabAdded(nbpanel); });\n        this.nbtracker.currentChanged.connect((sender, nbpanel) => { this.onActiveNotebookChanged(nbpanel); });\n    }\n    /** ****************************************************************************************************************************************\n     * Internal Helper Methods\n     */\n    // **** setup helpers **********************************************************************************************************************\n    setupReinitMenu() {\n        this.reinit_menu = new Menu({ commands: this.app.commands });\n        this.reinit_menu.title.label = 'ReInit';\n        this.reinit_menu.addItem({ command: this.command_id_do_reinit });\n        this.reinit_menu.addItem({ command: this.command_id_toggle_init_cell });\n        this.reinit_menu.addItem({ type: 'separator' });\n        this.reinit_menu.addItem({ command: this.command_id_new_empty_scene });\n        this.reinit_menu.addItem({ command: this.command_id_duplicate_scene });\n        this.reinit_menu.addItem({ command: this.command_id_rename_scene });\n        this.reinit_menu.addItem({ command: this.command_id_delete_scene });\n        this.reinit_menu.addItem({ type: 'separator' });\n        this.submenu = new Menu({ commands: this.app.commands });\n        this.reinit_menu.addItem({ type: 'submenu', submenu: this.submenu });\n        this.mainmenu.addMenu(this.reinit_menu);\n        this.updateSceneMenu();\n    }\n    setupGlobalCommands() {\n        // setup all commands this.command_id_* including key bindings\n        this.app.commands.addCommand(this.command_id_do_reinit, {\n            label: 'Restart kernel and launch init cells',\n            execute: () => { this.doReInit(); }\n        });\n        this.app.commands.addKeyBinding({\n            command: this.command_id_do_reinit,\n            args: {},\n            keys: ['Accel 0', 'Accel 0'],\n            selector: '.jp-Notebook'\n        });\n        this.app.commands.addCommand(this.command_id_toggle_init_cell, {\n            label: 'Toggle Init Cell',\n            execute: () => { this.toggleInitCell(); }\n        });\n        this.app.commands.addKeyBinding({\n            command: this.command_id_toggle_init_cell,\n            args: {},\n            keys: ['Accel I'],\n            selector: '.jp-Notebook'\n        });\n        this.app.commands.addCommand(this.command_id_new_empty_scene, {\n            label: 'New empty Scene',\n            execute: () => { this.newEmptyScene(); }\n        });\n        this.app.commands.addCommand(this.command_id_duplicate_scene, {\n            label: 'Duplicate Present Scene',\n            execute: () => { this.duplicatePresentScene(); }\n        });\n        this.app.commands.addCommand(this.command_id_rename_scene, {\n            label: 'Rename Present Scene',\n            execute: () => { this.renamePresentScene(); }\n        });\n        this.app.commands.addCommand(this.command_id_delete_scene, {\n            label: 'Delete Present Scene',\n            execute: () => { this.deletePresentScene(); }\n        });\n    }\n    setupToolbarButton(nbpanel) {\n        let button = new ToolbarButton({\n            icon: reinit_icon,\n            onClick: () => { this.doReInit(); },\n            tooltip: 'Restart kernel and launch init cells'\n        });\n        nbpanel.toolbar.insertItem(8, 'reinit_button', button);\n    }\n    // **** access to ReInit metadata **********************************************************************************************************\n    addDefaultReinitDataCellIfNotPresent(nbpanel) {\n        if (nbpanel.content.model) {\n            const cell0 = nbpanel.content.widgets[0];\n            if (!cell0 || !cell0.model.metadata.get('reinit_data')) {\n                if (verbose)\n                    console.log('Adding default ReInit Data Cell');\n                var reinit_cell = new CellModel({\n                    cell: { cell_type: 'raw', source: ['ReInit Data Cell'], metadata: { reinit_data: true, scenes: ['Default Scene'], present_scene: 'Default Scene' } }\n                });\n                nbpanel.content.model.cells.insert(0, reinit_cell);\n                nbpanel.content.update(); // doesn't seem to help\n            }\n        }\n        else {\n            console.error('Could not add default ReInit Data Cell');\n        }\n    }\n    getCurrentNotebookReinitDataCell() {\n        var _a;\n        if (verbose)\n            console.log('getCurrentNotebookReinitDataCell', (_a = this.nbtracker.currentWidget) === null || _a === void 0 ? void 0 : _a.context.path);\n        const nbpanel = this.nbtracker.currentWidget;\n        if (!nbpanel)\n            return null;\n        let datacell = nbpanel.content.widgets[0];\n        if (!datacell.model.metadata.get('reinit_data')) {\n            console.error('inconsistent reinit data');\n            return null;\n        }\n        return datacell;\n    }\n    getCurrentNotebookSceneList() {\n        const datacell = this.getCurrentNotebookReinitDataCell();\n        if (!datacell)\n            return null;\n        return datacell.model.metadata.get('scenes');\n    }\n    getCurrentNotebookPresentScene() {\n        var _a;\n        const datacell = this.getCurrentNotebookReinitDataCell();\n        if (!datacell)\n            return null;\n        const scene_list = this.getCurrentNotebookSceneList();\n        if (scene_list == null || scene_list.length == 0) {\n            console.error('scene_list is empty');\n            return null;\n        }\n        const present_scene = (_a = datacell.model.metadata.get('present_scene')) === null || _a === void 0 ? void 0 : _a.toString();\n        if (!present_scene) {\n            return scene_list[0];\n        }\n        else {\n            return present_scene;\n        }\n    }\n    setCurrentNotebookPresentScene(scene_name) {\n        const datacell = this.getCurrentNotebookReinitDataCell();\n        if (!datacell)\n            return;\n        const scene_list = this.getCurrentNotebookSceneList();\n        if (scene_list == null || scene_list.length == 0) {\n            console.error('scene_list is empty');\n            return;\n        }\n        if (!scene_list.includes(scene_name)) {\n            console.error('scene not in scene_list');\n        }\n        datacell.model.metadata.set('present_scene', scene_name);\n    }\n    setCurrentNotebookSceneList(scene_list) {\n        const datacell = this.getCurrentNotebookReinitDataCell();\n        if (!datacell)\n            return;\n        datacell.model.metadata.set('scenes', scene_list);\n    }\n    setReinitDataCellStyle() {\n        var _a;\n        (_a = this.getCurrentNotebookReinitDataCell()) === null || _a === void 0 ? void 0 : _a.hide();\n    }\n    async doKernelInitialization() {\n        if (!this.nbtracker.currentWidget)\n            return;\n        const present_scene = this.getCurrentNotebookPresentScene();\n        if (!present_scene)\n            return;\n        const md_tag_ext = 'init_scene__' + present_scene;\n        if (verbose)\n            console.log('executing all cell with tag', md_tag_ext);\n        const notebook = this.nbtracker.currentWidget.content;\n        const notebookPanel = this.nbtracker.currentWidget;\n        notebook.widgets.map((cell) => {\n            if (!!cell.model.metadata.get(md_tag_ext)) {\n                if (cell.model.type == 'code') {\n                    CodeCell.execute(cell, notebookPanel.sessionContext);\n                }\n            }\n        });\n    }\n    // **** various ****************************************************************************************************************************\n    updateSceneMenu() {\n        if (!this.submenu || !this.reinit_menu)\n            return;\n        this.submenu.title.label = 'Present Scene: <none>';\n        this.reinit_menu.title.label = 'ReInit';\n        this.submenu.clearItems();\n        const scene_list = this.getCurrentNotebookSceneList();\n        const present_scene = this.getCurrentNotebookPresentScene();\n        if (scene_list == null)\n            return;\n        this.submenu.title.label = 'Present Scene: ' + present_scene;\n        this.reinit_menu.title.label = 'ReInit: (' + present_scene + ')';\n        for (const scene_name of scene_list) {\n            const command_id = this.ensureSceneActivationCommandExistsAndReturnCommandId(scene_name);\n            this.submenu.addItem({ command: command_id });\n        }\n    }\n    ensureSceneActivationCommandExistsAndReturnCommandId(scene) {\n        const command_id = 'init_scene_activate__' + scene;\n        if (!this.app.commands.hasCommand(command_id)) {\n            this.app.commands.addCommand(command_id, {\n                label: scene,\n                isToggled: () => { return scene == this.getCurrentNotebookPresentScene(); },\n                execute: () => {\n                    this.setCurrentNotebookPresentScene(scene);\n                    this.updateInitCellDots();\n                    this.updateSceneMenu();\n                }\n            });\n        }\n        return command_id;\n    }\n    updateInitCellDots() {\n        const nbpanel = this.nbtracker.currentWidget;\n        if (!nbpanel)\n            return;\n        const present_scene = this.getCurrentNotebookPresentScene();\n        const md_tag_ext = 'init_scene__' + present_scene;\n        const notebook = nbpanel.content;\n        notebook.widgets.map((cell) => {\n            if (!!cell.model.metadata.get(md_tag_ext)) {\n                cell.addClass('cell-autorun-kernel-restart-enabled');\n                cell.addClass('cell-run-set-enabled');\n                console.log('test');\n            }\n            else {\n                cell.removeClass('cell-autorun-kernel-restart-enabled');\n            }\n        });\n    }\n    /** ****************************************************************************************************************************************\n     * Callbacks\n     */\n    // **** handle own commands ****************************************************************************************************************\n    async doReInit() {\n        var _a, _b, _c;\n        const result = await (new Dialog({\n            title: 'Do you really want to re-initialize the kernel with scene \"' + this.getCurrentNotebookPresentScene() + '\"?',\n            buttons: [Dialog.cancelButton(), Dialog.okButton({ label: 'Restart' })]\n        }).launch());\n        if (result.button.label == 'Restart') {\n            this.init_on_connect_stage = 0;\n            (_c = (_b = (_a = this.nbtracker.currentWidget) === null || _a === void 0 ? void 0 : _a.context.sessionContext.session) === null || _b === void 0 ? void 0 : _b.kernel) === null || _c === void 0 ? void 0 : _c.restart();\n        }\n    }\n    toggleInitCell() {\n        if (verbose)\n            console.log('Toggle Init Cell');\n        const cell = this.nbtracker.activeCell;\n        if (!cell)\n            return;\n        const present_scene = this.getCurrentNotebookPresentScene();\n        const md_tag_ext = 'init_scene__' + present_scene;\n        if (!cell.model.metadata.get(md_tag_ext)) {\n            cell.model.metadata.set(md_tag_ext, true);\n            cell.addClass('cell-autorun-kernel-restart-enabled');\n        }\n        else {\n            cell.model.metadata.delete(md_tag_ext);\n            cell.removeClass('cell-autorun-kernel-restart-enabled');\n        }\n    }\n    newEmptyScene() {\n        if (verbose)\n            console.log('Generating new empty scene');\n        const old_scene_list = this.getCurrentNotebookSceneList();\n        if (!old_scene_list)\n            return;\n        InputDialog.getText({ title: 'Name of the new scene:' }).then(new_scene => {\n            if (!new_scene.value)\n                return;\n            const new_scene_list = Object.assign([], old_scene_list); // copy old_scene_list over\n            new_scene_list.push(new_scene.value);\n            this.setCurrentNotebookSceneList(new_scene_list);\n            this.setCurrentNotebookPresentScene(new_scene.value);\n            this.updateSceneMenu();\n            this.updateInitCellDots();\n        });\n    }\n    duplicatePresentScene() {\n        if (verbose)\n            console.log('Duplicating present scene');\n        const present_scene = this.getCurrentNotebookPresentScene();\n        if (!present_scene)\n            return;\n        const old_scene_list = this.getCurrentNotebookSceneList();\n        if (!old_scene_list)\n            return;\n        const nbpanel = this.nbtracker.currentWidget;\n        if (!nbpanel)\n            return;\n        InputDialog.getText({ title: 'Name of the new scene:' }).then(new_scene => {\n            if (!new_scene.value)\n                return;\n            // TODO: make sure new scene is not in old scene list\n            const new_scene_list = Object.assign([], old_scene_list); // copy old_scene_list over\n            new_scene_list.push(new_scene.value);\n            this.setCurrentNotebookSceneList(new_scene_list);\n            // set the init_scene__* tags for the new scene\n            const md_tag_old = 'init_scene__' + present_scene;\n            const md_tag_new = 'init_scene__' + new_scene.value;\n            const notebook = nbpanel.content;\n            notebook.widgets.map((cell) => {\n                if (!!cell.model.metadata.get(md_tag_old)) {\n                    cell.model.metadata.set(md_tag_new, true);\n                }\n            });\n            this.setCurrentNotebookPresentScene(new_scene.value);\n            this.updateSceneMenu();\n            this.updateInitCellDots();\n        });\n    }\n    renamePresentScene() {\n        if (verbose)\n            console.log('Renaming present scene');\n        const present_scene = this.getCurrentNotebookPresentScene();\n        if (!present_scene)\n            return;\n        const old_scene_list = this.getCurrentNotebookSceneList();\n        if (!old_scene_list)\n            return;\n        const nbpanel = this.nbtracker.currentWidget;\n        if (!nbpanel)\n            return;\n        InputDialog.getText({ title: 'New name of the scene:' }).then(new_scene_name => {\n            if (!new_scene_name.value)\n                return;\n            const new_scene_list = [];\n            for (let scene of old_scene_list) {\n                if (scene != present_scene) {\n                    new_scene_list.push(scene);\n                }\n                else {\n                    new_scene_list.push(new_scene_name.value);\n                }\n            }\n            this.setCurrentNotebookSceneList(new_scene_list);\n            const md_tag_old = 'init_scene__' + present_scene;\n            const md_tag_new = 'init_scene__' + new_scene_name.value;\n            const notebook = nbpanel.content;\n            notebook.widgets.map((cell) => {\n                if (!!cell.model.metadata.get(md_tag_old)) {\n                    cell.model.metadata.set(md_tag_new, true);\n                }\n                cell.model.metadata.delete(md_tag_old);\n            });\n            this.setCurrentNotebookPresentScene(new_scene_name.value);\n            this.updateSceneMenu();\n            this.updateInitCellDots();\n        });\n    }\n    async deletePresentScene() {\n        if (verbose)\n            console.log('Deleting present scene');\n        const present_scene = this.getCurrentNotebookPresentScene();\n        if (!present_scene)\n            return;\n        const old_scene_list = this.getCurrentNotebookSceneList();\n        if (!old_scene_list)\n            return;\n        if (old_scene_list.length == 1) {\n            console.log('cannot delete the last scene');\n            return;\n        }\n        const nbpanel = this.nbtracker.currentWidget;\n        if (!nbpanel)\n            return;\n        const dialog = new Dialog({\n            title: 'Do you really want to delete scene \"' + present_scene + '\"?',\n            buttons: [Dialog.okButton({ label: 'Delete' }), Dialog.cancelButton()]\n        });\n        const result = await dialog.launch();\n        if (result.button.label == 'Delete') {\n            const new_scene_list = [];\n            for (let scene of old_scene_list) {\n                if (scene != present_scene) {\n                    new_scene_list.push(scene);\n                }\n            }\n            this.setCurrentNotebookSceneList(new_scene_list);\n            const md_tag_old = 'init_scene__' + present_scene;\n            const notebook = nbpanel.content;\n            notebook.widgets.map((cell) => {\n                cell.model.metadata.delete(md_tag_old);\n            });\n            this.setCurrentNotebookPresentScene(new_scene_list[0]);\n            this.updateSceneMenu();\n            this.updateInitCellDots();\n        }\n    }\n    // **** react to jupyterlab UI events ******************************************************************************************************\n    onNotebookTabAdded(nbpanel) {\n        // this is called whenever a new tab for a notebook is opened (includes a new view)\n        if (verbose)\n            console.log('Got new notebook tab for path:', nbpanel.context.path);\n        nbpanel.context.sessionContext.ready.then(() => { this.onAllCellsInNotebookReady(nbpanel); });\n        this.setupToolbarButton(nbpanel);\n    }\n    onActiveNotebookChanged(nbpanel) {\n        if (!nbpanel)\n            return;\n        if (verbose)\n            console.log('Changed active notebook tab:', nbpanel.context.path);\n        if (!nbpanel.context.sessionContext.isReady) {\n            if (verbose)\n                console.log('Notebook not ready yet:', nbpanel.context.path);\n            return;\n        }\n        this.updateSceneMenu();\n        this.updateInitCellDots();\n        this.setReinitDataCellStyle();\n    }\n    onAllCellsInNotebookReady(nbpanel) {\n        if (verbose)\n            console.log('All cells ready:', nbpanel.context.path);\n        this.addDefaultReinitDataCellIfNotPresent(nbpanel);\n        if (!nbpanel.context.sessionContext.session) {\n            console.error('ERROR 01');\n            return;\n        }\n        if (!nbpanel.context.sessionContext.session.kernel) {\n            console.error('ERROR 02');\n            return;\n        }\n        nbpanel.context.sessionContext.session.kernel.connectionStatusChanged.connect((kernel, conn_stat) => {\n            this.kernelConnectionStatusListener(kernel, conn_stat);\n        });\n        if (nbpanel != this.nbtracker.currentWidget) {\n            return;\n        }\n        this.updateSceneMenu();\n        this.updateInitCellDots();\n        this.setReinitDataCellStyle();\n    }\n    kernelConnectionStatusListener(kernel, conn_stat) {\n        if (this.init_on_connect_stage == 'ignore reconnect') {\n            return;\n        }\n        if (this.init_on_connect_stage == 0 && conn_stat == 'connecting') {\n            this.init_on_connect_stage = 1;\n            return;\n        }\n        if (this.init_on_connect_stage == 1 && conn_stat == 'connected') {\n            this.doKernelInitialization();\n            this.init_on_connect_stage = 'ignore reconnect';\n            return;\n        }\n    }\n}\n/**\n * Initialization data for the jupyterlab_cell_autorun_kernel_restart extension.\n */\nconst plugin = {\n    id: 'cell-autorun-kernel-restart',\n    autoStart: true,\n    requires: [INotebookTracker, IMainMenu],\n    activate: (app, nbtracker_, mainmenu) => {\n        const reinit_obj = new ReInit(app, nbtracker_, mainmenu);\n        reinit_obj.initialize();\n    }\n};\nexport default plugin;\n","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" viewBox=\\\"0 0 18 18\\\">\\n    <g class=\\\"jp-icon3\\\" fill=\\\"#616161\\\">\\n        <path d=\\\"M9 13.5c-2.49 0-4.5-2.01-4.5-4.5S6.51 4.5 9 4.5c1.24 0 2.36.52 3.17 1.33L10 8h5V3l-1.76 1.76C12.15 3.68 10.66 3 9 3 5.69 3 3.01 5.69 3.01 9S5.69 15 9 15c2.97 0 5.43-2.16 5.9-5h-1.52c-.46 2-2.24 3.5-4.38 3.5z\\\"/>\\n    </g>\\n <circle\\n     fill=\\\"#00f\\\"\\n     cx=\\\"8.9121799\\\"\\n     cy=\\\"8.9046097\\\"\\n     r=\\\"3.3522882\\\" />\\n</svg>\\n\";"],"names":[],"sourceRoot":""}