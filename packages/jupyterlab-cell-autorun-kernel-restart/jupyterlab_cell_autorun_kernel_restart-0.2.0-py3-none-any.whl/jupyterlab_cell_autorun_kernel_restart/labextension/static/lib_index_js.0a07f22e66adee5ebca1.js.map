{"version":3,"file":"lib_index_js.0a07f22e66adee5ebca1.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAqD;AACJ;AACF;AACS;AACA;AACJ;AACb;AACvC,wBAAwB,8DAAO,GAAG,sBAAsB,+DAAM,EAAE;AAChE,WAAW,OAAO;AAClB;AACA;AACA;AACA,iCAAiC,+DAAa;AAC9C;AACA,gBAAgB,iBAAiB,+BAA+B,sEAAsE;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,0CAA0C;AACpG;AACA;AACA,SAAS;AACT,qKAAqK,wDAAS,GAAG,QAAQ,gDAAgD,GAAG;AAC5O;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iDAAI,GAAG,6BAA6B;AAC7D;AACA,uBAAuB,uDAAuD;AAC9E;AACA;AACA;AACA,sFAAsF,OAAO,+CAA+C,GAAG;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA,oBAAoB;AACpB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA,oBAAoB;AACpB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+DAAgB;AACxC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wDAAS,GAAG,QAAQ,4DAA4D,mDAAmD;AACzK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB,EAAE,2DAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;AC9KtB,iEAAe,4dAA4d","sources":["webpack://jupyterlab_cell_autorun_kernel_restart/./lib/index.js","webpack://jupyterlab_cell_autorun_kernel_restart/./style/icons/reinit.svg"],"sourcesContent":["import { ToolbarButton } from '@jupyterlab/apputils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport reinit from '../style/icons/reinit.svg';\nimport { CodeCell, CellModel } from '@jupyterlab/cells';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { Menu } from '@lumino/widgets';\nconst reinit_icon = new LabIcon({ name: 'test', svgstr: reinit });\n//import { find } from '@lumino/algorithm';\nconst EXT_NAME = 'cell_autorun_kernel_restart';\nconst INITCELL = 'init_cell';\nconst INITCELL_ENABLED_CLASS = 'cell-autorun-kernel-restart-enabled';\nclass KernelReInitButton extends ToolbarButton {\n    constructor(app, nbtracker, mainmenu) {\n        super({ onClick: () => { this.onReInitButtonClicked(); }, icon: reinit_icon, tooltip: 'Restart kernel and launch init cells' });\n        this.app = app;\n        this.nbtracker = nbtracker;\n        this.mainmenu = mainmenu;\n        this.kernel_status_listener_connected = false;\n        this.init_on_connect_stage = 'ignore reconnect';\n    }\n    attach(nbpanel) {\n        var _a, _b;\n        const toolbar = nbpanel.toolbar;\n        let insertionPoint = 7;\n        toolbar.insertItem(insertionPoint + 1, 'reinit_button', this);\n        this.setupContextMenu();\n        this.setupRestartCommand();\n        this.setupMainMenu();\n        nbpanel.context.sessionContext.ready.then(() => { this.onAllCellsInNotebookReady(nbpanel); });\n        this.nbtracker.currentChanged.connect((sender, nbpanel_) => {\n            this.setDefaultNotebookMetadataIfNotPresent(nbpanel.content.model);\n        });\n        (_b = (_a = this.nbtracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.model) === null || _b === void 0 ? void 0 : _b.cells.insert(0, new CellModel({ cell: { cell_type: 'raw', source: ['ab'], metadata: {} }, }));\n    }\n    /**\n     * Privates\n     */\n    setDefaultNotebookMetadataIfNotPresent(nbmodel) {\n    }\n    setupMainMenu() {\n        const menu = new Menu({ commands: this.app.commands });\n        menu.title.label = 'ReInit';\n        menu.addItem({ command: 'cell-autorun-kernel-restart:toggle-autorun' });\n        this.mainmenu.addMenu(menu);\n    }\n    setCellStyles(nbpanel) {\n        //this.nbtracker.currentWidget?.content.model?.cells.insert(0, new CellModel({cell: {cell_type: 'raw', source: ['ab'], metadata: {}}, }))\n        const notebook = nbpanel.content;\n        notebook.widgets.map((cell) => {\n            if (!!cell.model.metadata.get(INITCELL)) {\n                cell.hide();\n                cell.addClass(INITCELL_ENABLED_CLASS);\n            }\n        });\n    }\n    setupContextMenu() {\n        const command_id = 'cell-autorun-kernel-restart:toggle-autorun';\n        this.app.commands.addCommand(command_id, {\n            label: 'Toggle Init Cell',\n            execute: () => { this.toggleInitCell(); }\n        });\n        this.app.commands.addKeyBinding({\n            command: command_id,\n            args: {},\n            keys: ['Accel I'],\n            selector: '.jp-Notebook'\n        });\n        this.app.contextMenu.addItem({\n            command: command_id,\n            selector: '.jp-Cell',\n            rank: 501\n        });\n    }\n    setupRestartCommand() {\n        const command_id = 'cell-autorun-kernel-restart:reinit';\n        this.app.commands.addCommand(command_id, {\n            label: 'Restart kernel and launch init cells',\n            execute: () => { this.onReInitButtonClicked(); }\n        });\n        this.app.commands.addKeyBinding({\n            command: command_id,\n            args: {},\n            keys: ['Accel 0', 'Accel 0'],\n            selector: '.jp-Notebook'\n        });\n    }\n    async doKernelInitialization() {\n        if (this.nbtracker.currentWidget) {\n            const notebook = this.nbtracker.currentWidget.content;\n            const notebookPanel = this.nbtracker.currentWidget;\n            notebook.widgets.map((cell) => {\n                if (!!cell.model.metadata.get(INITCELL)) {\n                    if (cell.model.type == 'code') {\n                        CodeCell.execute(cell, notebookPanel.sessionContext);\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Callbacks\n     */\n    toggleInitCell() {\n        const cell = this.nbtracker.activeCell;\n        if (cell) {\n            if (!!cell.model.metadata.get(INITCELL)) {\n                cell.model.metadata.set(INITCELL, false);\n                cell.removeClass(INITCELL_ENABLED_CLASS);\n            }\n            else {\n                cell.model.metadata.set(INITCELL, true);\n                cell.addClass(INITCELL_ENABLED_CLASS);\n            }\n        }\n    }\n    onAllCellsInNotebookReady(nbpanel) {\n        this.setCellStyles(nbpanel);\n        if (nbpanel.content.model) {\n            let cell0 = nbpanel.content.widgets[0];\n            console.log('aa', cell0.model.id);\n            const reinit_cell_id = 'reinit_datacell';\n            if (cell0.model.id != reinit_cell_id) {\n                console.log('adding reinit datacell');\n                let reinit_cell = new CellModel({ cell: { cell_type: 'raw', source: ['ReInit Data Cell'], metadata: { scenes: ['default'], default_scene: 'default' } } });\n                nbpanel.content.model.cells.insert(0, reinit_cell);\n            }\n        }\n        else {\n            console.error('could not add reinit cell');\n        }\n    }\n    onReInitButtonClicked() {\n        var _a, _b, _c, _d, _e, _f;\n        if (!this.kernel_status_listener_connected) {\n            (_c = (_b = (_a = this.nbtracker.currentWidget) === null || _a === void 0 ? void 0 : _a.context.sessionContext.session) === null || _b === void 0 ? void 0 : _b.kernel) === null || _c === void 0 ? void 0 : _c.connectionStatusChanged.connect((_unused, conn_stat) => {\n                this.kernelConnectionStatusListener(conn_stat);\n            });\n            this.kernel_status_listener_connected = true;\n        }\n        this.init_on_connect_stage = 0;\n        (_f = (_e = (_d = this.nbtracker.currentWidget) === null || _d === void 0 ? void 0 : _d.context.sessionContext.session) === null || _e === void 0 ? void 0 : _e.kernel) === null || _f === void 0 ? void 0 : _f.restart();\n    }\n    kernelConnectionStatusListener(conn_stat) {\n        if (this.init_on_connect_stage == 'ignore reconnect') {\n            return;\n        }\n        if (this.init_on_connect_stage == 0 && conn_stat == 'connecting') {\n            this.init_on_connect_stage = 1;\n            return;\n        }\n        if (this.init_on_connect_stage == 1 && conn_stat == 'connected') {\n            this.doKernelInitialization();\n            this.init_on_connect_stage = 'ignore reconnect';\n            return;\n        }\n    }\n}\n/**\n * Initialization data for the jupyterlab_cell_autorun_kernel_restart extension.\n */\nconst plugin = {\n    id: EXT_NAME,\n    autoStart: true,\n    requires: [INotebookTracker, IMainMenu],\n    activate: (app, nbtracker_, mainmenu) => {\n        nbtracker_.widgetAdded.connect((nbtracker, nbpanel) => {\n            if (nbpanel) {\n                let but = new KernelReInitButton(app, nbtracker, mainmenu);\n                but.attach(nbpanel);\n            }\n        });\n    }\n};\nexport default plugin;\n","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" viewBox=\\\"0 0 18 18\\\">\\n    <g class=\\\"jp-icon3\\\" fill=\\\"#616161\\\">\\n        <path d=\\\"M9 13.5c-2.49 0-4.5-2.01-4.5-4.5S6.51 4.5 9 4.5c1.24 0 2.36.52 3.17 1.33L10 8h5V3l-1.76 1.76C12.15 3.68 10.66 3 9 3 5.69 3 3.01 5.69 3.01 9S5.69 15 9 15c2.97 0 5.43-2.16 5.9-5h-1.52c-.46 2-2.24 3.5-4.38 3.5z\\\"/>\\n    </g>\\n <circle\\n     fill=\\\"#00f\\\"\\n     cx=\\\"8.9121799\\\"\\n     cy=\\\"8.9046097\\\"\\n     r=\\\"3.3522882\\\" />\\n</svg>\\n\";"],"names":[],"sourceRoot":""}