{"version":3,"file":"lib_index_js.4c85da5d3375313db9c6.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAkE;AACjB;AACF;AACS;AACA;AACJ;AACb;AACvC,wBAAwB,8DAAO,GAAG,sBAAsB,+DAAM,EAAE;AAChE,WAAW,OAAO;AAClB;AACA;AACA,iCAAiC,+DAAa;AAC9C;AACA,gBAAgB,iBAAiB,+BAA+B,sEAAsE;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,0CAA0C;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wDAAS;AAC/C,4BAA4B,4DAA4D;AACxF,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iDAAI,GAAG,6BAA6B;AACpE;AACA,8BAA8B,uDAAuD;AACrF,8BAA8B,+CAA+C;AAC7E,8BAA8B,mBAAmB;AACjD;AACA;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT,8BAA8B,yBAAyB;AACvD,8BAA8B,4BAA4B;AAC1D,8BAA8B,yBAAyB;AACvD,8BAA8B,mBAAmB;AACjD;AACA,2BAA2B,iDAAI,GAAG,6BAA6B;AAC/D;AACA,8BAA8B,wCAAwC;AACtE;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAmB,GAAG,wCAAwC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAmB,GAAG,wCAAwC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qBAAqB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA,oBAAoB;AACpB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA,oBAAoB;AACpB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+DAAgB;AACxC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB,EAAE,2DAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;AChUtB,iEAAe,4dAA4d","sources":["webpack://jupyterlab_cell_autorun_kernel_restart/./lib/index.js","webpack://jupyterlab_cell_autorun_kernel_restart/./style/icons/reinit.svg"],"sourcesContent":["import { InputDialog, ToolbarButton } from '@jupyterlab/apputils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport reinit from '../style/icons/reinit.svg';\nimport { CodeCell, CellModel } from '@jupyterlab/cells';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { Menu } from '@lumino/widgets';\nconst reinit_icon = new LabIcon({ name: 'test', svgstr: reinit });\n//import { find } from '@lumino/algorithm';\nconst EXT_NAME = 'cell_autorun_kernel_restart';\nconst INITCELL_ENABLED_CLASS = 'cell-autorun-kernel-restart-enabled';\nclass KernelReInitButton extends ToolbarButton {\n    constructor(app, nbtracker, mainmenu) {\n        super({ onClick: () => { this.onReInitButtonClicked(); }, icon: reinit_icon, tooltip: 'Restart kernel and launch init cells' });\n        this.app = app;\n        this.nbtracker = nbtracker;\n        this.mainmenu = mainmenu;\n        this.submenu = null;\n        this.kernel_status_listener_connected = false;\n        this.init_on_connect_stage = 'ignore reconnect';\n    }\n    attach(nbpanel) {\n        const toolbar = nbpanel.toolbar;\n        let insertionPoint = 7;\n        toolbar.insertItem(insertionPoint + 1, 'reinit_button', this);\n        this.setupContextMenu();\n        this.setupRestartCommand();\n        this.setupMainMenu();\n        nbpanel.context.sessionContext.ready.then(() => { this.onAllCellsInNotebookReady(nbpanel); });\n    }\n    /**\n     * Privates\n     */\n    addDefaultReinitDataCellIfNotPresent(nbpanel) {\n        if (nbpanel.content.model) {\n            let cell0 = nbpanel.content.widgets[0];\n            console.log('aa', cell0.model.metadata.get('reinit_data'));\n            if (!cell0.model.metadata.get('reinit_data')) {\n                console.log('adding reinit datacell');\n                let reinit_cell = new CellModel({\n                    cell: { cell_type: 'raw', source: ['ReInit Data Cell'], metadata: { reinit_data: true, scenes: ['default'], present_scene: 'default' } }\n                });\n                nbpanel.content.model.cells.insert(0, reinit_cell);\n            }\n        }\n        else {\n            console.error('could not add reinit cell');\n        }\n    }\n    getReinitDataCell(nbpanel) {\n        let datacell = nbpanel.content.widgets[0];\n        if (!datacell.model.metadata.get('reinit_data')) {\n            console.error('inconsistent reinit data');\n        }\n        return datacell;\n    }\n    setReinitDataCellStyle(nbpanel) {\n        this.getReinitDataCell(nbpanel).hide();\n    }\n    getPresentScene(nbpanel) {\n        return this.getReinitDataCell(nbpanel).model.metadata.get('present_scene');\n    }\n    setupMainMenu() {\n        const reinit_menu = new Menu({ commands: this.app.commands });\n        reinit_menu.title.label = 'ReInit';\n        reinit_menu.addItem({ command: 'cell-autorun-kernel-restart:toggle-autorun' });\n        reinit_menu.addItem({ command: 'cell-autorun-kernel-restart:reinit' });\n        reinit_menu.addItem({ type: 'separator' });\n        const command_id_dup = 'cell-autorun-kernel-restart:duplicate-scene';\n        this.app.commands.addCommand(command_id_dup, {\n            label: 'Duplicate Present Scene',\n            execute: () => { this.duplicatePresentScene(); }\n        });\n        const command_id_rename = 'cell-autorun-kernel-restart:rename-scene';\n        this.app.commands.addCommand(command_id_rename, {\n            label: 'Rename Present Scene',\n            execute: () => { this.renamePresentScene(); }\n        });\n        const command_id_del = 'cell-autorun-kernel-restart:delete-scene';\n        this.app.commands.addCommand(command_id_del, {\n            label: 'Delete Present Scene',\n            execute: () => { this.deletePresentScene(); }\n        });\n        reinit_menu.addItem({ command: command_id_dup });\n        reinit_menu.addItem({ command: command_id_rename });\n        reinit_menu.addItem({ command: command_id_del });\n        reinit_menu.addItem({ type: 'separator' });\n        this.mainmenu.addMenu(reinit_menu);\n        this.submenu = new Menu({ commands: this.app.commands });\n        this.submenu.title.label = 'Present Scene';\n        reinit_menu.addItem({ type: 'submenu', submenu: this.submenu });\n    }\n    duplicatePresentScene() {\n        const nbpanel = this.nbtracker.currentWidget;\n        if (nbpanel) {\n            const present_scene = this.getPresentScene(nbpanel);\n            InputDialog.getText({ title: 'Name of the duplicated scene:' }).then(new_scene => {\n                if (new_scene.value) {\n                    const old_scene_list = this.getReinitDataCell(nbpanel).model.metadata.get('scenes');\n                    const new_scene_list = [];\n                    for (let scene of old_scene_list) {\n                        new_scene_list.push(scene);\n                    }\n                    new_scene_list.push(new_scene.value);\n                    this.getReinitDataCell(nbpanel).model.metadata.set('scenes', new_scene_list);\n                    const md_tag_old = 'init_scene__' + present_scene;\n                    const md_tag_new = 'init_scene__' + new_scene;\n                    const notebook = nbpanel.content;\n                    notebook.widgets.map((cell) => {\n                        if (!!cell.model.metadata.get(md_tag_old)) {\n                            cell.model.metadata.set(md_tag_new, true);\n                        }\n                        else {\n                            cell.model.metadata.set(md_tag_new, false);\n                        }\n                    });\n                    this.updateScenesInMenu(nbpanel);\n                }\n            });\n        }\n    }\n    renamePresentScene() {\n        const nbpanel = this.nbtracker.currentWidget;\n        if (nbpanel) {\n            const present_scene = this.getPresentScene(nbpanel);\n            InputDialog.getText({ title: 'Name of the duplicated scene:' }).then(new_scene => {\n                if (new_scene.value) {\n                    const old_scene_list = this.getReinitDataCell(nbpanel).model.metadata.get('scenes');\n                    const new_scene_list = [];\n                    for (let scene of old_scene_list) {\n                        if (scene != present_scene) {\n                            new_scene_list.push(scene);\n                        }\n                    }\n                    new_scene_list.push(new_scene.value);\n                    this.getReinitDataCell(nbpanel).model.metadata.set('scenes', new_scene_list);\n                    const md_tag_old = 'init_scene__' + present_scene;\n                    const md_tag_new = 'init_scene__' + new_scene;\n                    const notebook = nbpanel.content;\n                    notebook.widgets.map((cell) => {\n                        if (!!cell.model.metadata.get(md_tag_old)) {\n                            cell.model.metadata.set(md_tag_new, true);\n                            cell.model.metadata.delete(md_tag_old);\n                        }\n                        else {\n                            cell.model.metadata.set(md_tag_new, false);\n                            cell.model.metadata.delete(md_tag_old);\n                        }\n                    });\n                    this.updateScenesInMenu(nbpanel);\n                }\n            });\n        }\n    }\n    deletePresentScene() {\n    }\n    updateScenesInMenu(nbpanel) {\n        const scene_list = this.getReinitDataCell(nbpanel).model.metadata.get('scenes');\n        if (scene_list && this.submenu) {\n            this.submenu.clearItems();\n            for (let scene of scene_list) {\n                const command_id = this.ensureSceneActivationCommandExistsAndReturnCommandId(scene);\n                this.submenu.addItem({ command: command_id });\n            }\n        }\n    }\n    ensureSceneActivationCommandExistsAndReturnCommandId(scene) {\n        const command_id = 'init_scene_activate__' + scene;\n        if (!this.app.commands.hasCommand(command_id)) {\n            this.app.commands.addCommand(command_id, {\n                label: scene,\n                isToggled: () => {\n                    if (this.nbtracker.currentWidget) {\n                        return scene == this.getPresentScene(this.nbtracker.currentWidget);\n                    }\n                    else {\n                        return false;\n                    }\n                },\n                execute: () => {\n                    if (this.nbtracker.currentWidget) {\n                        this.getReinitDataCell(this.nbtracker.currentWidget).model.metadata.set('present_scene', scene);\n                        this.setCellStyles(this.nbtracker.currentWidget);\n                    }\n                }\n            });\n        }\n        return command_id;\n    }\n    setCellStyles(nbpanel) {\n        if (this.nbtracker.currentWidget) {\n            const md_tag = 'init_scene__';\n            const present_scene = this.getPresentScene(this.nbtracker.currentWidget);\n            const md_tag_ext = md_tag + present_scene;\n            const notebook = nbpanel.content;\n            notebook.widgets.map((cell) => {\n                if (!!cell.model.metadata.get(md_tag_ext)) {\n                    cell.addClass(INITCELL_ENABLED_CLASS);\n                }\n                else {\n                    cell.removeClass(INITCELL_ENABLED_CLASS);\n                }\n            });\n        }\n    }\n    setupContextMenu() {\n        const command_id = 'cell-autorun-kernel-restart:toggle-autorun';\n        this.app.commands.addCommand(command_id, {\n            label: 'Toggle Init Cell',\n            execute: () => { this.toggleInitCell(); }\n        });\n        this.app.commands.addKeyBinding({\n            command: command_id,\n            args: {},\n            keys: ['Accel I'],\n            selector: '.jp-Notebook'\n        });\n        this.app.contextMenu.addItem({\n            command: command_id,\n            selector: '.jp-Cell',\n            rank: 501\n        });\n    }\n    setupRestartCommand() {\n        const command_id = 'cell-autorun-kernel-restart:reinit';\n        this.app.commands.addCommand(command_id, {\n            label: 'Restart kernel and launch init cells',\n            execute: () => { this.onReInitButtonClicked(); }\n        });\n        this.app.commands.addKeyBinding({\n            command: command_id,\n            args: {},\n            keys: ['Accel 0', 'Accel 0'],\n            selector: '.jp-Notebook'\n        });\n    }\n    async doKernelInitialization() {\n        const md_tag = 'init_scene__';\n        if (this.nbtracker.currentWidget) {\n            const present_scene = this.getPresentScene(this.nbtracker.currentWidget);\n            const md_tag_ext = md_tag + present_scene;\n            console.log('executing all cell with tag', md_tag_ext);\n            const notebook = this.nbtracker.currentWidget.content;\n            const notebookPanel = this.nbtracker.currentWidget;\n            notebook.widgets.map((cell) => {\n                if (!!cell.model.metadata.get(md_tag_ext)) {\n                    if (cell.model.type == 'code') {\n                        CodeCell.execute(cell, notebookPanel.sessionContext);\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Callbacks\n     */\n    toggleInitCell() {\n        const cell = this.nbtracker.activeCell;\n        const md_tag = 'init_scene__';\n        if (this.nbtracker.currentWidget && cell) {\n            const present_scene = this.getPresentScene(this.nbtracker.currentWidget);\n            const md_tag_ext = md_tag + present_scene;\n            if (!cell.model.metadata.get(md_tag_ext)) {\n                cell.model.metadata.set(md_tag_ext, true);\n                cell.addClass(INITCELL_ENABLED_CLASS);\n            }\n            else {\n                cell.model.metadata.set(md_tag_ext, false);\n                cell.removeClass(INITCELL_ENABLED_CLASS);\n            }\n        }\n    }\n    onAllCellsInNotebookReady(nbpanel) {\n        this.addDefaultReinitDataCellIfNotPresent(nbpanel);\n        this.setReinitDataCellStyle(nbpanel);\n        this.updateScenesInMenu(nbpanel);\n        this.setCellStyles(nbpanel);\n    }\n    onReInitButtonClicked() {\n        var _a, _b, _c, _d, _e, _f;\n        if (!this.kernel_status_listener_connected) {\n            (_c = (_b = (_a = this.nbtracker.currentWidget) === null || _a === void 0 ? void 0 : _a.context.sessionContext.session) === null || _b === void 0 ? void 0 : _b.kernel) === null || _c === void 0 ? void 0 : _c.connectionStatusChanged.connect((_unused, conn_stat) => {\n                this.kernelConnectionStatusListener(conn_stat);\n            });\n            this.kernel_status_listener_connected = true;\n        }\n        this.init_on_connect_stage = 0;\n        (_f = (_e = (_d = this.nbtracker.currentWidget) === null || _d === void 0 ? void 0 : _d.context.sessionContext.session) === null || _e === void 0 ? void 0 : _e.kernel) === null || _f === void 0 ? void 0 : _f.restart();\n    }\n    kernelConnectionStatusListener(conn_stat) {\n        if (this.init_on_connect_stage == 'ignore reconnect') {\n            return;\n        }\n        if (this.init_on_connect_stage == 0 && conn_stat == 'connecting') {\n            this.init_on_connect_stage = 1;\n            return;\n        }\n        if (this.init_on_connect_stage == 1 && conn_stat == 'connected') {\n            this.doKernelInitialization();\n            this.init_on_connect_stage = 'ignore reconnect';\n            return;\n        }\n    }\n}\n/**\n * Initialization data for the jupyterlab_cell_autorun_kernel_restart extension.\n */\nconst plugin = {\n    id: EXT_NAME,\n    autoStart: true,\n    requires: [INotebookTracker, IMainMenu],\n    activate: (app, nbtracker_, mainmenu) => {\n        nbtracker_.widgetAdded.connect((nbtracker, nbpanel) => {\n            if (nbpanel) {\n                let but = new KernelReInitButton(app, nbtracker, mainmenu);\n                but.attach(nbpanel);\n            }\n        });\n    }\n};\nexport default plugin;\n","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" viewBox=\\\"0 0 18 18\\\">\\n    <g class=\\\"jp-icon3\\\" fill=\\\"#616161\\\">\\n        <path d=\\\"M9 13.5c-2.49 0-4.5-2.01-4.5-4.5S6.51 4.5 9 4.5c1.24 0 2.36.52 3.17 1.33L10 8h5V3l-1.76 1.76C12.15 3.68 10.66 3 9 3 5.69 3 3.01 5.69 3.01 9S5.69 15 9 15c2.97 0 5.43-2.16 5.9-5h-1.52c-.46 2-2.24 3.5-4.38 3.5z\\\"/>\\n    </g>\\n <circle\\n     fill=\\\"#00f\\\"\\n     cx=\\\"8.9121799\\\"\\n     cy=\\\"8.9046097\\\"\\n     r=\\\"3.3522882\\\" />\\n</svg>\\n\";"],"names":[],"sourceRoot":""}