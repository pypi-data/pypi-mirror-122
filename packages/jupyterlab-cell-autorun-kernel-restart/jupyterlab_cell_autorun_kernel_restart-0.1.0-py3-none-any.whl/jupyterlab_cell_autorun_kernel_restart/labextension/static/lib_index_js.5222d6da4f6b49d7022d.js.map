{"version":3,"file":"lib_index_js.5222d6da4f6b49d7022d.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAqD;AACN;AACF;AACW;AACJ;AACpD,eAAe,8DAAO,GAAG,sBAAsB,wJAAM,EAAE;AACvD,WAAW,OAAO;AAClB;AACA,oBAAoB,SAAS;AAC7B;AACA,iCAAiC,+DAAa;AAC9C;AACA,gBAAgB,iBAAiB,+BAA+B,YAAY;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0DAA0D,8BAA8B;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,8BAA8B,SAAS;AACvC;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+DAAgB;AACxC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyterlab_cell_autorun_kernel_restart/./lib/index.js"],"sourcesContent":["import { ToolbarButton } from '@jupyterlab/apputils';\nimport reinit from '../style/icons/reinit.svg';\nimport { CodeCell } from '@jupyterlab/cells';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { LabIcon } from '@jupyterlab/ui-components';\nconst ic = new LabIcon({ name: 'test', svgstr: reinit });\n//import { find } from '@lumino/algorithm';\nconst EXT_NAME = 'cell_autorun_kernel_restart';\nconst INITCELL = '${EXT_NAME}:initcell';\nconst INITCELL_ENABLED_CLASS = 'cell-autorun-kernel-restart-enabled';\nclass KernelReInitButton extends ToolbarButton {\n    constructor(app, nbtracker) {\n        super({ onClick: () => { this.onReInitButtonClicked(); }, icon: ic });\n        this.app = app;\n        this.nbtracker = nbtracker;\n        this.kernel_status_listener_connected = false;\n        this.init_on_connect_stage = 'ignore reconnect';\n    }\n    attach(nbpanel) {\n        console.log('Adding ReInit button');\n        const toolbar = nbpanel.toolbar;\n        let insertionPoint = 7;\n        /*\n        find(toolbar.children(), (tbb, index) => {\n          console.log(tbb.);\n          if (tbb.hasClass('jp-Notebook-toolbarRestart')) {\n            insertionPoint = index;\n            return true;\n          }\n          return false;\n        });\n        */\n        toolbar.insertItem(insertionPoint + 1, 'reinit_button', this);\n        this.setupContextMenu();\n        this.setCellStyles(nbpanel);\n        nbpanel.context.sessionContext.ready.then(() => { this.setCellStyles(nbpanel); });\n    }\n    /**\n     * Privates\n     */\n    setCellStyles(nbpanel) {\n        const notebook = nbpanel.content;\n        notebook.widgets.map((cell) => {\n            if (!!cell.model.metadata.get(INITCELL)) {\n                cell.addClass(INITCELL_ENABLED_CLASS);\n            }\n        });\n    }\n    setupContextMenu() {\n        const command_id = '${EXT_NAME}:toggle_autorun';\n        this.app.commands.addCommand(command_id, {\n            label: 'Toggle Init Cell',\n            execute: () => { this.toggleInitCell(); }\n        });\n        this.app.contextMenu.addItem({\n            command: command_id,\n            selector: '.jp-Cell',\n            rank: 0\n        });\n    }\n    async doKernelInitialization() {\n        console.log('Initializing the Kernel');\n        if (this.nbtracker.currentWidget) {\n            const notebook = this.nbtracker.currentWidget.content;\n            const notebookPanel = this.nbtracker.currentWidget;\n            notebook.widgets.map((cell) => {\n                console.log('x', cell.model.metadata.get(INITCELL));\n                if (!!cell.model.metadata.get(INITCELL)) {\n                    if (cell.model.type == 'code') {\n                        CodeCell.execute(cell, notebookPanel.sessionContext);\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Callbacks\n     */\n    toggleInitCell() {\n        console.log('Toggle init cell');\n        const cell = this.nbtracker.activeCell;\n        if (cell) {\n            if (!!cell.model.metadata.get(INITCELL)) {\n                cell.model.metadata.set(INITCELL, false);\n                cell.removeClass(INITCELL_ENABLED_CLASS);\n            }\n            else {\n                cell.model.metadata.set(INITCELL, true);\n                cell.addClass(INITCELL_ENABLED_CLASS);\n            }\n        }\n    }\n    onReInitButtonClicked() {\n        var _a, _b, _c, _d, _e, _f;\n        console.log('Re-Initializing the Kernel');\n        if (!this.kernel_status_listener_connected) {\n            (_c = (_b = (_a = this.nbtracker.currentWidget) === null || _a === void 0 ? void 0 : _a.context.sessionContext.session) === null || _b === void 0 ? void 0 : _b.kernel) === null || _c === void 0 ? void 0 : _c.connectionStatusChanged.connect((_unused, conn_stat) => {\n                this.kernelConnectionStatusListener(conn_stat);\n            });\n            this.kernel_status_listener_connected = true;\n        }\n        this.init_on_connect_stage = 0;\n        (_f = (_e = (_d = this.nbtracker.currentWidget) === null || _d === void 0 ? void 0 : _d.context.sessionContext.session) === null || _e === void 0 ? void 0 : _e.kernel) === null || _f === void 0 ? void 0 : _f.restart();\n    }\n    kernelConnectionStatusListener(conn_stat) {\n        console.log('kernelstatus', conn_stat);\n        if (this.init_on_connect_stage == 'ignore reconnect') {\n            return;\n        }\n        if (this.init_on_connect_stage == 0 && conn_stat == 'connecting') {\n            this.init_on_connect_stage = 1;\n            return;\n        }\n        if (this.init_on_connect_stage == 1 && conn_stat == 'connected') {\n            this.doKernelInitialization();\n            this.init_on_connect_stage = 'ignore reconnect';\n            return;\n        }\n    }\n}\n/**\n * Initialization data for the jupyterlab_cell_autorun_kernel_restart extension.\n */\nconst plugin = {\n    id: EXT_NAME,\n    autoStart: true,\n    requires: [INotebookTracker],\n    activate: (app, nbtracker) => {\n        nbtracker.widgetAdded.connect((nbtracker_, nbpanel) => {\n            if (nbpanel) {\n                let but = new KernelReInitButton(app, nbtracker_);\n                but.attach(nbpanel);\n            }\n        });\n        console.log('jupyterlab_cell_autorun_kernel_restart is activated!');\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}