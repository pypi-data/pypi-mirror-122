# -*- coding: utf-8 -*-
"""portfolio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d9xiyWyI2NhgqICI02XUh4oYiyBxmWEA
"""
import sys
import pandas as pd
sys.path.append(".")
# Commented out IPython magic to ensure Python compatibility.
#from portfolio.data import Obtain_Data

import numpy as np
import matplotlib.pyplot as plt
from . import data
from . import signal_gen
from . import signal_figure
#from .data import Data
#from .signal import Signal
#from .signal_figure import signal_figure


class portfolio:
  def __init__(self,data,topic,initial_capital=10000,max_buy=10000000,max_sell=10000000):
    self.data = data
    self.topic = topic
    self.initial_capital = initial_capital
    self.max_buy = max_buy
    self.max_sell = max_sell
  def portfolios(self):
    management = self.data
    management = management.reset_index()
    prices = self.data['close']
    states = self.data['positions']
    states_buy = []
    states_sell = []
    cashes = []
    stocks = []
    holdings = []
    bh_roi = []
    cash = self.initial_capital
    stock = 0
    holding = 0
    state = 0
    def buy(i,cash,stock,price):
      shares = cash // price #shares to buy in integer
      if shares<1:
        print('order %d: total cash %f, not enough to buy 1 share at price %f' % (i, cash, price))
      else:
        if shares>self.max_buy:
            buy_units = self.max_buy
        else:
            buy_units = shares
        cost = buy_units*price
        cash -= cost
        stock += buy_units
        holding = stock*price
        print('index %d: buy %d units at price %f, current cash %f, current stock %f,current holding %f' % (i, buy_units, price, cash, stock, holding))
      return cash, stock, holding   

    def sell(i,cash, stock,price):
      if stock == 0:
        print('index %d: cannot sell anything, currentstock 0' % (i))
        holding = 0
        
      else:
        if stock > self.max_sell:
          sell_units = self.max_sell
        else:
          sell_units = stock
          stock -=sell_units
          revenue = sell_units*price
          cash += revenue
          holding = stock*price
          print('index %d: sell %d units at price %f, current cash %f, current stock %f,current holding %f' % (i, sell_units, price, cash, stock, holding))
      return cash, stock, holding

    for i in range(0,management.shape[0]):
      state = states[i]
      price = prices[i]
      if state == 1:
        cash, stock, holding = buy(i, cash, stock, price)
        states_buy.append(i)
      elif state == -1:
        cash, stock, holding = sell(i,cash, stock, price)
        states_sell.append(i)
      cashes.append(cash)
      stocks.append(stock)
      holdings.append(holding)
      bh_roi.append((price / prices[0]) - 1)

    management['cash']=cashes
    management['stock']=stocks
    management['holding']=holdings
    management['total']=management['cash']+management['holding']
    management['roi']=(management['total']-self.initial_capital)/self.initial_capital
    management['bh_roi'] = bh_roi
    management['sharpe'] = 0
    management['bh_sharpe'] = 0

    #management.to_csv("management.csv")
    pd.options.mode.chained_assignment = None
    for i in range(0, management.shape[0]):
      if management.loc[0:i,"roi"].std()==0: #or (np.isnan(management['roi'][0:i].std())):
        management["sharpe"][i]=0
      else:
        management["sharpe"][i]=np.mean(management["roi"][0:i])/ management.loc[0:i,"roi"].std()
      if management["bh_roi"][0:i].std()==0: #or (np.isnan(management['bh_roi'][0:i].std())):
        management["bh_sharpe"][i]=0
      else:
        management["bh_sharpe"][i]=np.mean(management["bh_roi"][0:i])/management["bh_roi"][0:i].std()

    final_roi = management['roi'].iloc[-1]    
    final_bh_roi = management['bh_roi'].iloc[-1]
    final_sharpe = management['sharpe'].iloc[-1]  
    final_bh_sharpe = management['bh_sharpe'].iloc[-1]  

    fig, (ax1, ax2, ax3) = plt.subplots(3,1, sharey=False, figsize=(18,12))
    ax1.plot(management[['holding', 'cash', 'total']])
    ax1.legend(management[['holding', 'cash', 'total']])
    ax1.set_title("Visualization of " + self.topic + " Portfolio Flows")
    ax2.plot(management[['roi']], label='roi_algorithm', color="b")
    ax2.plot(management[['bh_roi']], label='roi_buy&hold', color="r")
    ax2.set_ylabel('ROI')
    ax2.set_xlabel('index')
    ax2.set_title(self.topic + " Comparison of Return of Investment on VWAP Algorithm and Simple Buy&Hold Strategy ")
    ax2.legend()
    ax3.plot(management[["sharpe"]],label="sharpe_algorithm", color="b")
    ax3.plot(management[["bh_sharpe"]],label="sharpe_buy&hold", color="r")
    ax3.set_title(self.topic + " Comparison of Sharpe Ratio on VWAP Algorithm and Simple Buy&Hold Strategy")
    ax3.set_ylabel('Sharpe Ratio')
    ax3.set_xlabel('index')
    ax3.legend()
    plt.tight_layout()
    plt.savefig(f'Plot Results of {self.topic}')
    plt.show()
    #print(management['roi'].iloc[-1])
    print(f'Final ROI: {final_roi}')
    print(f'Buy and Hold Final ROI: {final_bh_roi}')
    print(f'Final Sharpe: {final_sharpe}')
    print(f'Buy and Hold Final Sharpe: {final_bh_sharpe}')
    return management


# API_key = 'RQT8G71H1MTA5YZJ'
# ticker = 'TSLA'
# interval = '5min'

# TICKER=data.Data(API_key,ticker, interval)
# df_TICKER=TICKER.import_data()
# VWAP_TICKER = signal_gen.Signal(df_TICKER, True)
# signals_TICKER = VWAP_TICKER.signals()
# VWAP_TICKER_Figure = signal_figure.signal_figure(df_TICKER, signals_TICKER, ticker)
# VWAP_Signal_TICKER = VWAP_TICKER_Figure.signal_figure()
# VWAP_TICKER_Portfolio = portfolio(VWAP_Signal_TICKER, ticker)
# TICKER_Portfolio = VWAP_TICKER_Portfolio.portfolios()


# API_key = input('API Key: ')
# ticker = input('Ticker: ')
# interval = input('Accepted values are: 1min, 5min, 15min, 30min, 60min: ')

class run:
  def __init__(self, API_key, ticker, interval):
    self.ticker = ticker
    self.API_key = API_key
    self.interval = interval

  def complete(self):  
  #TSLA=Data('RQT8G71H1MTA5YZJ','TSLA','5min')
    TICKER=data.Data(self.API_key,self.ticker, self.interval)
    df_TICKER=TICKER.import_data()
    VWAP_TICKER = signal_gen.Signal(df_TICKER, True)
    signals_TICKER = VWAP_TICKER.signals()
    VWAP_TICKER_Figure = signal_figure.signal_figure(df_TICKER, signals_TICKER, self.ticker)
    VWAP_Signal_TICKER = VWAP_TICKER_Figure.signal_figure()
    VWAP_TICKER_Portfolio = portfolio(VWAP_Signal_TICKER, self.ticker)
    TICKER_Portfolio = VWAP_TICKER_Portfolio.portfolios()
    return