# coding: utf-8

"""
    Laserfiche API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>650780</p>  # noqa: E501

    OpenAPI spec version: 1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PutLinksRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_id': 'int',
        'link_type_id': 'int',
        'custom_properties': 'dict(str, str)'
    }

    attribute_map = {
        'target_id': 'targetId',
        'link_type_id': 'linkTypeId',
        'custom_properties': 'customProperties'
    }

    def __init__(self, target_id=None, link_type_id=None, custom_properties=None):  # noqa: E501
        """PutLinksRequest - a model defined in Swagger"""  # noqa: E501
        self._target_id = None
        self._link_type_id = None
        self._custom_properties = None
        self.discriminator = None
        if target_id is not None:
            self.target_id = target_id
        if link_type_id is not None:
            self.link_type_id = link_type_id
        if custom_properties is not None:
            self.custom_properties = custom_properties

    @property
    def target_id(self):
        """Gets the target_id of this PutLinksRequest.  # noqa: E501

        The target entry ID to create a link to.  # noqa: E501

        :return: The target_id of this PutLinksRequest.  # noqa: E501
        :rtype: int
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this PutLinksRequest.

        The target entry ID to create a link to.  # noqa: E501

        :param target_id: The target_id of this PutLinksRequest.  # noqa: E501
        :type: int
        """

        self._target_id = target_id

    @property
    def link_type_id(self):
        """Gets the link_type_id of this PutLinksRequest.  # noqa: E501

        The link type ID to create the link with.  # noqa: E501

        :return: The link_type_id of this PutLinksRequest.  # noqa: E501
        :rtype: int
        """
        return self._link_type_id

    @link_type_id.setter
    def link_type_id(self, link_type_id):
        """Sets the link_type_id of this PutLinksRequest.

        The link type ID to create the link with.  # noqa: E501

        :param link_type_id: The link_type_id of this PutLinksRequest.  # noqa: E501
        :type: int
        """

        self._link_type_id = link_type_id

    @property
    def custom_properties(self):
        """Gets the custom_properties of this PutLinksRequest.  # noqa: E501

        Custom properties (key, value pairs) to be added to the link  # noqa: E501

        :return: The custom_properties of this PutLinksRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this PutLinksRequest.

        Custom properties (key, value pairs) to be added to the link  # noqa: E501

        :param custom_properties: The custom_properties of this PutLinksRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_properties = custom_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutLinksRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutLinksRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
