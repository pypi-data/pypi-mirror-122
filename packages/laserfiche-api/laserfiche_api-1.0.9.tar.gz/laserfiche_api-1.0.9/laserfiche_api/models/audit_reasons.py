# coding: utf-8

"""
    Laserfiche API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>650780</p>  # noqa: E501

    OpenAPI spec version: 1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditReasons(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delete_entry': 'list[WAuditReason]',
        'export_document': 'list[WAuditReason]'
    }

    attribute_map = {
        'delete_entry': 'deleteEntry',
        'export_document': 'exportDocument'
    }

    def __init__(self, delete_entry=None, export_document=None):  # noqa: E501
        """AuditReasons - a model defined in Swagger"""  # noqa: E501
        self._delete_entry = None
        self._export_document = None
        self.discriminator = None
        if delete_entry is not None:
            self.delete_entry = delete_entry
        if export_document is not None:
            self.export_document = export_document

    @property
    def delete_entry(self):
        """Gets the delete_entry of this AuditReasons.  # noqa: E501

        The audit reasons associated with delete entry.  # noqa: E501

        :return: The delete_entry of this AuditReasons.  # noqa: E501
        :rtype: list[WAuditReason]
        """
        return self._delete_entry

    @delete_entry.setter
    def delete_entry(self, delete_entry):
        """Sets the delete_entry of this AuditReasons.

        The audit reasons associated with delete entry.  # noqa: E501

        :param delete_entry: The delete_entry of this AuditReasons.  # noqa: E501
        :type: list[WAuditReason]
        """

        self._delete_entry = delete_entry

    @property
    def export_document(self):
        """Gets the export_document of this AuditReasons.  # noqa: E501

        The audit reasons associated with export document.  # noqa: E501

        :return: The export_document of this AuditReasons.  # noqa: E501
        :rtype: list[WAuditReason]
        """
        return self._export_document

    @export_document.setter
    def export_document(self, export_document):
        """Sets the export_document of this AuditReasons.

        The audit reasons associated with export document.  # noqa: E501

        :param export_document: The export_document of this AuditReasons.  # noqa: E501
        :type: list[WAuditReason]
        """

        self._export_document = export_document

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditReasons, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditReasons):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
