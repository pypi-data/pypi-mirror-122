# coding: utf-8

"""
    Laserfiche API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>650780</p>  # noqa: E501

    OpenAPI spec version: 1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OperationProgress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation_token': 'str',
        'operation_type': 'str',
        'percent_complete': 'int',
        'status': 'OperationStatus',
        'errors': 'list[OperationErrorItem]'
    }

    attribute_map = {
        'operation_token': 'operationToken',
        'operation_type': 'operationType',
        'percent_complete': 'percentComplete',
        'status': 'status',
        'errors': 'errors'
    }

    def __init__(self, operation_token=None, operation_type=None, percent_complete=None, status=None, errors=None):  # noqa: E501
        """OperationProgress - a model defined in Swagger"""  # noqa: E501
        self._operation_token = None
        self._operation_type = None
        self._percent_complete = None
        self._status = None
        self._errors = None
        self.discriminator = None
        if operation_token is not None:
            self.operation_token = operation_token
        if operation_type is not None:
            self.operation_type = operation_type
        if percent_complete is not None:
            self.percent_complete = percent_complete
        if status is not None:
            self.status = status
        if errors is not None:
            self.errors = errors

    @property
    def operation_token(self):
        """Gets the operation_token of this OperationProgress.  # noqa: E501


        :return: The operation_token of this OperationProgress.  # noqa: E501
        :rtype: str
        """
        return self._operation_token

    @operation_token.setter
    def operation_token(self, operation_token):
        """Sets the operation_token of this OperationProgress.


        :param operation_token: The operation_token of this OperationProgress.  # noqa: E501
        :type: str
        """

        self._operation_token = operation_token

    @property
    def operation_type(self):
        """Gets the operation_type of this OperationProgress.  # noqa: E501


        :return: The operation_type of this OperationProgress.  # noqa: E501
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this OperationProgress.


        :param operation_type: The operation_type of this OperationProgress.  # noqa: E501
        :type: str
        """

        self._operation_type = operation_type

    @property
    def percent_complete(self):
        """Gets the percent_complete of this OperationProgress.  # noqa: E501


        :return: The percent_complete of this OperationProgress.  # noqa: E501
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this OperationProgress.


        :param percent_complete: The percent_complete of this OperationProgress.  # noqa: E501
        :type: int
        """

        self._percent_complete = percent_complete

    @property
    def status(self):
        """Gets the status of this OperationProgress.  # noqa: E501


        :return: The status of this OperationProgress.  # noqa: E501
        :rtype: OperationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OperationProgress.


        :param status: The status of this OperationProgress.  # noqa: E501
        :type: OperationStatus
        """

        self._status = status

    @property
    def errors(self):
        """Gets the errors of this OperationProgress.  # noqa: E501


        :return: The errors of this OperationProgress.  # noqa: E501
        :rtype: list[OperationErrorItem]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this OperationProgress.


        :param errors: The errors of this OperationProgress.  # noqa: E501
        :type: list[OperationErrorItem]
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OperationProgress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperationProgress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
