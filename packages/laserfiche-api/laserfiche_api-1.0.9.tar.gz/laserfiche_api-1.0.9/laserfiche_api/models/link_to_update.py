# coding: utf-8

"""
    Laserfiche API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>650780</p>  # noqa: E501

    OpenAPI spec version: 1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LinkToUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link_type_id': 'int',
        'other_source_id': 'int',
        'is_source': 'bool'
    }

    attribute_map = {
        'link_type_id': 'linkTypeId',
        'other_source_id': 'otherSourceId',
        'is_source': 'isSource'
    }

    def __init__(self, link_type_id=None, other_source_id=None, is_source=None):  # noqa: E501
        """LinkToUpdate - a model defined in Swagger"""  # noqa: E501
        self._link_type_id = None
        self._other_source_id = None
        self._is_source = None
        self.discriminator = None
        if link_type_id is not None:
            self.link_type_id = link_type_id
        if other_source_id is not None:
            self.other_source_id = other_source_id
        if is_source is not None:
            self.is_source = is_source

    @property
    def link_type_id(self):
        """Gets the link_type_id of this LinkToUpdate.  # noqa: E501

        The id of the link assigned to the entry.  # noqa: E501

        :return: The link_type_id of this LinkToUpdate.  # noqa: E501
        :rtype: int
        """
        return self._link_type_id

    @link_type_id.setter
    def link_type_id(self, link_type_id):
        """Sets the link_type_id of this LinkToUpdate.

        The id of the link assigned to the entry.  # noqa: E501

        :param link_type_id: The link_type_id of this LinkToUpdate.  # noqa: E501
        :type: int
        """

        self._link_type_id = link_type_id

    @property
    def other_source_id(self):
        """Gets the other_source_id of this LinkToUpdate.  # noqa: E501

        The id of the other source linked to the entry.  # noqa: E501

        :return: The other_source_id of this LinkToUpdate.  # noqa: E501
        :rtype: int
        """
        return self._other_source_id

    @other_source_id.setter
    def other_source_id(self, other_source_id):
        """Sets the other_source_id of this LinkToUpdate.

        The id of the other source linked to the entry.  # noqa: E501

        :param other_source_id: The other_source_id of this LinkToUpdate.  # noqa: E501
        :type: int
        """

        self._other_source_id = other_source_id

    @property
    def is_source(self):
        """Gets the is_source of this LinkToUpdate.  # noqa: E501

        Whether the entry is the source for the link.  # noqa: E501

        :return: The is_source of this LinkToUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._is_source

    @is_source.setter
    def is_source(self, is_source):
        """Sets the is_source of this LinkToUpdate.

        Whether the entry is the source for the link.  # noqa: E501

        :param is_source: The is_source of this LinkToUpdate.  # noqa: E501
        :type: bool
        """

        self._is_source = is_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LinkToUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkToUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
