# coding: utf-8

"""
    Laserfiche API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>650780</p>  # noqa: E501

    OpenAPI spec version: 1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PutFieldValsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fields': 'dict(str, FieldToUpdate)',
        'tags': 'list[str]',
        'links': 'list[LinkToUpdate]'
    }

    attribute_map = {
        'fields': 'fields',
        'tags': 'tags',
        'links': 'links'
    }

    def __init__(self, fields=None, tags=None, links=None):  # noqa: E501
        """PutFieldValsRequest - a model defined in Swagger"""  # noqa: E501
        self._fields = None
        self._tags = None
        self._links = None
        self.discriminator = None
        if fields is not None:
            self.fields = fields
        if tags is not None:
            self.tags = tags
        if links is not None:
            self.links = links

    @property
    def fields(self):
        """Gets the fields of this PutFieldValsRequest.  # noqa: E501

        The fields that will be assigned to the entry.  # noqa: E501

        :return: The fields of this PutFieldValsRequest.  # noqa: E501
        :rtype: dict(str, FieldToUpdate)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this PutFieldValsRequest.

        The fields that will be assigned to the entry.  # noqa: E501

        :param fields: The fields of this PutFieldValsRequest.  # noqa: E501
        :type: dict(str, FieldToUpdate)
        """

        self._fields = fields

    @property
    def tags(self):
        """Gets the tags of this PutFieldValsRequest.  # noqa: E501

        The tags that will be assigned to the entry.  # noqa: E501

        :return: The tags of this PutFieldValsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PutFieldValsRequest.

        The tags that will be assigned to the entry.  # noqa: E501

        :param tags: The tags of this PutFieldValsRequest.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def links(self):
        """Gets the links of this PutFieldValsRequest.  # noqa: E501

        The links that will be assigned to the entry.  # noqa: E501

        :return: The links of this PutFieldValsRequest.  # noqa: E501
        :rtype: list[LinkToUpdate]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PutFieldValsRequest.

        The links that will be assigned to the entry.  # noqa: E501

        :param links: The links of this PutFieldValsRequest.  # noqa: E501
        :type: list[LinkToUpdate]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutFieldValsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutFieldValsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
