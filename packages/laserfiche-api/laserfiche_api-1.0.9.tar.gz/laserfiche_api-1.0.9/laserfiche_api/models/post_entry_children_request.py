# coding: utf-8

"""
    Laserfiche API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>650780</p>  # noqa: E501

    OpenAPI spec version: 1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostEntryChildrenRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'entry_type': 'OneOfPostEntryChildrenRequestEntryType',
        'target_id': 'int',
        'source_id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'entry_type': 'entryType',
        'target_id': 'targetId',
        'source_id': 'sourceId'
    }

    def __init__(self, name=None, entry_type=None, target_id=None, source_id=None):  # noqa: E501
        """PostEntryChildrenRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._entry_type = None
        self._target_id = None
        self._source_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if entry_type is not None:
            self.entry_type = entry_type
        if target_id is not None:
            self.target_id = target_id
        if source_id is not None:
            self.source_id = source_id

    @property
    def name(self):
        """Gets the name of this PostEntryChildrenRequest.  # noqa: E501

        The name of the entry.  # noqa: E501

        :return: The name of this PostEntryChildrenRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostEntryChildrenRequest.

        The name of the entry.  # noqa: E501

        :param name: The name of this PostEntryChildrenRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def entry_type(self):
        """Gets the entry_type of this PostEntryChildrenRequest.  # noqa: E501

        The type of the entry.  # noqa: E501

        :return: The entry_type of this PostEntryChildrenRequest.  # noqa: E501
        :rtype: OneOfPostEntryChildrenRequestEntryType
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this PostEntryChildrenRequest.

        The type of the entry.  # noqa: E501

        :param entry_type: The entry_type of this PostEntryChildrenRequest.  # noqa: E501
        :type: OneOfPostEntryChildrenRequestEntryType
        """

        self._entry_type = entry_type

    @property
    def target_id(self):
        """Gets the target_id of this PostEntryChildrenRequest.  # noqa: E501

        The TargetId is only needed for creating a shortcut. This will be the entry ID of the shortcut target.  # noqa: E501

        :return: The target_id of this PostEntryChildrenRequest.  # noqa: E501
        :rtype: int
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this PostEntryChildrenRequest.

        The TargetId is only needed for creating a shortcut. This will be the entry ID of the shortcut target.  # noqa: E501

        :param target_id: The target_id of this PostEntryChildrenRequest.  # noqa: E501
        :type: int
        """

        self._target_id = target_id

    @property
    def source_id(self):
        """Gets the source_id of this PostEntryChildrenRequest.  # noqa: E501

        The SourceId is needed for some operations that require a source/destination. One example is the Copy operation.  # noqa: E501

        :return: The source_id of this PostEntryChildrenRequest.  # noqa: E501
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this PostEntryChildrenRequest.

        The SourceId is needed for some operations that require a source/destination. One example is the Copy operation.  # noqa: E501

        :param source_id: The source_id of this PostEntryChildrenRequest.  # noqa: E501
        :type: int
        """

        self._source_id = source_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostEntryChildrenRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostEntryChildrenRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
