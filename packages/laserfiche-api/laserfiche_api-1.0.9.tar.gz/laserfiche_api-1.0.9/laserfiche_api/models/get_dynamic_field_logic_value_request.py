# coding: utf-8

"""
    Laserfiche API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>650780</p>  # noqa: E501

    OpenAPI spec version: 1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetDynamicFieldLogicValueRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template_id': 'int',
        'field_values': 'dict(str, str)'
    }

    attribute_map = {
        'template_id': 'templateId',
        'field_values': 'fieldValues'
    }

    def __init__(self, template_id=None, field_values=None):  # noqa: E501
        """GetDynamicFieldLogicValueRequest - a model defined in Swagger"""  # noqa: E501
        self._template_id = None
        self._field_values = None
        self.discriminator = None
        if template_id is not None:
            self.template_id = template_id
        if field_values is not None:
            self.field_values = field_values

    @property
    def template_id(self):
        """Gets the template_id of this GetDynamicFieldLogicValueRequest.  # noqa: E501

        The template id.  # noqa: E501

        :return: The template_id of this GetDynamicFieldLogicValueRequest.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this GetDynamicFieldLogicValueRequest.

        The template id.  # noqa: E501

        :param template_id: The template_id of this GetDynamicFieldLogicValueRequest.  # noqa: E501
        :type: int
        """

        self._template_id = template_id

    @property
    def field_values(self):
        """Gets the field_values of this GetDynamicFieldLogicValueRequest.  # noqa: E501

        The dynamic fields.  # noqa: E501

        :return: The field_values of this GetDynamicFieldLogicValueRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._field_values

    @field_values.setter
    def field_values(self, field_values):
        """Sets the field_values of this GetDynamicFieldLogicValueRequest.

        The dynamic fields.  # noqa: E501

        :param field_values: The field_values of this GetDynamicFieldLogicValueRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._field_values = field_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetDynamicFieldLogicValueRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetDynamicFieldLogicValueRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
