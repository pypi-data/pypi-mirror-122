# coding: utf-8

"""
    Laserfiche API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>650780</p>  # noqa: E501

    OpenAPI spec version: 1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CopyAsyncRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'source_id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'source_id': 'sourceId'
    }

    def __init__(self, name=None, source_id=None):  # noqa: E501
        """CopyAsyncRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._source_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if source_id is not None:
            self.source_id = source_id

    @property
    def name(self):
        """Gets the name of this CopyAsyncRequest.  # noqa: E501

        The name of the entry.  # noqa: E501

        :return: The name of this CopyAsyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CopyAsyncRequest.

        The name of the entry.  # noqa: E501

        :param name: The name of this CopyAsyncRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def source_id(self):
        """Gets the source_id of this CopyAsyncRequest.  # noqa: E501

        The source entry Id to copy.  # noqa: E501

        :return: The source_id of this CopyAsyncRequest.  # noqa: E501
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this CopyAsyncRequest.

        The source entry Id to copy.  # noqa: E501

        :param source_id: The source_id of this CopyAsyncRequest.  # noqa: E501
        :type: int
        """

        self._source_id = source_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CopyAsyncRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CopyAsyncRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
