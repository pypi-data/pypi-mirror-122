# coding: utf-8

"""
    Laserfiche API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>650780</p>  # noqa: E501

    OpenAPI spec version: 1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateEntryOperations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_create': 'EntryCreate',
        'set_edoc': 'SetEdoc',
        'set_template': 'SetTemplate',
        'set_fields': 'SetFields',
        'set_tags': 'SetTags',
        'set_links': 'SetLinks'
    }

    attribute_map = {
        'entry_create': 'entryCreate',
        'set_edoc': 'setEdoc',
        'set_template': 'setTemplate',
        'set_fields': 'setFields',
        'set_tags': 'setTags',
        'set_links': 'setLinks'
    }

    def __init__(self, entry_create=None, set_edoc=None, set_template=None, set_fields=None, set_tags=None, set_links=None):  # noqa: E501
        """CreateEntryOperations - a model defined in Swagger"""  # noqa: E501
        self._entry_create = None
        self._set_edoc = None
        self._set_template = None
        self._set_fields = None
        self._set_tags = None
        self._set_links = None
        self.discriminator = None
        if entry_create is not None:
            self.entry_create = entry_create
        if set_edoc is not None:
            self.set_edoc = set_edoc
        if set_template is not None:
            self.set_template = set_template
        if set_fields is not None:
            self.set_fields = set_fields
        if set_tags is not None:
            self.set_tags = set_tags
        if set_links is not None:
            self.set_links = set_links

    @property
    def entry_create(self):
        """Gets the entry_create of this CreateEntryOperations.  # noqa: E501


        :return: The entry_create of this CreateEntryOperations.  # noqa: E501
        :rtype: EntryCreate
        """
        return self._entry_create

    @entry_create.setter
    def entry_create(self, entry_create):
        """Sets the entry_create of this CreateEntryOperations.


        :param entry_create: The entry_create of this CreateEntryOperations.  # noqa: E501
        :type: EntryCreate
        """

        self._entry_create = entry_create

    @property
    def set_edoc(self):
        """Gets the set_edoc of this CreateEntryOperations.  # noqa: E501


        :return: The set_edoc of this CreateEntryOperations.  # noqa: E501
        :rtype: SetEdoc
        """
        return self._set_edoc

    @set_edoc.setter
    def set_edoc(self, set_edoc):
        """Sets the set_edoc of this CreateEntryOperations.


        :param set_edoc: The set_edoc of this CreateEntryOperations.  # noqa: E501
        :type: SetEdoc
        """

        self._set_edoc = set_edoc

    @property
    def set_template(self):
        """Gets the set_template of this CreateEntryOperations.  # noqa: E501


        :return: The set_template of this CreateEntryOperations.  # noqa: E501
        :rtype: SetTemplate
        """
        return self._set_template

    @set_template.setter
    def set_template(self, set_template):
        """Sets the set_template of this CreateEntryOperations.


        :param set_template: The set_template of this CreateEntryOperations.  # noqa: E501
        :type: SetTemplate
        """

        self._set_template = set_template

    @property
    def set_fields(self):
        """Gets the set_fields of this CreateEntryOperations.  # noqa: E501


        :return: The set_fields of this CreateEntryOperations.  # noqa: E501
        :rtype: SetFields
        """
        return self._set_fields

    @set_fields.setter
    def set_fields(self, set_fields):
        """Sets the set_fields of this CreateEntryOperations.


        :param set_fields: The set_fields of this CreateEntryOperations.  # noqa: E501
        :type: SetFields
        """

        self._set_fields = set_fields

    @property
    def set_tags(self):
        """Gets the set_tags of this CreateEntryOperations.  # noqa: E501


        :return: The set_tags of this CreateEntryOperations.  # noqa: E501
        :rtype: SetTags
        """
        return self._set_tags

    @set_tags.setter
    def set_tags(self, set_tags):
        """Sets the set_tags of this CreateEntryOperations.


        :param set_tags: The set_tags of this CreateEntryOperations.  # noqa: E501
        :type: SetTags
        """

        self._set_tags = set_tags

    @property
    def set_links(self):
        """Gets the set_links of this CreateEntryOperations.  # noqa: E501


        :return: The set_links of this CreateEntryOperations.  # noqa: E501
        :rtype: SetLinks
        """
        return self._set_links

    @set_links.setter
    def set_links(self, set_links):
        """Sets the set_links of this CreateEntryOperations.


        :param set_links: The set_links of this CreateEntryOperations.  # noqa: E501
        :type: SetLinks
        """

        self._set_links = set_links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateEntryOperations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateEntryOperations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
