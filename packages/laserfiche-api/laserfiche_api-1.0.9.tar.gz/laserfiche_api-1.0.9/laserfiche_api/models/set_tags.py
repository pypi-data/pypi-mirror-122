# coding: utf-8

"""
    Laserfiche API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>650780</p>  # noqa: E501

    OpenAPI spec version: 1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SetTags(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exceptions': 'list[APIServerException]',
        'assigned_tags': 'list[str]'
    }

    attribute_map = {
        'exceptions': 'exceptions',
        'assigned_tags': 'assignedTags'
    }

    def __init__(self, exceptions=None, assigned_tags=None):  # noqa: E501
        """SetTags - a model defined in Swagger"""  # noqa: E501
        self._exceptions = None
        self._assigned_tags = None
        self.discriminator = None
        if exceptions is not None:
            self.exceptions = exceptions
        if assigned_tags is not None:
            self.assigned_tags = assigned_tags

    @property
    def exceptions(self):
        """Gets the exceptions of this SetTags.  # noqa: E501

        The list of exceptions that occured when trying to perform the operation.  # noqa: E501

        :return: The exceptions of this SetTags.  # noqa: E501
        :rtype: list[APIServerException]
        """
        return self._exceptions

    @exceptions.setter
    def exceptions(self, exceptions):
        """Sets the exceptions of this SetTags.

        The list of exceptions that occured when trying to perform the operation.  # noqa: E501

        :param exceptions: The exceptions of this SetTags.  # noqa: E501
        :type: list[APIServerException]
        """

        self._exceptions = exceptions

    @property
    def assigned_tags(self):
        """Gets the assigned_tags of this SetTags.  # noqa: E501

        The tags that were assigned to the entry  # noqa: E501

        :return: The assigned_tags of this SetTags.  # noqa: E501
        :rtype: list[str]
        """
        return self._assigned_tags

    @assigned_tags.setter
    def assigned_tags(self, assigned_tags):
        """Sets the assigned_tags of this SetTags.

        The tags that were assigned to the entry  # noqa: E501

        :param assigned_tags: The assigned_tags of this SetTags.  # noqa: E501
        :type: list[str]
        """

        self._assigned_tags = assigned_tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetTags, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetTags):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
