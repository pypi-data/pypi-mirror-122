# coding: utf-8

"""
    Laserfiche API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>650780</p>  # noqa: E501

    OpenAPI spec version: 1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostEntryWithEdocMetadataRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template': 'str',
        'metadata': 'PutFieldValsRequest'
    }

    attribute_map = {
        'template': 'template',
        'metadata': 'metadata'
    }

    def __init__(self, template=None, metadata=None):  # noqa: E501
        """PostEntryWithEdocMetadataRequest - a model defined in Swagger"""  # noqa: E501
        self._template = None
        self._metadata = None
        self.discriminator = None
        if template is not None:
            self.template = template
        if metadata is not None:
            self.metadata = metadata

    @property
    def template(self):
        """Gets the template of this PostEntryWithEdocMetadataRequest.  # noqa: E501

        The name of the template assigned to the entry.  # noqa: E501

        :return: The template of this PostEntryWithEdocMetadataRequest.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this PostEntryWithEdocMetadataRequest.

        The name of the template assigned to the entry.  # noqa: E501

        :param template: The template of this PostEntryWithEdocMetadataRequest.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def metadata(self):
        """Gets the metadata of this PostEntryWithEdocMetadataRequest.  # noqa: E501


        :return: The metadata of this PostEntryWithEdocMetadataRequest.  # noqa: E501
        :rtype: PutFieldValsRequest
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PostEntryWithEdocMetadataRequest.


        :param metadata: The metadata of this PostEntryWithEdocMetadataRequest.  # noqa: E501
        :type: PutFieldValsRequest
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostEntryWithEdocMetadataRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostEntryWithEdocMetadataRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
