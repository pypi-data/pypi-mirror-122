# coding: utf-8

"""
    Laserfiche API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>650780</p>  # noqa: E501

    OpenAPI spec version: 1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValueToUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'str',
        'position': 'int'
    }

    attribute_map = {
        'value': 'value',
        'position': 'position'
    }

    def __init__(self, value=None, position=None):  # noqa: E501
        """ValueToUpdate - a model defined in Swagger"""  # noqa: E501
        self._value = None
        self._position = None
        self.discriminator = None
        if value is not None:
            self.value = value
        if position is not None:
            self.position = position

    @property
    def value(self):
        """Gets the value of this ValueToUpdate.  # noqa: E501

        The value assigned to the field at the position specified.  # noqa: E501

        :return: The value of this ValueToUpdate.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ValueToUpdate.

        The value assigned to the field at the position specified.  # noqa: E501

        :param value: The value of this ValueToUpdate.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def position(self):
        """Gets the position of this ValueToUpdate.  # noqa: E501

        The position of the value in the field. This is 1-indexed.  # noqa: E501

        :return: The position of this ValueToUpdate.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ValueToUpdate.

        The position of the value in the field. This is 1-indexed.  # noqa: E501

        :param position: The position of this ValueToUpdate.  # noqa: E501
        :type: int
        """

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValueToUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValueToUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
