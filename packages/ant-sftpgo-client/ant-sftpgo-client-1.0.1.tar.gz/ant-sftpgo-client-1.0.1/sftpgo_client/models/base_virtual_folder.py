# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseVirtualFolder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'mapped_path': 'str',
        'used_quota_size': 'int',
        'used_quota_files': 'int',
        'last_quota_update': 'int',
        'users': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'mapped_path': 'mapped_path',
        'used_quota_size': 'used_quota_size',
        'used_quota_files': 'used_quota_files',
        'last_quota_update': 'last_quota_update',
        'users': 'users'
    }

    def __init__(self, id=None, name=None, mapped_path=None, used_quota_size=None, used_quota_files=None, last_quota_update=None, users=None):  # noqa: E501
        """BaseVirtualFolder - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._mapped_path = None
        self._used_quota_size = None
        self._used_quota_files = None
        self._last_quota_update = None
        self._users = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        self.mapped_path = mapped_path
        if used_quota_size is not None:
            self.used_quota_size = used_quota_size
        if used_quota_files is not None:
            self.used_quota_files = used_quota_files
        if last_quota_update is not None:
            self.last_quota_update = last_quota_update
        if users is not None:
            self.users = users

    @property
    def id(self):
        """Gets the id of this BaseVirtualFolder.  # noqa: E501


        :return: The id of this BaseVirtualFolder.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseVirtualFolder.


        :param id: The id of this BaseVirtualFolder.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BaseVirtualFolder.  # noqa: E501

        unique name for this virtual folder  # noqa: E501

        :return: The name of this BaseVirtualFolder.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseVirtualFolder.

        unique name for this virtual folder  # noqa: E501

        :param name: The name of this BaseVirtualFolder.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def mapped_path(self):
        """Gets the mapped_path of this BaseVirtualFolder.  # noqa: E501

        absolute filesystem path to use as virtual folder  # noqa: E501

        :return: The mapped_path of this BaseVirtualFolder.  # noqa: E501
        :rtype: str
        """
        return self._mapped_path

    @mapped_path.setter
    def mapped_path(self, mapped_path):
        """Sets the mapped_path of this BaseVirtualFolder.

        absolute filesystem path to use as virtual folder  # noqa: E501

        :param mapped_path: The mapped_path of this BaseVirtualFolder.  # noqa: E501
        :type: str
        """
        if mapped_path is None:
            raise ValueError("Invalid value for `mapped_path`, must not be `None`")  # noqa: E501

        self._mapped_path = mapped_path

    @property
    def used_quota_size(self):
        """Gets the used_quota_size of this BaseVirtualFolder.  # noqa: E501


        :return: The used_quota_size of this BaseVirtualFolder.  # noqa: E501
        :rtype: int
        """
        return self._used_quota_size

    @used_quota_size.setter
    def used_quota_size(self, used_quota_size):
        """Sets the used_quota_size of this BaseVirtualFolder.


        :param used_quota_size: The used_quota_size of this BaseVirtualFolder.  # noqa: E501
        :type: int
        """

        self._used_quota_size = used_quota_size

    @property
    def used_quota_files(self):
        """Gets the used_quota_files of this BaseVirtualFolder.  # noqa: E501


        :return: The used_quota_files of this BaseVirtualFolder.  # noqa: E501
        :rtype: int
        """
        return self._used_quota_files

    @used_quota_files.setter
    def used_quota_files(self, used_quota_files):
        """Sets the used_quota_files of this BaseVirtualFolder.


        :param used_quota_files: The used_quota_files of this BaseVirtualFolder.  # noqa: E501
        :type: int
        """

        self._used_quota_files = used_quota_files

    @property
    def last_quota_update(self):
        """Gets the last_quota_update of this BaseVirtualFolder.  # noqa: E501

        Last quota update as unix timestamp in milliseconds  # noqa: E501

        :return: The last_quota_update of this BaseVirtualFolder.  # noqa: E501
        :rtype: int
        """
        return self._last_quota_update

    @last_quota_update.setter
    def last_quota_update(self, last_quota_update):
        """Sets the last_quota_update of this BaseVirtualFolder.

        Last quota update as unix timestamp in milliseconds  # noqa: E501

        :param last_quota_update: The last_quota_update of this BaseVirtualFolder.  # noqa: E501
        :type: int
        """

        self._last_quota_update = last_quota_update

    @property
    def users(self):
        """Gets the users of this BaseVirtualFolder.  # noqa: E501

        list of usernames associated with this virtual folder  # noqa: E501

        :return: The users of this BaseVirtualFolder.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this BaseVirtualFolder.

        list of usernames associated with this virtual folder  # noqa: E501

        :param users: The users of this BaseVirtualFolder.  # noqa: E501
        :type: list[str]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseVirtualFolder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseVirtualFolder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
