# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SFTPFsConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'endpoint': 'str',
        'username': 'str',
        'password': 'Secret',
        'private_key': 'Secret',
        'fingerprints': 'list[str]',
        'prefix': 'str'
    }

    attribute_map = {
        'endpoint': 'endpoint',
        'username': 'username',
        'password': 'password',
        'private_key': 'private_key',
        'fingerprints': 'fingerprints',
        'prefix': 'prefix'
    }

    def __init__(self, endpoint=None, username=None, password=None, private_key=None, fingerprints=None, prefix=None):  # noqa: E501
        """SFTPFsConfig - a model defined in Swagger"""  # noqa: E501
        self._endpoint = None
        self._username = None
        self._password = None
        self._private_key = None
        self._fingerprints = None
        self._prefix = None
        self.discriminator = None
        if endpoint is not None:
            self.endpoint = endpoint
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if private_key is not None:
            self.private_key = private_key
        if fingerprints is not None:
            self.fingerprints = fingerprints
        if prefix is not None:
            self.prefix = prefix

    @property
    def endpoint(self):
        """Gets the endpoint of this SFTPFsConfig.  # noqa: E501

        remote SFTP endpoint as host:port  # noqa: E501

        :return: The endpoint of this SFTPFsConfig.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this SFTPFsConfig.

        remote SFTP endpoint as host:port  # noqa: E501

        :param endpoint: The endpoint of this SFTPFsConfig.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def username(self):
        """Gets the username of this SFTPFsConfig.  # noqa: E501

        you can specify a password or private key or both. In the latter case the private key will be tried first.  # noqa: E501

        :return: The username of this SFTPFsConfig.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SFTPFsConfig.

        you can specify a password or private key or both. In the latter case the private key will be tried first.  # noqa: E501

        :param username: The username of this SFTPFsConfig.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this SFTPFsConfig.  # noqa: E501


        :return: The password of this SFTPFsConfig.  # noqa: E501
        :rtype: Secret
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SFTPFsConfig.


        :param password: The password of this SFTPFsConfig.  # noqa: E501
        :type: Secret
        """

        self._password = password

    @property
    def private_key(self):
        """Gets the private_key of this SFTPFsConfig.  # noqa: E501


        :return: The private_key of this SFTPFsConfig.  # noqa: E501
        :rtype: Secret
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this SFTPFsConfig.


        :param private_key: The private_key of this SFTPFsConfig.  # noqa: E501
        :type: Secret
        """

        self._private_key = private_key

    @property
    def fingerprints(self):
        """Gets the fingerprints of this SFTPFsConfig.  # noqa: E501

        SHA256 fingerprints to use for host key verification. If you don't provide any fingerprint the remote host key will not be verified, this is a security risk  # noqa: E501

        :return: The fingerprints of this SFTPFsConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._fingerprints

    @fingerprints.setter
    def fingerprints(self, fingerprints):
        """Sets the fingerprints of this SFTPFsConfig.

        SHA256 fingerprints to use for host key verification. If you don't provide any fingerprint the remote host key will not be verified, this is a security risk  # noqa: E501

        :param fingerprints: The fingerprints of this SFTPFsConfig.  # noqa: E501
        :type: list[str]
        """

        self._fingerprints = fingerprints

    @property
    def prefix(self):
        """Gets the prefix of this SFTPFsConfig.  # noqa: E501

        Specifying a prefix you can restrict all operations to a given path within the remote SFTP server.  # noqa: E501

        :return: The prefix of this SFTPFsConfig.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this SFTPFsConfig.

        Specifying a prefix you can restrict all operations to a given path within the remote SFTP server.  # noqa: E501

        :param prefix: The prefix of this SFTPFsConfig.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SFTPFsConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SFTPFsConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
