# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FTPDBinding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'port': 'int',
        'apply_proxy_config': 'bool',
        'tls_mode': 'int',
        'force_passive_ip': 'str',
        'client_auth_type': 'int'
    }

    attribute_map = {
        'address': 'address',
        'port': 'port',
        'apply_proxy_config': 'apply_proxy_config',
        'tls_mode': 'tls_mode',
        'force_passive_ip': 'force_passive_ip',
        'client_auth_type': 'client_auth_type'
    }

    def __init__(self, address=None, port=None, apply_proxy_config=None, tls_mode=None, force_passive_ip=None, client_auth_type=None):  # noqa: E501
        """FTPDBinding - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._port = None
        self._apply_proxy_config = None
        self._tls_mode = None
        self._force_passive_ip = None
        self._client_auth_type = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if port is not None:
            self.port = port
        if apply_proxy_config is not None:
            self.apply_proxy_config = apply_proxy_config
        if tls_mode is not None:
            self.tls_mode = tls_mode
        if force_passive_ip is not None:
            self.force_passive_ip = force_passive_ip
        if client_auth_type is not None:
            self.client_auth_type = client_auth_type

    @property
    def address(self):
        """Gets the address of this FTPDBinding.  # noqa: E501

        TCP address the server listen on  # noqa: E501

        :return: The address of this FTPDBinding.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this FTPDBinding.

        TCP address the server listen on  # noqa: E501

        :param address: The address of this FTPDBinding.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def port(self):
        """Gets the port of this FTPDBinding.  # noqa: E501

        the port used for serving requests  # noqa: E501

        :return: The port of this FTPDBinding.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this FTPDBinding.

        the port used for serving requests  # noqa: E501

        :param port: The port of this FTPDBinding.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def apply_proxy_config(self):
        """Gets the apply_proxy_config of this FTPDBinding.  # noqa: E501

        apply the proxy configuration, if any  # noqa: E501

        :return: The apply_proxy_config of this FTPDBinding.  # noqa: E501
        :rtype: bool
        """
        return self._apply_proxy_config

    @apply_proxy_config.setter
    def apply_proxy_config(self, apply_proxy_config):
        """Sets the apply_proxy_config of this FTPDBinding.

        apply the proxy configuration, if any  # noqa: E501

        :param apply_proxy_config: The apply_proxy_config of this FTPDBinding.  # noqa: E501
        :type: bool
        """

        self._apply_proxy_config = apply_proxy_config

    @property
    def tls_mode(self):
        """Gets the tls_mode of this FTPDBinding.  # noqa: E501

        * `0` - clear or explicit TLS * `1` - explicit TLS required * `2` - implicit TLS   # noqa: E501

        :return: The tls_mode of this FTPDBinding.  # noqa: E501
        :rtype: int
        """
        return self._tls_mode

    @tls_mode.setter
    def tls_mode(self, tls_mode):
        """Sets the tls_mode of this FTPDBinding.

        * `0` - clear or explicit TLS * `1` - explicit TLS required * `2` - implicit TLS   # noqa: E501

        :param tls_mode: The tls_mode of this FTPDBinding.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if tls_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `tls_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(tls_mode, allowed_values)
            )

        self._tls_mode = tls_mode

    @property
    def force_passive_ip(self):
        """Gets the force_passive_ip of this FTPDBinding.  # noqa: E501

        External IP address to expose for passive connections  # noqa: E501

        :return: The force_passive_ip of this FTPDBinding.  # noqa: E501
        :rtype: str
        """
        return self._force_passive_ip

    @force_passive_ip.setter
    def force_passive_ip(self, force_passive_ip):
        """Sets the force_passive_ip of this FTPDBinding.

        External IP address to expose for passive connections  # noqa: E501

        :param force_passive_ip: The force_passive_ip of this FTPDBinding.  # noqa: E501
        :type: str
        """

        self._force_passive_ip = force_passive_ip

    @property
    def client_auth_type(self):
        """Gets the client_auth_type of this FTPDBinding.  # noqa: E501

        1 means that client certificate authentication is required in addition to FTP authentication  # noqa: E501

        :return: The client_auth_type of this FTPDBinding.  # noqa: E501
        :rtype: int
        """
        return self._client_auth_type

    @client_auth_type.setter
    def client_auth_type(self, client_auth_type):
        """Sets the client_auth_type of this FTPDBinding.

        1 means that client certificate authentication is required in addition to FTP authentication  # noqa: E501

        :param client_auth_type: The client_auth_type of this FTPDBinding.  # noqa: E501
        :type: int
        """

        self._client_auth_type = client_auth_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FTPDBinding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FTPDBinding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
