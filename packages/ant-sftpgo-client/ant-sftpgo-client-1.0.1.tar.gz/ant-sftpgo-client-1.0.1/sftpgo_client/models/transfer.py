# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Transfer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation_type': 'str',
        'path': 'str',
        'start_time': 'int',
        'size': 'int'
    }

    attribute_map = {
        'operation_type': 'operation_type',
        'path': 'path',
        'start_time': 'start_time',
        'size': 'size'
    }

    def __init__(self, operation_type=None, path=None, start_time=None, size=None):  # noqa: E501
        """Transfer - a model defined in Swagger"""  # noqa: E501
        self._operation_type = None
        self._path = None
        self._start_time = None
        self._size = None
        self.discriminator = None
        if operation_type is not None:
            self.operation_type = operation_type
        if path is not None:
            self.path = path
        if start_time is not None:
            self.start_time = start_time
        if size is not None:
            self.size = size

    @property
    def operation_type(self):
        """Gets the operation_type of this Transfer.  # noqa: E501


        :return: The operation_type of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this Transfer.


        :param operation_type: The operation_type of this Transfer.  # noqa: E501
        :type: str
        """
        allowed_values = ["upload", "download"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def path(self):
        """Gets the path of this Transfer.  # noqa: E501

        file path for the upload/download  # noqa: E501

        :return: The path of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Transfer.

        file path for the upload/download  # noqa: E501

        :param path: The path of this Transfer.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def start_time(self):
        """Gets the start_time of this Transfer.  # noqa: E501

        start time as unix timestamp in milliseconds  # noqa: E501

        :return: The start_time of this Transfer.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Transfer.

        start time as unix timestamp in milliseconds  # noqa: E501

        :param start_time: The start_time of this Transfer.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def size(self):
        """Gets the size of this Transfer.  # noqa: E501

        bytes transferred  # noqa: E501

        :return: The size of this Transfer.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Transfer.

        bytes transferred  # noqa: E501

        :param size: The size of this Transfer.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transfer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
