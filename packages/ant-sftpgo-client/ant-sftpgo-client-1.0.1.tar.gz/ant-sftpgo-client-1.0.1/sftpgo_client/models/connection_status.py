# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConnectionStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'connection_id': 'str',
        'client_version': 'str',
        'remote_address': 'str',
        'connection_time': 'int',
        'command': 'str',
        'last_activity': 'int',
        'protocol': 'str',
        'active_transfers': 'list[Transfer]'
    }

    attribute_map = {
        'username': 'username',
        'connection_id': 'connection_id',
        'client_version': 'client_version',
        'remote_address': 'remote_address',
        'connection_time': 'connection_time',
        'command': 'command',
        'last_activity': 'last_activity',
        'protocol': 'protocol',
        'active_transfers': 'active_transfers'
    }

    def __init__(self, username=None, connection_id=None, client_version=None, remote_address=None, connection_time=None, command=None, last_activity=None, protocol=None, active_transfers=None):  # noqa: E501
        """ConnectionStatus - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._connection_id = None
        self._client_version = None
        self._remote_address = None
        self._connection_time = None
        self._command = None
        self._last_activity = None
        self._protocol = None
        self._active_transfers = None
        self.discriminator = None
        if username is not None:
            self.username = username
        if connection_id is not None:
            self.connection_id = connection_id
        if client_version is not None:
            self.client_version = client_version
        if remote_address is not None:
            self.remote_address = remote_address
        if connection_time is not None:
            self.connection_time = connection_time
        if command is not None:
            self.command = command
        if last_activity is not None:
            self.last_activity = last_activity
        if protocol is not None:
            self.protocol = protocol
        if active_transfers is not None:
            self.active_transfers = active_transfers

    @property
    def username(self):
        """Gets the username of this ConnectionStatus.  # noqa: E501

        connected username  # noqa: E501

        :return: The username of this ConnectionStatus.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConnectionStatus.

        connected username  # noqa: E501

        :param username: The username of this ConnectionStatus.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def connection_id(self):
        """Gets the connection_id of this ConnectionStatus.  # noqa: E501

        unique connection identifier  # noqa: E501

        :return: The connection_id of this ConnectionStatus.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this ConnectionStatus.

        unique connection identifier  # noqa: E501

        :param connection_id: The connection_id of this ConnectionStatus.  # noqa: E501
        :type: str
        """

        self._connection_id = connection_id

    @property
    def client_version(self):
        """Gets the client_version of this ConnectionStatus.  # noqa: E501

        client version  # noqa: E501

        :return: The client_version of this ConnectionStatus.  # noqa: E501
        :rtype: str
        """
        return self._client_version

    @client_version.setter
    def client_version(self, client_version):
        """Sets the client_version of this ConnectionStatus.

        client version  # noqa: E501

        :param client_version: The client_version of this ConnectionStatus.  # noqa: E501
        :type: str
        """

        self._client_version = client_version

    @property
    def remote_address(self):
        """Gets the remote_address of this ConnectionStatus.  # noqa: E501

        Remote address for the connected client  # noqa: E501

        :return: The remote_address of this ConnectionStatus.  # noqa: E501
        :rtype: str
        """
        return self._remote_address

    @remote_address.setter
    def remote_address(self, remote_address):
        """Sets the remote_address of this ConnectionStatus.

        Remote address for the connected client  # noqa: E501

        :param remote_address: The remote_address of this ConnectionStatus.  # noqa: E501
        :type: str
        """

        self._remote_address = remote_address

    @property
    def connection_time(self):
        """Gets the connection_time of this ConnectionStatus.  # noqa: E501

        connection time as unix timestamp in milliseconds  # noqa: E501

        :return: The connection_time of this ConnectionStatus.  # noqa: E501
        :rtype: int
        """
        return self._connection_time

    @connection_time.setter
    def connection_time(self, connection_time):
        """Sets the connection_time of this ConnectionStatus.

        connection time as unix timestamp in milliseconds  # noqa: E501

        :param connection_time: The connection_time of this ConnectionStatus.  # noqa: E501
        :type: int
        """

        self._connection_time = connection_time

    @property
    def command(self):
        """Gets the command of this ConnectionStatus.  # noqa: E501

        Last SSH/FTP command or WebDAV method  # noqa: E501

        :return: The command of this ConnectionStatus.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ConnectionStatus.

        Last SSH/FTP command or WebDAV method  # noqa: E501

        :param command: The command of this ConnectionStatus.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def last_activity(self):
        """Gets the last_activity of this ConnectionStatus.  # noqa: E501

        last client activity as unix timestamp in milliseconds  # noqa: E501

        :return: The last_activity of this ConnectionStatus.  # noqa: E501
        :rtype: int
        """
        return self._last_activity

    @last_activity.setter
    def last_activity(self, last_activity):
        """Sets the last_activity of this ConnectionStatus.

        last client activity as unix timestamp in milliseconds  # noqa: E501

        :param last_activity: The last_activity of this ConnectionStatus.  # noqa: E501
        :type: int
        """

        self._last_activity = last_activity

    @property
    def protocol(self):
        """Gets the protocol of this ConnectionStatus.  # noqa: E501


        :return: The protocol of this ConnectionStatus.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ConnectionStatus.


        :param protocol: The protocol of this ConnectionStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["SFTP", "SCP", "SSH", "FTP", "DAV"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def active_transfers(self):
        """Gets the active_transfers of this ConnectionStatus.  # noqa: E501


        :return: The active_transfers of this ConnectionStatus.  # noqa: E501
        :rtype: list[Transfer]
        """
        return self._active_transfers

    @active_transfers.setter
    def active_transfers(self, active_transfers):
        """Sets the active_transfers of this ConnectionStatus.


        :param active_transfers: The active_transfers of this ConnectionStatus.  # noqa: E501
        :type: list[Transfer]
        """

        self._active_transfers = active_transfers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectionStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
