# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VersionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'build_date': 'str',
        'commit_hash': 'str',
        'features': 'list[str]'
    }

    attribute_map = {
        'version': 'version',
        'build_date': 'build_date',
        'commit_hash': 'commit_hash',
        'features': 'features'
    }

    def __init__(self, version=None, build_date=None, commit_hash=None, features=None):  # noqa: E501
        """VersionInfo - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._build_date = None
        self._commit_hash = None
        self._features = None
        self.discriminator = None
        if version is not None:
            self.version = version
        if build_date is not None:
            self.build_date = build_date
        if commit_hash is not None:
            self.commit_hash = commit_hash
        if features is not None:
            self.features = features

    @property
    def version(self):
        """Gets the version of this VersionInfo.  # noqa: E501


        :return: The version of this VersionInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VersionInfo.


        :param version: The version of this VersionInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def build_date(self):
        """Gets the build_date of this VersionInfo.  # noqa: E501


        :return: The build_date of this VersionInfo.  # noqa: E501
        :rtype: str
        """
        return self._build_date

    @build_date.setter
    def build_date(self, build_date):
        """Sets the build_date of this VersionInfo.


        :param build_date: The build_date of this VersionInfo.  # noqa: E501
        :type: str
        """

        self._build_date = build_date

    @property
    def commit_hash(self):
        """Gets the commit_hash of this VersionInfo.  # noqa: E501


        :return: The commit_hash of this VersionInfo.  # noqa: E501
        :rtype: str
        """
        return self._commit_hash

    @commit_hash.setter
    def commit_hash(self, commit_hash):
        """Sets the commit_hash of this VersionInfo.


        :param commit_hash: The commit_hash of this VersionInfo.  # noqa: E501
        :type: str
        """

        self._commit_hash = commit_hash

    @property
    def features(self):
        """Gets the features of this VersionInfo.  # noqa: E501

        Features for the current build. Available features are \"portable\", \"bolt\", \"mysql\", \"sqlite\", \"pgsql\", \"s3\", \"gcs\", \"metrics\". If a feature is available it has a \"+\" prefix, otherwise a \"-\" prefix  # noqa: E501

        :return: The features of this VersionInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this VersionInfo.

        Features for the current build. Available features are \"portable\", \"bolt\", \"mysql\", \"sqlite\", \"pgsql\", \"s3\", \"gcs\", \"metrics\". If a feature is available it has a \"+\" prefix, otherwise a \"-\" prefix  # noqa: E501

        :param features: The features of this VersionInfo.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VersionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VersionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
