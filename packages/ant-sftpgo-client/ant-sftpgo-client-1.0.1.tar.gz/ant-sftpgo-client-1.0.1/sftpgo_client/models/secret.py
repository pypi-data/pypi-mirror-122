# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Secret(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'payload': 'str',
        'key': 'str',
        'additional_data': 'str',
        'mode': 'int'
    }

    attribute_map = {
        'status': 'status',
        'payload': 'payload',
        'key': 'key',
        'additional_data': 'additional_data',
        'mode': 'mode'
    }

    def __init__(self, status=None, payload=None, key=None, additional_data=None, mode=None):  # noqa: E501
        """Secret - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._payload = None
        self._key = None
        self._additional_data = None
        self._mode = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if payload is not None:
            self.payload = payload
        if key is not None:
            self.key = key
        if additional_data is not None:
            self.additional_data = additional_data
        if mode is not None:
            self.mode = mode

    @property
    def status(self):
        """Gets the status of this Secret.  # noqa: E501

        Set to \"Plain\" to add or update an existing secret, set to \"Redacted\" to preserve the existing value  # noqa: E501

        :return: The status of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Secret.

        Set to \"Plain\" to add or update an existing secret, set to \"Redacted\" to preserve the existing value  # noqa: E501

        :param status: The status of this Secret.  # noqa: E501
        :type: str
        """
        allowed_values = ["Plain", "AES-256-GCM", "Secretbox", "GCP", "AWS", "VaultTransit", "Redacted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def payload(self):
        """Gets the payload of this Secret.  # noqa: E501


        :return: The payload of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this Secret.


        :param payload: The payload of this Secret.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def key(self):
        """Gets the key of this Secret.  # noqa: E501


        :return: The key of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Secret.


        :param key: The key of this Secret.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def additional_data(self):
        """Gets the additional_data of this Secret.  # noqa: E501


        :return: The additional_data of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this Secret.


        :param additional_data: The additional_data of this Secret.  # noqa: E501
        :type: str
        """

        self._additional_data = additional_data

    @property
    def mode(self):
        """Gets the mode of this Secret.  # noqa: E501

        1 means encrypted using a master key  # noqa: E501

        :return: The mode of this Secret.  # noqa: E501
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Secret.

        1 means encrypted using a master key  # noqa: E501

        :param mode: The mode of this Secret.  # noqa: E501
        :type: int
        """

        self._mode = mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Secret, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Secret):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
