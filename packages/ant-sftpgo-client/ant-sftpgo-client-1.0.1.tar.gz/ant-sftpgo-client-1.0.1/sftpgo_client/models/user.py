# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'status': 'int',
        'username': 'str',
        'expiration_date': 'int',
        'password': 'str',
        'public_keys': 'list[str]',
        'home_dir': 'str',
        'virtual_folders': 'list[VirtualFolder]',
        'uid': 'int',
        'gid': 'int',
        'max_sessions': 'int',
        'quota_size': 'int',
        'quota_files': 'int',
        'permissions': 'list[DirPermissions]',
        'used_quota_size': 'int',
        'used_quota_files': 'int',
        'last_quota_update': 'int',
        'upload_bandwidth': 'int',
        'download_bandwidth': 'int',
        'last_login': 'int',
        'filters': 'UserFilters',
        'filesystem': 'FilesystemConfig',
        'additional_info': 'str'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'username': 'username',
        'expiration_date': 'expiration_date',
        'password': 'password',
        'public_keys': 'public_keys',
        'home_dir': 'home_dir',
        'virtual_folders': 'virtual_folders',
        'uid': 'uid',
        'gid': 'gid',
        'max_sessions': 'max_sessions',
        'quota_size': 'quota_size',
        'quota_files': 'quota_files',
        'permissions': 'permissions',
        'used_quota_size': 'used_quota_size',
        'used_quota_files': 'used_quota_files',
        'last_quota_update': 'last_quota_update',
        'upload_bandwidth': 'upload_bandwidth',
        'download_bandwidth': 'download_bandwidth',
        'last_login': 'last_login',
        'filters': 'filters',
        'filesystem': 'filesystem',
        'additional_info': 'additional_info'
    }

    def __init__(self, id=None, status=None, username=None, expiration_date=None, password=None, public_keys=None, home_dir=None, virtual_folders=None, uid=None, gid=None, max_sessions=None, quota_size=None, quota_files=None, permissions=None, used_quota_size=None, used_quota_files=None, last_quota_update=None, upload_bandwidth=None, download_bandwidth=None, last_login=None, filters=None, filesystem=None, additional_info=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._username = None
        self._expiration_date = None
        self._password = None
        self._public_keys = None
        self._home_dir = None
        self._virtual_folders = None
        self._uid = None
        self._gid = None
        self._max_sessions = None
        self._quota_size = None
        self._quota_files = None
        self._permissions = None
        self._used_quota_size = None
        self._used_quota_files = None
        self._last_quota_update = None
        self._upload_bandwidth = None
        self._download_bandwidth = None
        self._last_login = None
        self._filters = None
        self._filesystem = None
        self._additional_info = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if username is not None:
            self.username = username
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if password is not None:
            self.password = password
        if public_keys is not None:
            self.public_keys = public_keys
        if home_dir is not None:
            self.home_dir = home_dir
        if virtual_folders is not None:
            self.virtual_folders = virtual_folders
        if uid is not None:
            self.uid = uid
        if gid is not None:
            self.gid = gid
        if max_sessions is not None:
            self.max_sessions = max_sessions
        if quota_size is not None:
            self.quota_size = quota_size
        if quota_files is not None:
            self.quota_files = quota_files
        if permissions is not None:
            self.permissions = permissions
        if used_quota_size is not None:
            self.used_quota_size = used_quota_size
        if used_quota_files is not None:
            self.used_quota_files = used_quota_files
        if last_quota_update is not None:
            self.last_quota_update = last_quota_update
        if upload_bandwidth is not None:
            self.upload_bandwidth = upload_bandwidth
        if download_bandwidth is not None:
            self.download_bandwidth = download_bandwidth
        if last_login is not None:
            self.last_login = last_login
        if filters is not None:
            self.filters = filters
        if filesystem is not None:
            self.filesystem = filesystem
        if additional_info is not None:
            self.additional_info = additional_info

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this User.  # noqa: E501

        status:   * `0` user is disabled, login is not allowed   * `1` user is enabled   # noqa: E501

        :return: The status of this User.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.

        status:   * `0` user is disabled, login is not allowed   * `1` user is enabled   # noqa: E501

        :param status: The status of this User.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501

        username is unique  # noqa: E501

        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        username is unique  # noqa: E501

        :param username: The username of this User.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def expiration_date(self):
        """Gets the expiration_date of this User.  # noqa: E501

        expiration date as unix timestamp in milliseconds. An expired account cannot login. 0 means no expiration  # noqa: E501

        :return: The expiration_date of this User.  # noqa: E501
        :rtype: int
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this User.

        expiration date as unix timestamp in milliseconds. An expired account cannot login. 0 means no expiration  # noqa: E501

        :param expiration_date: The expiration_date of this User.  # noqa: E501
        :type: int
        """

        self._expiration_date = expiration_date

    @property
    def password(self):
        """Gets the password of this User.  # noqa: E501

        password or public key/SSH user certificate are mandatory. If the password has no known hashing algo prefix it will be stored using argon2id. You can send a password hashed as bcrypt or pbkdf2 and it will be stored as is. For security reasons this field is omitted when you search/get users  # noqa: E501

        :return: The password of this User.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.

        password or public key/SSH user certificate are mandatory. If the password has no known hashing algo prefix it will be stored using argon2id. You can send a password hashed as bcrypt or pbkdf2 and it will be stored as is. For security reasons this field is omitted when you search/get users  # noqa: E501

        :param password: The password of this User.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def public_keys(self):
        """Gets the public_keys of this User.  # noqa: E501

        a password or at least one public key/SSH user certificate are mandatory.  # noqa: E501

        :return: The public_keys of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._public_keys

    @public_keys.setter
    def public_keys(self, public_keys):
        """Sets the public_keys of this User.

        a password or at least one public key/SSH user certificate are mandatory.  # noqa: E501

        :param public_keys: The public_keys of this User.  # noqa: E501
        :type: list[str]
        """

        self._public_keys = public_keys

    @property
    def home_dir(self):
        """Gets the home_dir of this User.  # noqa: E501

        path to the user home directory. The user cannot upload or download files outside this directory. SFTPGo tries to automatically create this folder if missing. Must be an absolute path  # noqa: E501

        :return: The home_dir of this User.  # noqa: E501
        :rtype: str
        """
        return self._home_dir

    @home_dir.setter
    def home_dir(self, home_dir):
        """Sets the home_dir of this User.

        path to the user home directory. The user cannot upload or download files outside this directory. SFTPGo tries to automatically create this folder if missing. Must be an absolute path  # noqa: E501

        :param home_dir: The home_dir of this User.  # noqa: E501
        :type: str
        """

        self._home_dir = home_dir

    @property
    def virtual_folders(self):
        """Gets the virtual_folders of this User.  # noqa: E501

        mapping between virtual SFTPGo paths and filesystem paths outside the user home directory. Supported for local filesystem only. If one or more of the specified folders are not inside the dataprovider they will be automatically created. You have to create the folder on the filesystem yourself  # noqa: E501

        :return: The virtual_folders of this User.  # noqa: E501
        :rtype: list[VirtualFolder]
        """
        return self._virtual_folders

    @virtual_folders.setter
    def virtual_folders(self, virtual_folders):
        """Sets the virtual_folders of this User.

        mapping between virtual SFTPGo paths and filesystem paths outside the user home directory. Supported for local filesystem only. If one or more of the specified folders are not inside the dataprovider they will be automatically created. You have to create the folder on the filesystem yourself  # noqa: E501

        :param virtual_folders: The virtual_folders of this User.  # noqa: E501
        :type: list[VirtualFolder]
        """

        self._virtual_folders = virtual_folders

    @property
    def uid(self):
        """Gets the uid of this User.  # noqa: E501

        if you run SFTPGo as root user, the created files and directories will be assigned to this uid. 0 means no change, the owner will be the user that runs SFTPGo. Ignored on windows  # noqa: E501

        :return: The uid of this User.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this User.

        if you run SFTPGo as root user, the created files and directories will be assigned to this uid. 0 means no change, the owner will be the user that runs SFTPGo. Ignored on windows  # noqa: E501

        :param uid: The uid of this User.  # noqa: E501
        :type: int
        """

        self._uid = uid

    @property
    def gid(self):
        """Gets the gid of this User.  # noqa: E501

        if you run SFTPGo as root user, the created files and directories will be assigned to this gid. 0 means no change, the group will be the one of the user that runs SFTPGo. Ignored on windows  # noqa: E501

        :return: The gid of this User.  # noqa: E501
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this User.

        if you run SFTPGo as root user, the created files and directories will be assigned to this gid. 0 means no change, the group will be the one of the user that runs SFTPGo. Ignored on windows  # noqa: E501

        :param gid: The gid of this User.  # noqa: E501
        :type: int
        """

        self._gid = gid

    @property
    def max_sessions(self):
        """Gets the max_sessions of this User.  # noqa: E501

        Limit the sessions that a user can open. 0 means unlimited  # noqa: E501

        :return: The max_sessions of this User.  # noqa: E501
        :rtype: int
        """
        return self._max_sessions

    @max_sessions.setter
    def max_sessions(self, max_sessions):
        """Sets the max_sessions of this User.

        Limit the sessions that a user can open. 0 means unlimited  # noqa: E501

        :param max_sessions: The max_sessions of this User.  # noqa: E501
        :type: int
        """

        self._max_sessions = max_sessions

    @property
    def quota_size(self):
        """Gets the quota_size of this User.  # noqa: E501

        Quota as size in bytes. 0 menas unlimited. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed  # noqa: E501

        :return: The quota_size of this User.  # noqa: E501
        :rtype: int
        """
        return self._quota_size

    @quota_size.setter
    def quota_size(self, quota_size):
        """Sets the quota_size of this User.

        Quota as size in bytes. 0 menas unlimited. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed  # noqa: E501

        :param quota_size: The quota_size of this User.  # noqa: E501
        :type: int
        """

        self._quota_size = quota_size

    @property
    def quota_files(self):
        """Gets the quota_files of this User.  # noqa: E501

        Quota as number of files. 0 menas unlimited. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed  # noqa: E501

        :return: The quota_files of this User.  # noqa: E501
        :rtype: int
        """
        return self._quota_files

    @quota_files.setter
    def quota_files(self, quota_files):
        """Sets the quota_files of this User.

        Quota as number of files. 0 menas unlimited. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed  # noqa: E501

        :param quota_files: The quota_files of this User.  # noqa: E501
        :type: int
        """

        self._quota_files = quota_files

    @property
    def permissions(self):
        """Gets the permissions of this User.  # noqa: E501


        :return: The permissions of this User.  # noqa: E501
        :rtype: list[DirPermissions]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this User.


        :param permissions: The permissions of this User.  # noqa: E501
        :type: list[DirPermissions]
        """

        self._permissions = permissions

    @property
    def used_quota_size(self):
        """Gets the used_quota_size of this User.  # noqa: E501


        :return: The used_quota_size of this User.  # noqa: E501
        :rtype: int
        """
        return self._used_quota_size

    @used_quota_size.setter
    def used_quota_size(self, used_quota_size):
        """Sets the used_quota_size of this User.


        :param used_quota_size: The used_quota_size of this User.  # noqa: E501
        :type: int
        """

        self._used_quota_size = used_quota_size

    @property
    def used_quota_files(self):
        """Gets the used_quota_files of this User.  # noqa: E501


        :return: The used_quota_files of this User.  # noqa: E501
        :rtype: int
        """
        return self._used_quota_files

    @used_quota_files.setter
    def used_quota_files(self, used_quota_files):
        """Sets the used_quota_files of this User.


        :param used_quota_files: The used_quota_files of this User.  # noqa: E501
        :type: int
        """

        self._used_quota_files = used_quota_files

    @property
    def last_quota_update(self):
        """Gets the last_quota_update of this User.  # noqa: E501

        Last quota update as unix timestamp in milliseconds  # noqa: E501

        :return: The last_quota_update of this User.  # noqa: E501
        :rtype: int
        """
        return self._last_quota_update

    @last_quota_update.setter
    def last_quota_update(self, last_quota_update):
        """Sets the last_quota_update of this User.

        Last quota update as unix timestamp in milliseconds  # noqa: E501

        :param last_quota_update: The last_quota_update of this User.  # noqa: E501
        :type: int
        """

        self._last_quota_update = last_quota_update

    @property
    def upload_bandwidth(self):
        """Gets the upload_bandwidth of this User.  # noqa: E501

        Maximum upload bandwidth as KB/s, 0 means unlimited  # noqa: E501

        :return: The upload_bandwidth of this User.  # noqa: E501
        :rtype: int
        """
        return self._upload_bandwidth

    @upload_bandwidth.setter
    def upload_bandwidth(self, upload_bandwidth):
        """Sets the upload_bandwidth of this User.

        Maximum upload bandwidth as KB/s, 0 means unlimited  # noqa: E501

        :param upload_bandwidth: The upload_bandwidth of this User.  # noqa: E501
        :type: int
        """

        self._upload_bandwidth = upload_bandwidth

    @property
    def download_bandwidth(self):
        """Gets the download_bandwidth of this User.  # noqa: E501

        Maximum download bandwidth as KB/s, 0 means unlimited  # noqa: E501

        :return: The download_bandwidth of this User.  # noqa: E501
        :rtype: int
        """
        return self._download_bandwidth

    @download_bandwidth.setter
    def download_bandwidth(self, download_bandwidth):
        """Sets the download_bandwidth of this User.

        Maximum download bandwidth as KB/s, 0 means unlimited  # noqa: E501

        :param download_bandwidth: The download_bandwidth of this User.  # noqa: E501
        :type: int
        """

        self._download_bandwidth = download_bandwidth

    @property
    def last_login(self):
        """Gets the last_login of this User.  # noqa: E501

        Last user login as unix timestamp in milliseconds. It is saved at most once every 10 minutes  # noqa: E501

        :return: The last_login of this User.  # noqa: E501
        :rtype: int
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this User.

        Last user login as unix timestamp in milliseconds. It is saved at most once every 10 minutes  # noqa: E501

        :param last_login: The last_login of this User.  # noqa: E501
        :type: int
        """

        self._last_login = last_login

    @property
    def filters(self):
        """Gets the filters of this User.  # noqa: E501


        :return: The filters of this User.  # noqa: E501
        :rtype: UserFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this User.


        :param filters: The filters of this User.  # noqa: E501
        :type: UserFilters
        """

        self._filters = filters

    @property
    def filesystem(self):
        """Gets the filesystem of this User.  # noqa: E501


        :return: The filesystem of this User.  # noqa: E501
        :rtype: FilesystemConfig
        """
        return self._filesystem

    @filesystem.setter
    def filesystem(self, filesystem):
        """Sets the filesystem of this User.


        :param filesystem: The filesystem of this User.  # noqa: E501
        :type: FilesystemConfig
        """

        self._filesystem = filesystem

    @property
    def additional_info(self):
        """Gets the additional_info of this User.  # noqa: E501

        Free form text field for external systems  # noqa: E501

        :return: The additional_info of this User.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this User.

        Free form text field for external systems  # noqa: E501

        :param additional_info: The additional_info of this User.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
