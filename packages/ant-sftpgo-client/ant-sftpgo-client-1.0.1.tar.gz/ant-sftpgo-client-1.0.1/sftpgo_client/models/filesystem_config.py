# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilesystemConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider': 'int',
        's3config': 'S3Config',
        'gcsconfig': 'GCSConfig',
        'azblobconfig': 'AzureBlobFsConfig',
        'cryptconfig': 'CryptFsConfig',
        'sftpconfig': 'SFTPFsConfig'
    }

    attribute_map = {
        'provider': 'provider',
        's3config': 's3config',
        'gcsconfig': 'gcsconfig',
        'azblobconfig': 'azblobconfig',
        'cryptconfig': 'cryptconfig',
        'sftpconfig': 'sftpconfig'
    }

    def __init__(self, provider=None, s3config=None, gcsconfig=None, azblobconfig=None, cryptconfig=None, sftpconfig=None):  # noqa: E501
        """FilesystemConfig - a model defined in Swagger"""  # noqa: E501
        self._provider = None
        self._s3config = None
        self._gcsconfig = None
        self._azblobconfig = None
        self._cryptconfig = None
        self._sftpconfig = None
        self.discriminator = None
        if provider is not None:
            self.provider = provider
        if s3config is not None:
            self.s3config = s3config
        if gcsconfig is not None:
            self.gcsconfig = gcsconfig
        if azblobconfig is not None:
            self.azblobconfig = azblobconfig
        if cryptconfig is not None:
            self.cryptconfig = cryptconfig
        if sftpconfig is not None:
            self.sftpconfig = sftpconfig

    @property
    def provider(self):
        """Gets the provider of this FilesystemConfig.  # noqa: E501

        Providers:   * `0` - Local filesystem   * `1` - S3 Compatible Object Storage   * `2` - Google Cloud Storage   * `3` - Azure Blob Storage   * `4` - Local filesystem encrypted   * `5` - SFTP   # noqa: E501

        :return: The provider of this FilesystemConfig.  # noqa: E501
        :rtype: int
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this FilesystemConfig.

        Providers:   * `0` - Local filesystem   * `1` - S3 Compatible Object Storage   * `2` - Google Cloud Storage   * `3` - Azure Blob Storage   * `4` - Local filesystem encrypted   * `5` - SFTP   # noqa: E501

        :param provider: The provider of this FilesystemConfig.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def s3config(self):
        """Gets the s3config of this FilesystemConfig.  # noqa: E501


        :return: The s3config of this FilesystemConfig.  # noqa: E501
        :rtype: S3Config
        """
        return self._s3config

    @s3config.setter
    def s3config(self, s3config):
        """Sets the s3config of this FilesystemConfig.


        :param s3config: The s3config of this FilesystemConfig.  # noqa: E501
        :type: S3Config
        """

        self._s3config = s3config

    @property
    def gcsconfig(self):
        """Gets the gcsconfig of this FilesystemConfig.  # noqa: E501


        :return: The gcsconfig of this FilesystemConfig.  # noqa: E501
        :rtype: GCSConfig
        """
        return self._gcsconfig

    @gcsconfig.setter
    def gcsconfig(self, gcsconfig):
        """Sets the gcsconfig of this FilesystemConfig.


        :param gcsconfig: The gcsconfig of this FilesystemConfig.  # noqa: E501
        :type: GCSConfig
        """

        self._gcsconfig = gcsconfig

    @property
    def azblobconfig(self):
        """Gets the azblobconfig of this FilesystemConfig.  # noqa: E501


        :return: The azblobconfig of this FilesystemConfig.  # noqa: E501
        :rtype: AzureBlobFsConfig
        """
        return self._azblobconfig

    @azblobconfig.setter
    def azblobconfig(self, azblobconfig):
        """Sets the azblobconfig of this FilesystemConfig.


        :param azblobconfig: The azblobconfig of this FilesystemConfig.  # noqa: E501
        :type: AzureBlobFsConfig
        """

        self._azblobconfig = azblobconfig

    @property
    def cryptconfig(self):
        """Gets the cryptconfig of this FilesystemConfig.  # noqa: E501


        :return: The cryptconfig of this FilesystemConfig.  # noqa: E501
        :rtype: CryptFsConfig
        """
        return self._cryptconfig

    @cryptconfig.setter
    def cryptconfig(self, cryptconfig):
        """Sets the cryptconfig of this FilesystemConfig.


        :param cryptconfig: The cryptconfig of this FilesystemConfig.  # noqa: E501
        :type: CryptFsConfig
        """

        self._cryptconfig = cryptconfig

    @property
    def sftpconfig(self):
        """Gets the sftpconfig of this FilesystemConfig.  # noqa: E501


        :return: The sftpconfig of this FilesystemConfig.  # noqa: E501
        :rtype: SFTPFsConfig
        """
        return self._sftpconfig

    @sftpconfig.setter
    def sftpconfig(self, sftpconfig):
        """Sets the sftpconfig of this FilesystemConfig.


        :param sftpconfig: The sftpconfig of this FilesystemConfig.  # noqa: E501
        :type: SFTPFsConfig
        """

        self._sftpconfig = sftpconfig

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilesystemConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilesystemConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
