# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExtensionsFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'allowed_extensions': 'list[str]',
        'denied_extensions': 'list[str]'
    }

    attribute_map = {
        'path': 'path',
        'allowed_extensions': 'allowed_extensions',
        'denied_extensions': 'denied_extensions'
    }

    def __init__(self, path=None, allowed_extensions=None, denied_extensions=None):  # noqa: E501
        """ExtensionsFilter - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._allowed_extensions = None
        self._denied_extensions = None
        self.discriminator = None
        if path is not None:
            self.path = path
        if allowed_extensions is not None:
            self.allowed_extensions = allowed_extensions
        if denied_extensions is not None:
            self.denied_extensions = denied_extensions

    @property
    def path(self):
        """Gets the path of this ExtensionsFilter.  # noqa: E501

        exposed virtual path, if no other specific filter is defined, the filter apply for sub directories too. For example if filters are defined for the paths \"/\" and \"/sub\" then the filters for \"/\" are applied for any file outside the \"/sub\" directory  # noqa: E501

        :return: The path of this ExtensionsFilter.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ExtensionsFilter.

        exposed virtual path, if no other specific filter is defined, the filter apply for sub directories too. For example if filters are defined for the paths \"/\" and \"/sub\" then the filters for \"/\" are applied for any file outside the \"/sub\" directory  # noqa: E501

        :param path: The path of this ExtensionsFilter.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def allowed_extensions(self):
        """Gets the allowed_extensions of this ExtensionsFilter.  # noqa: E501

        list of, case insensitive, allowed files extension. Shell like expansion is not supported so you have to specify `.jpg` and not `*.jpg`  # noqa: E501

        :return: The allowed_extensions of this ExtensionsFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_extensions

    @allowed_extensions.setter
    def allowed_extensions(self, allowed_extensions):
        """Sets the allowed_extensions of this ExtensionsFilter.

        list of, case insensitive, allowed files extension. Shell like expansion is not supported so you have to specify `.jpg` and not `*.jpg`  # noqa: E501

        :param allowed_extensions: The allowed_extensions of this ExtensionsFilter.  # noqa: E501
        :type: list[str]
        """

        self._allowed_extensions = allowed_extensions

    @property
    def denied_extensions(self):
        """Gets the denied_extensions of this ExtensionsFilter.  # noqa: E501

        list of, case insensitive, denied files extension. Denied file extensions are evaluated before the allowed ones  # noqa: E501

        :return: The denied_extensions of this ExtensionsFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._denied_extensions

    @denied_extensions.setter
    def denied_extensions(self, denied_extensions):
        """Sets the denied_extensions of this ExtensionsFilter.

        list of, case insensitive, denied files extension. Denied file extensions are evaluated before the allowed ones  # noqa: E501

        :param denied_extensions: The denied_extensions of this ExtensionsFilter.  # noqa: E501
        :type: list[str]
        """

        self._denied_extensions = denied_extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtensionsFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtensionsFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
