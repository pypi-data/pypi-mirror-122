# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PatternsFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'allowed_patterns': 'list[str]',
        'denied_patterns': 'list[str]'
    }

    attribute_map = {
        'path': 'path',
        'allowed_patterns': 'allowed_patterns',
        'denied_patterns': 'denied_patterns'
    }

    def __init__(self, path=None, allowed_patterns=None, denied_patterns=None):  # noqa: E501
        """PatternsFilter - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._allowed_patterns = None
        self._denied_patterns = None
        self.discriminator = None
        if path is not None:
            self.path = path
        if allowed_patterns is not None:
            self.allowed_patterns = allowed_patterns
        if denied_patterns is not None:
            self.denied_patterns = denied_patterns

    @property
    def path(self):
        """Gets the path of this PatternsFilter.  # noqa: E501

        exposed virtual path, if no other specific filter is defined, the filter apply for sub directories too. For example if filters are defined for the paths \"/\" and \"/sub\" then the filters for \"/\" are applied for any file outside the \"/sub\" directory  # noqa: E501

        :return: The path of this PatternsFilter.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PatternsFilter.

        exposed virtual path, if no other specific filter is defined, the filter apply for sub directories too. For example if filters are defined for the paths \"/\" and \"/sub\" then the filters for \"/\" are applied for any file outside the \"/sub\" directory  # noqa: E501

        :param path: The path of this PatternsFilter.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def allowed_patterns(self):
        """Gets the allowed_patterns of this PatternsFilter.  # noqa: E501

        list of, case insensitive, allowed shell like file patterns.  # noqa: E501

        :return: The allowed_patterns of this PatternsFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_patterns

    @allowed_patterns.setter
    def allowed_patterns(self, allowed_patterns):
        """Sets the allowed_patterns of this PatternsFilter.

        list of, case insensitive, allowed shell like file patterns.  # noqa: E501

        :param allowed_patterns: The allowed_patterns of this PatternsFilter.  # noqa: E501
        :type: list[str]
        """

        self._allowed_patterns = allowed_patterns

    @property
    def denied_patterns(self):
        """Gets the denied_patterns of this PatternsFilter.  # noqa: E501

        list of, case insensitive, denied shell like file patterns. Denied patterns are evaluated before the allowed ones  # noqa: E501

        :return: The denied_patterns of this PatternsFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._denied_patterns

    @denied_patterns.setter
    def denied_patterns(self, denied_patterns):
        """Sets the denied_patterns of this PatternsFilter.

        list of, case insensitive, denied shell like file patterns. Denied patterns are evaluated before the allowed ones  # noqa: E501

        :param denied_patterns: The denied_patterns of this PatternsFilter.  # noqa: E501
        :type: list[str]
        """

        self._denied_patterns = denied_patterns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PatternsFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatternsFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
