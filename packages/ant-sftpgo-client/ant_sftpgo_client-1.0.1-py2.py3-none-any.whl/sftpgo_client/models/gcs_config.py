# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GCSConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket': 'str',
        'credentials': 'Secret',
        'automatic_credentials': 'int',
        'storage_class': 'str',
        'key_prefix': 'str'
    }

    attribute_map = {
        'bucket': 'bucket',
        'credentials': 'credentials',
        'automatic_credentials': 'automatic_credentials',
        'storage_class': 'storage_class',
        'key_prefix': 'key_prefix'
    }

    def __init__(self, bucket=None, credentials=None, automatic_credentials=None, storage_class=None, key_prefix=None):  # noqa: E501
        """GCSConfig - a model defined in Swagger"""  # noqa: E501
        self._bucket = None
        self._credentials = None
        self._automatic_credentials = None
        self._storage_class = None
        self._key_prefix = None
        self.discriminator = None
        if bucket is not None:
            self.bucket = bucket
        if credentials is not None:
            self.credentials = credentials
        if automatic_credentials is not None:
            self.automatic_credentials = automatic_credentials
        if storage_class is not None:
            self.storage_class = storage_class
        if key_prefix is not None:
            self.key_prefix = key_prefix

    @property
    def bucket(self):
        """Gets the bucket of this GCSConfig.  # noqa: E501


        :return: The bucket of this GCSConfig.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this GCSConfig.


        :param bucket: The bucket of this GCSConfig.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def credentials(self):
        """Gets the credentials of this GCSConfig.  # noqa: E501


        :return: The credentials of this GCSConfig.  # noqa: E501
        :rtype: Secret
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this GCSConfig.


        :param credentials: The credentials of this GCSConfig.  # noqa: E501
        :type: Secret
        """

        self._credentials = credentials

    @property
    def automatic_credentials(self):
        """Gets the automatic_credentials of this GCSConfig.  # noqa: E501

        Automatic credentials:   * `0` - disabled, explicit credentials, using a JSON credentials file, must be provided. This is the default value if the field is null   * `1` - enabled, we try to use the Application Default Credentials (ADC) strategy to find your application's credentials   # noqa: E501

        :return: The automatic_credentials of this GCSConfig.  # noqa: E501
        :rtype: int
        """
        return self._automatic_credentials

    @automatic_credentials.setter
    def automatic_credentials(self, automatic_credentials):
        """Sets the automatic_credentials of this GCSConfig.

        Automatic credentials:   * `0` - disabled, explicit credentials, using a JSON credentials file, must be provided. This is the default value if the field is null   * `1` - enabled, we try to use the Application Default Credentials (ADC) strategy to find your application's credentials   # noqa: E501

        :param automatic_credentials: The automatic_credentials of this GCSConfig.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if automatic_credentials not in allowed_values:
            raise ValueError(
                "Invalid value for `automatic_credentials` ({0}), must be one of {1}"  # noqa: E501
                .format(automatic_credentials, allowed_values)
            )

        self._automatic_credentials = automatic_credentials

    @property
    def storage_class(self):
        """Gets the storage_class of this GCSConfig.  # noqa: E501


        :return: The storage_class of this GCSConfig.  # noqa: E501
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this GCSConfig.


        :param storage_class: The storage_class of this GCSConfig.  # noqa: E501
        :type: str
        """

        self._storage_class = storage_class

    @property
    def key_prefix(self):
        """Gets the key_prefix of this GCSConfig.  # noqa: E501

        key_prefix is similar to a chroot directory for a local filesystem. If specified the user will only see contents that starts with this prefix and so you can restrict access to a specific virtual folder. The prefix, if not empty, must not start with \"/\" and must end with \"/\". If empty the whole bucket contents will be available  # noqa: E501

        :return: The key_prefix of this GCSConfig.  # noqa: E501
        :rtype: str
        """
        return self._key_prefix

    @key_prefix.setter
    def key_prefix(self, key_prefix):
        """Sets the key_prefix of this GCSConfig.

        key_prefix is similar to a chroot directory for a local filesystem. If specified the user will only see contents that starts with this prefix and so you can restrict access to a specific virtual folder. The prefix, if not empty, must not start with \"/\" and must end with \"/\". If empty the whole bucket contents will be available  # noqa: E501

        :param key_prefix: The key_prefix of this GCSConfig.  # noqa: E501
        :type: str
        """

        self._key_prefix = key_prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GCSConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GCSConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
