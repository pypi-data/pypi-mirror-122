# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServicesStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ssh': 'SSHServiceStatus',
        'ftp': 'FTPServiceStatus',
        'webdav': 'WebDAVServiceStatus',
        'data_provider': 'DataProviderStatus',
        'defender': 'ServicesStatusDefender'
    }

    attribute_map = {
        'ssh': 'ssh',
        'ftp': 'ftp',
        'webdav': 'webdav',
        'data_provider': 'data_provider',
        'defender': 'defender'
    }

    def __init__(self, ssh=None, ftp=None, webdav=None, data_provider=None, defender=None):  # noqa: E501
        """ServicesStatus - a model defined in Swagger"""  # noqa: E501
        self._ssh = None
        self._ftp = None
        self._webdav = None
        self._data_provider = None
        self._defender = None
        self.discriminator = None
        if ssh is not None:
            self.ssh = ssh
        if ftp is not None:
            self.ftp = ftp
        if webdav is not None:
            self.webdav = webdav
        if data_provider is not None:
            self.data_provider = data_provider
        if defender is not None:
            self.defender = defender

    @property
    def ssh(self):
        """Gets the ssh of this ServicesStatus.  # noqa: E501


        :return: The ssh of this ServicesStatus.  # noqa: E501
        :rtype: SSHServiceStatus
        """
        return self._ssh

    @ssh.setter
    def ssh(self, ssh):
        """Sets the ssh of this ServicesStatus.


        :param ssh: The ssh of this ServicesStatus.  # noqa: E501
        :type: SSHServiceStatus
        """

        self._ssh = ssh

    @property
    def ftp(self):
        """Gets the ftp of this ServicesStatus.  # noqa: E501


        :return: The ftp of this ServicesStatus.  # noqa: E501
        :rtype: FTPServiceStatus
        """
        return self._ftp

    @ftp.setter
    def ftp(self, ftp):
        """Sets the ftp of this ServicesStatus.


        :param ftp: The ftp of this ServicesStatus.  # noqa: E501
        :type: FTPServiceStatus
        """

        self._ftp = ftp

    @property
    def webdav(self):
        """Gets the webdav of this ServicesStatus.  # noqa: E501


        :return: The webdav of this ServicesStatus.  # noqa: E501
        :rtype: WebDAVServiceStatus
        """
        return self._webdav

    @webdav.setter
    def webdav(self, webdav):
        """Sets the webdav of this ServicesStatus.


        :param webdav: The webdav of this ServicesStatus.  # noqa: E501
        :type: WebDAVServiceStatus
        """

        self._webdav = webdav

    @property
    def data_provider(self):
        """Gets the data_provider of this ServicesStatus.  # noqa: E501


        :return: The data_provider of this ServicesStatus.  # noqa: E501
        :rtype: DataProviderStatus
        """
        return self._data_provider

    @data_provider.setter
    def data_provider(self, data_provider):
        """Sets the data_provider of this ServicesStatus.


        :param data_provider: The data_provider of this ServicesStatus.  # noqa: E501
        :type: DataProviderStatus
        """

        self._data_provider = data_provider

    @property
    def defender(self):
        """Gets the defender of this ServicesStatus.  # noqa: E501


        :return: The defender of this ServicesStatus.  # noqa: E501
        :rtype: ServicesStatusDefender
        """
        return self._defender

    @defender.setter
    def defender(self, defender):
        """Sets the defender of this ServicesStatus.


        :param defender: The defender of this ServicesStatus.  # noqa: E501
        :type: ServicesStatusDefender
        """

        self._defender = defender

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServicesStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicesStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
