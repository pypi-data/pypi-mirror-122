# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from sftpgo_client.models.base_virtual_folder import BaseVirtualFolder  # noqa: F401,E501

class VirtualFolder(BaseVirtualFolder):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'virtual_path': 'str',
        'quota_size': 'int',
        'quota_files': 'int'
    }
    if hasattr(BaseVirtualFolder, "swagger_types"):
        swagger_types.update(BaseVirtualFolder.swagger_types)

    attribute_map = {
        'virtual_path': 'virtual_path',
        'quota_size': 'quota_size',
        'quota_files': 'quota_files'
    }
    if hasattr(BaseVirtualFolder, "attribute_map"):
        attribute_map.update(BaseVirtualFolder.attribute_map)

    def __init__(self, virtual_path=None, quota_size=None, quota_files=None, *args, **kwargs):  # noqa: E501
        """VirtualFolder - a model defined in Swagger"""  # noqa: E501
        self._virtual_path = None
        self._quota_size = None
        self._quota_files = None
        self.discriminator = None
        self.virtual_path = virtual_path
        if quota_size is not None:
            self.quota_size = quota_size
        if quota_files is not None:
            self.quota_files = quota_files
        BaseVirtualFolder.__init__(self, *args, **kwargs)

    @property
    def virtual_path(self):
        """Gets the virtual_path of this VirtualFolder.  # noqa: E501


        :return: The virtual_path of this VirtualFolder.  # noqa: E501
        :rtype: str
        """
        return self._virtual_path

    @virtual_path.setter
    def virtual_path(self, virtual_path):
        """Sets the virtual_path of this VirtualFolder.


        :param virtual_path: The virtual_path of this VirtualFolder.  # noqa: E501
        :type: str
        """
        if virtual_path is None:
            raise ValueError("Invalid value for `virtual_path`, must not be `None`")  # noqa: E501

        self._virtual_path = virtual_path

    @property
    def quota_size(self):
        """Gets the quota_size of this VirtualFolder.  # noqa: E501

        Quota as size in bytes. 0 menas unlimited, -1 means included in user quota. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed  # noqa: E501

        :return: The quota_size of this VirtualFolder.  # noqa: E501
        :rtype: int
        """
        return self._quota_size

    @quota_size.setter
    def quota_size(self, quota_size):
        """Sets the quota_size of this VirtualFolder.

        Quota as size in bytes. 0 menas unlimited, -1 means included in user quota. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed  # noqa: E501

        :param quota_size: The quota_size of this VirtualFolder.  # noqa: E501
        :type: int
        """

        self._quota_size = quota_size

    @property
    def quota_files(self):
        """Gets the quota_files of this VirtualFolder.  # noqa: E501

        Quota as number of files. 0 menas unlimited, , -1 means included in user quota. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed  # noqa: E501

        :return: The quota_files of this VirtualFolder.  # noqa: E501
        :rtype: int
        """
        return self._quota_files

    @quota_files.setter
    def quota_files(self, quota_files):
        """Sets the quota_files of this VirtualFolder.

        Quota as number of files. 0 menas unlimited, , -1 means included in user quota. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed  # noqa: E501

        :param quota_files: The quota_files of this VirtualFolder.  # noqa: E501
        :type: int
        """

        self._quota_files = quota_files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualFolder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualFolder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
