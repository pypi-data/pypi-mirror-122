# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SSHServiceStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_active': 'bool',
        'bindings': 'list[SSHBinding]',
        'host_keys': 'list[SSHHostKey]',
        'ssh_commands': 'list[str]'
    }

    attribute_map = {
        'is_active': 'is_active',
        'bindings': 'bindings',
        'host_keys': 'host_keys',
        'ssh_commands': 'ssh_commands'
    }

    def __init__(self, is_active=None, bindings=None, host_keys=None, ssh_commands=None):  # noqa: E501
        """SSHServiceStatus - a model defined in Swagger"""  # noqa: E501
        self._is_active = None
        self._bindings = None
        self._host_keys = None
        self._ssh_commands = None
        self.discriminator = None
        if is_active is not None:
            self.is_active = is_active
        if bindings is not None:
            self.bindings = bindings
        if host_keys is not None:
            self.host_keys = host_keys
        if ssh_commands is not None:
            self.ssh_commands = ssh_commands

    @property
    def is_active(self):
        """Gets the is_active of this SSHServiceStatus.  # noqa: E501


        :return: The is_active of this SSHServiceStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SSHServiceStatus.


        :param is_active: The is_active of this SSHServiceStatus.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def bindings(self):
        """Gets the bindings of this SSHServiceStatus.  # noqa: E501


        :return: The bindings of this SSHServiceStatus.  # noqa: E501
        :rtype: list[SSHBinding]
        """
        return self._bindings

    @bindings.setter
    def bindings(self, bindings):
        """Sets the bindings of this SSHServiceStatus.


        :param bindings: The bindings of this SSHServiceStatus.  # noqa: E501
        :type: list[SSHBinding]
        """

        self._bindings = bindings

    @property
    def host_keys(self):
        """Gets the host_keys of this SSHServiceStatus.  # noqa: E501


        :return: The host_keys of this SSHServiceStatus.  # noqa: E501
        :rtype: list[SSHHostKey]
        """
        return self._host_keys

    @host_keys.setter
    def host_keys(self, host_keys):
        """Sets the host_keys of this SSHServiceStatus.


        :param host_keys: The host_keys of this SSHServiceStatus.  # noqa: E501
        :type: list[SSHHostKey]
        """

        self._host_keys = host_keys

    @property
    def ssh_commands(self):
        """Gets the ssh_commands of this SSHServiceStatus.  # noqa: E501


        :return: The ssh_commands of this SSHServiceStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._ssh_commands

    @ssh_commands.setter
    def ssh_commands(self, ssh_commands):
        """Sets the ssh_commands of this SSHServiceStatus.


        :param ssh_commands: The ssh_commands of this SSHServiceStatus.  # noqa: E501
        :type: list[str]
        """

        self._ssh_commands = ssh_commands

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SSHServiceStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSHServiceStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
