# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_ip': 'list[str]',
        'denied_ip': 'list[str]',
        'denied_login_methods': 'list[LoginMethods]',
        'denied_protocols': 'list[SupportedProtocols]',
        'file_patterns': 'list[PatternsFilter]',
        'file_extensions': 'list[ExtensionsFilter]',
        'max_upload_file_size': 'int'
    }

    attribute_map = {
        'allowed_ip': 'allowed_ip',
        'denied_ip': 'denied_ip',
        'denied_login_methods': 'denied_login_methods',
        'denied_protocols': 'denied_protocols',
        'file_patterns': 'file_patterns',
        'file_extensions': 'file_extensions',
        'max_upload_file_size': 'max_upload_file_size'
    }

    def __init__(self, allowed_ip=None, denied_ip=None, denied_login_methods=None, denied_protocols=None, file_patterns=None, file_extensions=None, max_upload_file_size=None):  # noqa: E501
        """UserFilters - a model defined in Swagger"""  # noqa: E501
        self._allowed_ip = None
        self._denied_ip = None
        self._denied_login_methods = None
        self._denied_protocols = None
        self._file_patterns = None
        self._file_extensions = None
        self._max_upload_file_size = None
        self.discriminator = None
        if allowed_ip is not None:
            self.allowed_ip = allowed_ip
        if denied_ip is not None:
            self.denied_ip = denied_ip
        if denied_login_methods is not None:
            self.denied_login_methods = denied_login_methods
        if denied_protocols is not None:
            self.denied_protocols = denied_protocols
        if file_patterns is not None:
            self.file_patterns = file_patterns
        if file_extensions is not None:
            self.file_extensions = file_extensions
        if max_upload_file_size is not None:
            self.max_upload_file_size = max_upload_file_size

    @property
    def allowed_ip(self):
        """Gets the allowed_ip of this UserFilters.  # noqa: E501

        only clients connecting from these IP/Mask are allowed. IP/Mask must be in CIDR notation as defined in RFC 4632 and RFC 4291, for example \"192.0.2.0/24\" or \"2001:db8::/32\"  # noqa: E501

        :return: The allowed_ip of this UserFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_ip

    @allowed_ip.setter
    def allowed_ip(self, allowed_ip):
        """Sets the allowed_ip of this UserFilters.

        only clients connecting from these IP/Mask are allowed. IP/Mask must be in CIDR notation as defined in RFC 4632 and RFC 4291, for example \"192.0.2.0/24\" or \"2001:db8::/32\"  # noqa: E501

        :param allowed_ip: The allowed_ip of this UserFilters.  # noqa: E501
        :type: list[str]
        """

        self._allowed_ip = allowed_ip

    @property
    def denied_ip(self):
        """Gets the denied_ip of this UserFilters.  # noqa: E501

        clients connecting from these IP/Mask are not allowed. Denied rules are evaluated before allowed ones  # noqa: E501

        :return: The denied_ip of this UserFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._denied_ip

    @denied_ip.setter
    def denied_ip(self, denied_ip):
        """Sets the denied_ip of this UserFilters.

        clients connecting from these IP/Mask are not allowed. Denied rules are evaluated before allowed ones  # noqa: E501

        :param denied_ip: The denied_ip of this UserFilters.  # noqa: E501
        :type: list[str]
        """

        self._denied_ip = denied_ip

    @property
    def denied_login_methods(self):
        """Gets the denied_login_methods of this UserFilters.  # noqa: E501

        if null or empty any available login method is allowed  # noqa: E501

        :return: The denied_login_methods of this UserFilters.  # noqa: E501
        :rtype: list[LoginMethods]
        """
        return self._denied_login_methods

    @denied_login_methods.setter
    def denied_login_methods(self, denied_login_methods):
        """Sets the denied_login_methods of this UserFilters.

        if null or empty any available login method is allowed  # noqa: E501

        :param denied_login_methods: The denied_login_methods of this UserFilters.  # noqa: E501
        :type: list[LoginMethods]
        """

        self._denied_login_methods = denied_login_methods

    @property
    def denied_protocols(self):
        """Gets the denied_protocols of this UserFilters.  # noqa: E501

        if null or empty any available protocol is allowed  # noqa: E501

        :return: The denied_protocols of this UserFilters.  # noqa: E501
        :rtype: list[SupportedProtocols]
        """
        return self._denied_protocols

    @denied_protocols.setter
    def denied_protocols(self, denied_protocols):
        """Sets the denied_protocols of this UserFilters.

        if null or empty any available protocol is allowed  # noqa: E501

        :param denied_protocols: The denied_protocols of this UserFilters.  # noqa: E501
        :type: list[SupportedProtocols]
        """

        self._denied_protocols = denied_protocols

    @property
    def file_patterns(self):
        """Gets the file_patterns of this UserFilters.  # noqa: E501

        filters based on shell like file patterns. These restrictions do not apply to files listing for performance reasons, so a denied file cannot be downloaded/overwritten/renamed but it will still be in the list of files. Please note that these restrictions can be easily bypassed  # noqa: E501

        :return: The file_patterns of this UserFilters.  # noqa: E501
        :rtype: list[PatternsFilter]
        """
        return self._file_patterns

    @file_patterns.setter
    def file_patterns(self, file_patterns):
        """Sets the file_patterns of this UserFilters.

        filters based on shell like file patterns. These restrictions do not apply to files listing for performance reasons, so a denied file cannot be downloaded/overwritten/renamed but it will still be in the list of files. Please note that these restrictions can be easily bypassed  # noqa: E501

        :param file_patterns: The file_patterns of this UserFilters.  # noqa: E501
        :type: list[PatternsFilter]
        """

        self._file_patterns = file_patterns

    @property
    def file_extensions(self):
        """Gets the file_extensions of this UserFilters.  # noqa: E501

        filters based on shell like patterns. Deprecated, use file_patterns. These restrictions do not apply to files listing for performance reasons, so a denied file cannot be downloaded/overwritten/renamed but it will still be in the list of files. Please note that these restrictions can be easily bypassed  # noqa: E501

        :return: The file_extensions of this UserFilters.  # noqa: E501
        :rtype: list[ExtensionsFilter]
        """
        return self._file_extensions

    @file_extensions.setter
    def file_extensions(self, file_extensions):
        """Sets the file_extensions of this UserFilters.

        filters based on shell like patterns. Deprecated, use file_patterns. These restrictions do not apply to files listing for performance reasons, so a denied file cannot be downloaded/overwritten/renamed but it will still be in the list of files. Please note that these restrictions can be easily bypassed  # noqa: E501

        :param file_extensions: The file_extensions of this UserFilters.  # noqa: E501
        :type: list[ExtensionsFilter]
        """

        self._file_extensions = file_extensions

    @property
    def max_upload_file_size(self):
        """Gets the max_upload_file_size of this UserFilters.  # noqa: E501

        maximum allowed size, as bytes, for a single file upload. The upload will be aborted if/when the size of the file being sent exceeds this limit. 0 means unlimited. This restriction does not apply for SSH system commands such as `git` and `rsync`  # noqa: E501

        :return: The max_upload_file_size of this UserFilters.  # noqa: E501
        :rtype: int
        """
        return self._max_upload_file_size

    @max_upload_file_size.setter
    def max_upload_file_size(self, max_upload_file_size):
        """Sets the max_upload_file_size of this UserFilters.

        maximum allowed size, as bytes, for a single file upload. The upload will be aborted if/when the size of the file being sent exceeds this limit. 0 means unlimited. This restriction does not apply for SSH system commands such as `git` and `rsync`  # noqa: E501

        :param max_upload_file_size: The max_upload_file_size of this UserFilters.  # noqa: E501
        :type: int
        """

        self._max_upload_file_size = max_upload_file_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
