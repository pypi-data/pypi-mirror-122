# coding: utf-8

"""
    SFTPGo

    SFTPGo REST API  # noqa: E501

    OpenAPI spec version: 2.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AzureBlobFsConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'container': 'str',
        'account_name': 'str',
        'account_key': 'Secret',
        'sas_url': 'str',
        'endpoint': 'str',
        'upload_part_size': 'int',
        'upload_concurrency': 'int',
        'access_tier': 'str',
        'key_prefix': 'str',
        'use_emulator': 'bool'
    }

    attribute_map = {
        'container': 'container',
        'account_name': 'account_name',
        'account_key': 'account_key',
        'sas_url': 'sas_url',
        'endpoint': 'endpoint',
        'upload_part_size': 'upload_part_size',
        'upload_concurrency': 'upload_concurrency',
        'access_tier': 'access_tier',
        'key_prefix': 'key_prefix',
        'use_emulator': 'use_emulator'
    }

    def __init__(self, container=None, account_name=None, account_key=None, sas_url=None, endpoint=None, upload_part_size=None, upload_concurrency=None, access_tier=None, key_prefix=None, use_emulator=None):  # noqa: E501
        """AzureBlobFsConfig - a model defined in Swagger"""  # noqa: E501
        self._container = None
        self._account_name = None
        self._account_key = None
        self._sas_url = None
        self._endpoint = None
        self._upload_part_size = None
        self._upload_concurrency = None
        self._access_tier = None
        self._key_prefix = None
        self._use_emulator = None
        self.discriminator = None
        if container is not None:
            self.container = container
        if account_name is not None:
            self.account_name = account_name
        if account_key is not None:
            self.account_key = account_key
        if sas_url is not None:
            self.sas_url = sas_url
        if endpoint is not None:
            self.endpoint = endpoint
        if upload_part_size is not None:
            self.upload_part_size = upload_part_size
        if upload_concurrency is not None:
            self.upload_concurrency = upload_concurrency
        if access_tier is not None:
            self.access_tier = access_tier
        if key_prefix is not None:
            self.key_prefix = key_prefix
        if use_emulator is not None:
            self.use_emulator = use_emulator

    @property
    def container(self):
        """Gets the container of this AzureBlobFsConfig.  # noqa: E501


        :return: The container of this AzureBlobFsConfig.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this AzureBlobFsConfig.


        :param container: The container of this AzureBlobFsConfig.  # noqa: E501
        :type: str
        """

        self._container = container

    @property
    def account_name(self):
        """Gets the account_name of this AzureBlobFsConfig.  # noqa: E501

        Storage Account Name, leave blank to use SAS URL  # noqa: E501

        :return: The account_name of this AzureBlobFsConfig.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AzureBlobFsConfig.

        Storage Account Name, leave blank to use SAS URL  # noqa: E501

        :param account_name: The account_name of this AzureBlobFsConfig.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_key(self):
        """Gets the account_key of this AzureBlobFsConfig.  # noqa: E501


        :return: The account_key of this AzureBlobFsConfig.  # noqa: E501
        :rtype: Secret
        """
        return self._account_key

    @account_key.setter
    def account_key(self, account_key):
        """Sets the account_key of this AzureBlobFsConfig.


        :param account_key: The account_key of this AzureBlobFsConfig.  # noqa: E501
        :type: Secret
        """

        self._account_key = account_key

    @property
    def sas_url(self):
        """Gets the sas_url of this AzureBlobFsConfig.  # noqa: E501

        Shared access signature URL, leave blank if using account/key  # noqa: E501

        :return: The sas_url of this AzureBlobFsConfig.  # noqa: E501
        :rtype: str
        """
        return self._sas_url

    @sas_url.setter
    def sas_url(self, sas_url):
        """Sets the sas_url of this AzureBlobFsConfig.

        Shared access signature URL, leave blank if using account/key  # noqa: E501

        :param sas_url: The sas_url of this AzureBlobFsConfig.  # noqa: E501
        :type: str
        """

        self._sas_url = sas_url

    @property
    def endpoint(self):
        """Gets the endpoint of this AzureBlobFsConfig.  # noqa: E501

        optional endpoint. Default is \"blob.core.windows.net\". If you use the emulator the endpoint must include the protocol, for example \"http://127.0.0.1:10000\"  # noqa: E501

        :return: The endpoint of this AzureBlobFsConfig.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this AzureBlobFsConfig.

        optional endpoint. Default is \"blob.core.windows.net\". If you use the emulator the endpoint must include the protocol, for example \"http://127.0.0.1:10000\"  # noqa: E501

        :param endpoint: The endpoint of this AzureBlobFsConfig.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def upload_part_size(self):
        """Gets the upload_part_size of this AzureBlobFsConfig.  # noqa: E501

        the buffer size (in MB) to use for multipart uploads. If this value is set to zero, the default value (4MB) will be used.  # noqa: E501

        :return: The upload_part_size of this AzureBlobFsConfig.  # noqa: E501
        :rtype: int
        """
        return self._upload_part_size

    @upload_part_size.setter
    def upload_part_size(self, upload_part_size):
        """Sets the upload_part_size of this AzureBlobFsConfig.

        the buffer size (in MB) to use for multipart uploads. If this value is set to zero, the default value (4MB) will be used.  # noqa: E501

        :param upload_part_size: The upload_part_size of this AzureBlobFsConfig.  # noqa: E501
        :type: int
        """

        self._upload_part_size = upload_part_size

    @property
    def upload_concurrency(self):
        """Gets the upload_concurrency of this AzureBlobFsConfig.  # noqa: E501

        the number of parts to upload in parallel. If this value is set to zero, the default value (2) will be used  # noqa: E501

        :return: The upload_concurrency of this AzureBlobFsConfig.  # noqa: E501
        :rtype: int
        """
        return self._upload_concurrency

    @upload_concurrency.setter
    def upload_concurrency(self, upload_concurrency):
        """Sets the upload_concurrency of this AzureBlobFsConfig.

        the number of parts to upload in parallel. If this value is set to zero, the default value (2) will be used  # noqa: E501

        :param upload_concurrency: The upload_concurrency of this AzureBlobFsConfig.  # noqa: E501
        :type: int
        """

        self._upload_concurrency = upload_concurrency

    @property
    def access_tier(self):
        """Gets the access_tier of this AzureBlobFsConfig.  # noqa: E501


        :return: The access_tier of this AzureBlobFsConfig.  # noqa: E501
        :rtype: str
        """
        return self._access_tier

    @access_tier.setter
    def access_tier(self, access_tier):
        """Sets the access_tier of this AzureBlobFsConfig.


        :param access_tier: The access_tier of this AzureBlobFsConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["", "Archive", "Hot", "Cool"]  # noqa: E501
        if access_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `access_tier` ({0}), must be one of {1}"  # noqa: E501
                .format(access_tier, allowed_values)
            )

        self._access_tier = access_tier

    @property
    def key_prefix(self):
        """Gets the key_prefix of this AzureBlobFsConfig.  # noqa: E501

        key_prefix is similar to a chroot directory for a local filesystem. If specified the user will only see contents that starts with this prefix and so you can restrict access to a specific virtual folder. The prefix, if not empty, must not start with \"/\" and must end with \"/\". If empty the whole container contents will be available  # noqa: E501

        :return: The key_prefix of this AzureBlobFsConfig.  # noqa: E501
        :rtype: str
        """
        return self._key_prefix

    @key_prefix.setter
    def key_prefix(self, key_prefix):
        """Sets the key_prefix of this AzureBlobFsConfig.

        key_prefix is similar to a chroot directory for a local filesystem. If specified the user will only see contents that starts with this prefix and so you can restrict access to a specific virtual folder. The prefix, if not empty, must not start with \"/\" and must end with \"/\". If empty the whole container contents will be available  # noqa: E501

        :param key_prefix: The key_prefix of this AzureBlobFsConfig.  # noqa: E501
        :type: str
        """

        self._key_prefix = key_prefix

    @property
    def use_emulator(self):
        """Gets the use_emulator of this AzureBlobFsConfig.  # noqa: E501


        :return: The use_emulator of this AzureBlobFsConfig.  # noqa: E501
        :rtype: bool
        """
        return self._use_emulator

    @use_emulator.setter
    def use_emulator(self, use_emulator):
        """Sets the use_emulator of this AzureBlobFsConfig.


        :param use_emulator: The use_emulator of this AzureBlobFsConfig.  # noqa: E501
        :type: bool
        """

        self._use_emulator = use_emulator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AzureBlobFsConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AzureBlobFsConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
