{"version":3,"file":"f5c19328.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AA+GA;;AC1DA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAKA;;;AAKA;AAEA;;;AAKA;AAGA;;;AAoCA;;AAIA;AACA;;;;AAMA;;AA/CA;;;;AAKA;;;;AAAA;AAEA;;;;AAKA;AAGA;;;AAIA;;AAEA;;;;;;AA8BA;;;AAIA;;;AAKA;;;;;AAOA;;;AAGA;AAGA;;;;AAMA;;;AAGA;AAGA;;;;;AAOA;;AAGA;;;AAKA;;;;AAMA;;;AAGA;;;AAKA;;AAIA;AACA;;AAEA;;;;AAYA;;;AArMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/iron-icon/iron-icon.js","webpack://home-assistant-frontend/./src/panels/config/server_control/ha-config-server-control.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n/**\n\nThe `iron-icon` element displays an icon. By default an icon renders as a 24px\nsquare.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons. To use the default set of\nicons, import `iron-icons.js` and use the `icon` attribute to specify an icon:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/iron-icons.js\";\n    </script>\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific\n`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.\nFor example, to use a communication icon, you would use:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/communication-icons.js\";\n    </script>\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID\n`fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to\ncreate a custom iconset.\n\nSee the `iron-icons` demo to see the icons available in the various iconsets.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none\n\n@group Iron Elements\n@element iron-icon\n@demo demo/index.html\n@hero hero.svg\n@homepage polymer.github.io\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n`,\n\n  is: 'iron-icon',\n\n  properties: {\n\n    /**\n     * The name of the icon to use. The name should be of the form:\n     * `iconset_name:icon_name`.\n     */\n    icon: {type: String},\n\n    /**\n     * The name of the theme to used, if one is specified by the\n     * iconset.\n     */\n    theme: {type: String},\n\n    /**\n     * If using iron-icon without an iconset, you can set the src to be\n     * the URL of an individual icon image file. Note that this will take\n     * precedence over a given icon attribute.\n     */\n    src: {type: String},\n\n    /**\n     * @type {!IronMeta}\n     */\n    _meta: {value: Base.create('iron-meta', {type: 'iconset'})}\n\n  },\n\n  observers: [\n    '_updateIcon(_meta, isAttached)',\n    '_updateIcon(theme, isAttached)',\n    '_srcChanged(src, isAttached)',\n    '_iconChanged(icon, isAttached)'\n  ],\n\n  _DEFAULT_ICONSET: 'icons',\n\n  _iconChanged: function(icon) {\n    var parts = (icon || '').split(':');\n    this._iconName = parts.pop();\n    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;\n    this._updateIcon();\n  },\n\n  _srcChanged: function(src) {\n    this._updateIcon();\n  },\n\n  _usesIconset: function() {\n    return this.icon || !this.src;\n  },\n\n  /** @suppress {visibility} */\n  _updateIcon: function() {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        dom(this.root).removeChild(this._img);\n      }\n      if (this._iconName === '') {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = /** @type {?Polymer.Iconset} */ (\n            this._meta.byKey(this._iconsetName));\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n          this.unlisten(window, 'iron-iconset-added', '_updateIcon');\n        } else {\n          this.listen(window, 'iron-iconset-added', '_updateIcon');\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n      if (!this._img) {\n        this._img = document.createElement('img');\n        this._img.style.width = '100%';\n        this._img.style.height = '100%';\n        this._img.draggable = false;\n      }\n      this._img.src = this.src;\n      dom(this.root).appendChild(this._img);\n    }\n  }\n});\n","import \"@material/mwc-button\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { componentsWithService } from \"../../../common/config/components_with_service\";\nimport \"../../../components/buttons/ha-call-service-button\";\nimport \"../../../components/ha-card\";\nimport { checkCoreConfig } from \"../../../data/core\";\nimport { domainToName } from \"../../../data/integration\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\n\n@customElement(\"ha-config-server-control\")\nexport class HaConfigServerControl extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide!: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @property() public showAdvanced!: boolean;\n\n  @state() private _validating = false;\n\n  @state() private _reloadableDomains: string[] = [];\n\n  private _validateLog = \"\";\n\n  private _isValid: boolean | null = null;\n\n  protected updated(changedProperties) {\n    const oldHass = changedProperties.get(\"hass\");\n    if (\n      changedProperties.has(\"hass\") &&\n      (!oldHass || oldHass.config.components !== this.hass.config.components)\n    ) {\n      this._reloadableDomains = componentsWithService(\n        this.hass,\n        \"reload\"\n      ).sort();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        back-path=\"/config\"\n        .tabs=${configSections.general}\n        .showAdvanced=${this.showAdvanced}\n      >\n        <ha-config-section .isWide=${this.isWide}>\n          <span slot=\"header\"\n            >${this.hass.localize(\n              \"ui.panel.config.server_control.caption\"\n            )}</span\n          >\n          <span slot=\"introduction\"\n            >${this.hass.localize(\n              \"ui.panel.config.server_control.description\"\n            )}</span\n          >\n\n          ${this.showAdvanced\n            ? html` <ha-card\n                header=${this.hass.localize(\n                  \"ui.panel.config.server_control.section.validation.heading\"\n                )}\n              >\n                <div class=\"card-content\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.server_control.section.validation.introduction\"\n                  )}\n                  ${!this._validateLog\n                    ? html`\n                        <div\n                          class=\"validate-container layout vertical center-center\"\n                        >\n                          ${!this._validating\n                            ? html`\n                                ${this._isValid\n                                  ? html` <div\n                                      class=\"validate-result\"\n                                      id=\"result\"\n                                    >\n                                      ${this.hass.localize(\n                                        \"ui.panel.config.server_control.section.validation.valid\"\n                                      )}\n                                    </div>`\n                                  : \"\"}\n                                <mwc-button\n                                  raised\n                                  @click=${this._validateConfig}\n                                >\n                                  ${this.hass.localize(\n                                    \"ui.panel.config.server_control.section.validation.check_config\"\n                                  )}\n                                </mwc-button>\n                              `\n                            : html`\n                                <ha-circular-progress\n                                  active\n                                ></ha-circular-progress>\n                              `}\n                        </div>\n                      `\n                    : html`\n                        <div class=\"config-invalid\">\n                          <span class=\"text\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.server_control.section.validation.invalid\"\n                            )}\n                          </span>\n                          <mwc-button raised @click=${this._validateConfig}>\n                            ${this.hass.localize(\n                              \"ui.panel.config.server_control.section.validation.check_config\"\n                            )}\n                          </mwc-button>\n                        </div>\n                        <div id=\"configLog\" class=\"validate-log\">\n                          ${this._validateLog}\n                        </div>\n                      `}\n                </div>\n              </ha-card>`\n            : \"\"}\n\n          <ha-card\n            header=${this.hass.localize(\n              \"ui.panel.config.server_control.section.server_management.heading\"\n            )}\n          >\n            <div class=\"card-content\">\n              ${this.hass.localize(\n                \"ui.panel.config.server_control.section.server_management.introduction\"\n              )}\n            </div>\n            <div class=\"card-actions warning\">\n              <ha-call-service-button\n                class=\"warning\"\n                .hass=${this.hass}\n                domain=\"homeassistant\"\n                service=\"restart\"\n                .confirmation=${this.hass.localize(\n                  \"ui.panel.config.server_control.section.server_management.confirm_restart\"\n                )}\n                >${this.hass.localize(\n                  \"ui.panel.config.server_control.section.server_management.restart\"\n                )}\n              </ha-call-service-button>\n              <ha-call-service-button\n                class=\"warning\"\n                .hass=${this.hass}\n                domain=\"homeassistant\"\n                service=\"stop\"\n                confirmation=${this.hass.localize(\n                  \"ui.panel.config.server_control.section.server_management.confirm_stop\"\n                )}\n                >${this.hass.localize(\n                  \"ui.panel.config.server_control.section.server_management.stop\"\n                )}\n              </ha-call-service-button>\n            </div>\n          </ha-card>\n\n          ${this.showAdvanced\n            ? html`\n                <ha-card\n                  header=${this.hass.localize(\n                    \"ui.panel.config.server_control.section.reloading.heading\"\n                  )}\n                >\n                  <div class=\"card-content\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.server_control.section.reloading.introduction\"\n                    )}\n                  </div>\n                  <div class=\"card-actions\">\n                    <ha-call-service-button\n                      .hass=${this.hass}\n                      domain=\"homeassistant\"\n                      service=\"reload_core_config\"\n                      >${this.hass.localize(\n                        \"ui.panel.config.server_control.section.reloading.core\"\n                      )}\n                    </ha-call-service-button>\n                  </div>\n                  ${this._reloadableDomains.map(\n                    (domain) =>\n                      html`<div class=\"card-actions\">\n                        <ha-call-service-button\n                          .hass=${this.hass}\n                          .domain=${domain}\n                          service=\"reload\"\n                          >${this.hass.localize(\n                            `ui.panel.config.server_control.section.reloading.${domain}`\n                          ) ||\n                          this.hass.localize(\n                            \"ui.panel.config.server_control.section.reloading.reload\",\n                            \"domain\",\n                            domainToName(this.hass.localize, domain)\n                          )}\n                        </ha-call-service-button>\n                      </div>`\n                  )}\n                </ha-card>\n              `\n            : \"\"}\n        </ha-config-section>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private async _validateConfig() {\n    this._validating = true;\n    this._validateLog = \"\";\n    this._isValid = null;\n\n    const configCheck = await checkCoreConfig(this.hass);\n    this._validating = false;\n    this._isValid = configCheck.result === \"valid\";\n\n    if (configCheck.errors) {\n      this._validateLog = configCheck.errors;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .validate-container {\n          height: 140px;\n        }\n\n        .validate-result {\n          color: var(--success-color);\n          font-weight: 500;\n          margin-bottom: 1em;\n        }\n\n        .config-invalid {\n          margin: 1em 0;\n        }\n\n        .config-invalid .text {\n          color: var(--error-color);\n          font-weight: 500;\n        }\n\n        .config-invalid mwc-button {\n          float: right;\n        }\n\n        .validate-log {\n          white-space: pre-line;\n          direction: ltr;\n        }\n\n        ha-config-section {\n          padding-bottom: 24px;\n        }\n      `,\n    ];\n  }\n}\n"],"names":[],"sourceRoot":""}