{"version":3,"file":"309.bundle.js?v=5b2dfbf72b57b07d2ade","mappings":"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","sources":["webpack://WebComponents/./runestone/common/js/runestonebase.js","webpack://WebComponents/./runestone/fitb/js/fitb-i18n.en.js","webpack://WebComponents/./runestone/fitb/js/fitb-i18n.pt-br.js","webpack://WebComponents/./runestone/fitb/js/fitb.js","webpack://WebComponents/./runestone/fitb/js/timedfitb.js"],"sourcesContent":["/* ********************************\n * |docname| - Runestone Base Class\n * ********************************\n * All runestone components should inherit from RunestoneBase. In addition all runestone components should do the following things:\n *\n * 1.   Ensure that they are wrapped in a div with the class runestone\n * 2.   Write their source AND their generated html to the database if the database is configured\n * 3.   Properly save and restore their answers using the checkServer mechanism in this base class. Each component must provide an implementation of:\n *\n *      -    checkLocalStorage\n *      -    setLocalStorage\n *      -    restoreAnswers\n *      -    disableInteraction\n *\n * 4.   provide a Selenium based unit test\n */\n\nimport { pageProgressTracker } from \"./bookfuncs.js\";\n//import \"./../styles/runestone-custom-sphinx-bootstrap.css\";\n\nexport default class RunestoneBase {\n    constructor(opts) {\n        this.component_ready_promise = new Promise(resolve => this._component_ready_resolve_fn = resolve)\n        this.optional = false;\n        if (typeof window.allComponents === \"undefined\") {\n            window.allComponents = [];\n        }\n        window.allComponents.push(this);\n        if (opts) {\n            this.sid = opts.sid;\n            this.graderactive = opts.graderactive;\n            this.showfeedback = true;\n            if (opts.timed) {\n                this.isTimed = true;\n            }\n            if (opts.enforceDeadline) {\n                this.deadline = opts.deadline;\n            }\n            if ($(opts.orig).data(\"optional\")) {\n                this.optional = true;\n            } else {\n                this.optional = false;\n            }\n            if (opts.selector_id) {\n                this.selector_id = opts.selector_id;\n            }\n            if (typeof opts.assessmentTaken !== \"undefined\") {\n                this.assessmentTaken = opts.assessmentTaken;\n            } else {\n                // default to true as this opt is only provided from a timedAssessment\n                this.assessmentTaken = true;\n            }\n            // This is for the selectquestion points\n            // If a selectquestion is part of a timed exam it will get\n            // the timedWrapper options.\n            if (typeof opts.timedWrapper !== \"undefined\") {\n                this.timedWrapper = opts.timedWrapper;\n            } else {\n                // However sometimes selectquestions\n                // are used in regular assignments.  The hacky way to detect this\n                // is to look for doAssignment in the URL and then grab\n                // the assignment name from the heading.\n                if (location.href.indexOf(\"doAssignment\") >= 0) {\n                    this.timedWrapper = $(\"h1#assignment_name\").text()\n                } else {\n                    this.timedWrapper = null;\n                }\n            }\n            if ($(opts.orig).data(\"question_label\")) {\n                this.question_label = $(opts.orig).data(\"question_label\");\n            }\n        }\n        this.jsonHeaders = new Headers({\n            \"Content-type\": \"application/json; charset=utf-8\",\n            Accept: \"application/json\",\n        });\n    }\n\n    // .. _logBookEvent:\n    //\n    // logBookEvent\n    // ------------\n    // This function sends the provided ``eventInfo`` to the `hsblog endpoint` of the server. Awaiting this function returns either ``undefined`` (if Runestone services are not available) or the data returned by the server as a JavaScript object (already JSON-decoded).\n    async logBookEvent(eventInfo) {\n        if (this.graderactive) {\n            return;\n        }\n        let post_return;\n        eventInfo.course = eBookConfig.course;\n        eventInfo.clientLoginStatus = eBookConfig.isLoggedIn;\n        eventInfo.timezoneoffset = new Date().getTimezoneOffset() / 60;\n        if (this.percent) {\n            eventInfo.percent = this.percent;\n        }\n        if (eBookConfig.useRunestoneServices && eBookConfig.logLevel > 0) {\n            post_return = this.postLogMessage(eventInfo)\n        }\n        if (!this.isTimed || eBookConfig.debug) {\n            console.log(\"logging event \" + JSON.stringify(eventInfo));\n        }\n        // When selectquestions are part of an assignment especially toggle questions\n        // we need to count using the selector_id of the select question.\n        // We  also need to log an event for that selector so that we will know\n        // that interaction has taken place.  This is **independent** of how the\n        // autograder will ultimately grade the question!\n        if (this.selector_id) {\n            eventInfo.div_id = this.selector_id.replace(\"-toggleSelectedQuestion\", \"\");\n            eventInfo.event = \"selectquestion\";\n            eventInfo.act = \"interaction\"\n            this.postLogMessage(eventInfo);\n        }\n        if (\n            typeof pageProgressTracker.updateProgress === \"function\" &&\n            eventInfo.act != \"edit\" &&\n            this.optional == false\n        ) {\n            pageProgressTracker.updateProgress(eventInfo.div_id);\n        }\n        return post_return;\n    }\n\n    async postLogMessage(eventInfo) {\n        var post_return;\n        let request = new Request(eBookConfig.ajaxURL + \"hsblog\", {\n            method: \"POST\",\n            headers: this.jsonHeaders,\n            body: JSON.stringify(eventInfo),\n        });\n        try {\n            let response = await fetch(request);\n            if (!response.ok) {\n                throw new Error(\"Failed to save the log entry\");\n            }\n            post_return = response.json();\n        } catch (e) {\n            if (this.isTimed) {\n                alert(`Error: Your action was not saved! The error was ${e}`);\n            }\n            console.log(`Error: ${e}`);\n        }\n        return post_return;\n    }\n    // .. _logRunEvent:\n    //\n    // logRunEvent\n    // -----------\n    // This function sends the provided ``eventInfo`` to the `runlog endpoint`. When awaited, this function returns the data (decoded from JSON) the server sent back.\n    async logRunEvent(eventInfo) {\n        let post_promise = \"done\";\n        if (this.graderactive) {\n            return;\n        }\n        eventInfo.course = eBookConfig.course;\n        eventInfo.clientLoginStatus = eBookConfig.isLoggedIn;\n        eventInfo.timezoneoffset = new Date().getTimezoneOffset() / 60;\n        if (this.forceSave || \"to_save\" in eventInfo === false) {\n            eventInfo.save_code = \"True\";\n        }\n        if (eBookConfig.useRunestoneServices && eBookConfig.logLevel > 0) {\n            let request = new Request(eBookConfig.ajaxURL + \"runlog.json\", {\n                method: \"POST\",\n                headers: this.jsonHeaders,\n                body: JSON.stringify(eventInfo),\n            });\n            let response = await fetch(request);\n            if (!response.ok) {\n                throw new Error(\"Failed to log the run\");\n            }\n            post_promise = await response.json();\n        }\n        if (!this.isTimed || eBookConfig.debug) {\n            console.log(\"running \" + JSON.stringify(eventInfo));\n        }\n        if (\n            typeof pageProgressTracker.updateProgress === \"function\" &&\n            this.optional == false\n        ) {\n            pageProgressTracker.updateProgress(eventInfo.div_id);\n        }\n        return post_promise;\n    }\n    /* Checking/loading from storage\n    **WARNING:**  DO NOT `await` this function!\n    This function, although async, does not explicitly resolve its promise by returning a value.  The reason for this is because it is called by the constructor for nearly every component.  In Javascript constructors cannot be async!\n\n    One of the recommended ways to handle the async requirements from within a constructor is to use an attribute as a promise and resolve that attribute at the appropriate time.\n    */\n    async checkServer(\n        // A string specifying the event name to use for querying the :ref:`getAssessResults` endpoint.\n        eventInfo,\n        // If true, this function will invoke ``indicate_component_ready()`` just before it returns. This is provided since most components are ready after this function completes its work.\n        //\n        // TODO: This defaults to false, to avoid causing problems with any components that haven't been updated and tested. After all Runestone components have been updated, default this to true and remove the extra parameter from most calls to this function.\n        will_be_ready = false\n    ) {\n        // Check if the server has stored answer\n        let self = this;\n        this.checkServerComplete = new Promise(function (resolve, reject) {\n            self.csresolver = resolve;\n        });\n        if (this.useRunestoneServices || this.graderactive) {\n            let data = {};\n            data.div_id = this.divid;\n            data.course = eBookConfig.course;\n            data.event = eventInfo;\n            if (this.graderactive && this.deadline) {\n                data.deadline = this.deadline;\n                data.rawdeadline = this.rawdeadline;\n                data.tzoff = this.tzoff;\n            }\n            if (this.sid) {\n                data.sid = this.sid;\n            }\n            if (!eBookConfig.practice_mode && this.assessmentTaken) {\n                let request = new Request(\n                    eBookConfig.ajaxURL + \"getAssessResults\",\n                    {\n                        method: \"POST\",\n                        body: JSON.stringify(data),\n                        headers: this.jsonHeaders,\n                    }\n                );\n                try {\n                    let response = await fetch(request);\n                    data = await response.json();\n                    this.repopulateFromStorage(data);\n                    this.csresolver(\"server\");\n                } catch (err) {\n                    try {\n                        this.checkLocalStorage();\n                    } catch (err) {\n                        console.log(err);\n                    }\n                }\n            } else {\n                this.loadData({});\n                this.csresolver(\"not taken\");\n            }\n        } else {\n            this.checkLocalStorage(); // just go right to local storage\n            this.csresolver(\"local\");\n        }\n\n        if (will_be_ready) {\n            this.indicate_component_ready();\n        }\n    }\n\n    // This method assumes that ``this.componentDiv`` refers to the ``div`` containing the component, and that this component's ID is set.\n    indicate_component_ready() {\n        // Add a class to indicate the component is now ready.\n        this.containerDiv.classList.add(\"runestone-component-ready\");\n        // Resolve the ``this.component_ready_promise``.\n        this._component_ready_resolve_fn();\n    }\n\n    loadData(data) {\n        // for most classes, loadData doesn't do anything. But for Parsons, and perhaps others in the future,\n        // initialization can happen even when there's no history to be loaded\n        return null;\n    }\n\n    /**\n     * repopulateFromStorage is called after a successful API call is made to ``getAssessResults`` in\n     * the checkServer method in this class\n     *\n     * ``restoreAnswers,`` ``setLocalStorage`` and ``checkLocalStorage`` are defined in the child classes.\n     *\n     * @param {*} data - a JSON object representing the data needed to restore a previous answer for a component\n     * @param {*} status - the http status\n     * @param {*} whatever - ignored\n     */\n    repopulateFromStorage(data) {\n        // decide whether to use the server's answer (if there is one) or to load from storage\n        if (data !== null && this.shouldUseServer(data)) {\n            this.restoreAnswers(data);\n            this.setLocalStorage(data);\n        } else {\n            this.checkLocalStorage();\n        }\n    }\n    shouldUseServer(data) {\n        // returns true if server data is more recent than local storage or if server storage is correct\n        if (\n            data.correct === \"T\" ||\n            localStorage.length === 0 ||\n            this.graderactive === true ||\n            this.isTimed\n        ) {\n            return true;\n        }\n        let ex = localStorage.getItem(this.localStorageKey());\n        if (ex === null) {\n            return true;\n        }\n        let storedData;\n        try {\n            storedData = JSON.parse(ex);\n        } catch (err) {\n            // error while parsing; likely due to bad value stored in storage\n            console.log(err.message);\n            localStorage.removeItem(this.localStorageKey());\n            // definitely don't want to use local storage here\n            return true;\n        }\n        if (data.answer == storedData.answer) return true;\n        let storageDate = new Date(storedData.timestamp);\n        let serverDate = new Date(data.timestamp);\n        return serverDate >= storageDate;\n    }\n    // Return the key which to be used when accessing local storage.\n    localStorageKey() {\n        return (\n            eBookConfig.email +\n            \":\" +\n            eBookConfig.course +\n            \":\" +\n            this.divid +\n            \"-given\"\n        );\n    }\n    addCaption(elType) {\n        //someElement.parentNode.insertBefore(newElement, someElement.nextSibling);\n        if (!this.isTimed) {\n            var capDiv = document.createElement(\"p\");\n            if (this.question_label) {\n                this.caption = `Activity: ${this.question_label} ${this.caption}  <span class=\"runestone_caption_divid\">(${this.divid})</span>`;\n                $(capDiv).html(this.caption);\n                $(capDiv).addClass(`${elType}_caption`);\n            } else {\n                $(capDiv).html(this.caption + \" (\" + this.divid + \")\");\n                $(capDiv).addClass(`${elType}_caption`);\n                $(capDiv).addClass(`${elType}_caption_text`);\n            }\n            this.capDiv = capDiv;\n            //this.outerDiv.parentNode.insertBefore(capDiv, this.outerDiv.nextSibling);\n            this.containerDiv.appendChild(capDiv);\n        }\n    }\n\n    hasUserActivity() {\n        return this.isAnswered;\n    }\n\n    checkCurrentAnswer() {\n        console.log(\n            \"Each component should provide an implementation of checkCurrentAnswer\"\n        );\n    }\n\n    async logCurrentAnswer() {\n        console.log(\n            \"Each component should provide an implementation of logCurrentAnswer\"\n        );\n    }\n    renderFeedback() {\n        console.log(\n            \"Each component should provide an implementation of renderFeedback\"\n        );\n    }\n    disableInteraction() {\n        console.log(\n            \"Each component should provide an implementation of disableInteraction\"\n        );\n    }\n\n    toString() {\n        return `${this.constructor.name}: ${this.divid}`\n    }\n\n    queueMathJax(component) {\n        if (MathJax.version.substring(0, 1) === \"2\") {\n            MathJax.Hub.Queue([\"Typeset\", MathJax.Hub, component]);\n        } else {\n            MathJax.typesetPromise([component])\n        }\n    }\n\n}\n\nwindow.RunestoneBase = RunestoneBase;\n","$.i18n().load({\n    en: {\n        msg_no_answer: \"No answer provided.\",\n        msg_fitb_check_me: \"Check me\",\n        msg_fitb_compare_me: \"Compare me\",\n    },\n});\n","$.i18n().load({\n    \"pt-br\": {\n        msg_no_answer: \"Nenhuma resposta dada.\",\n        msg_fitb_check_me: \"Verificar\",\n        msg_fitb_compare_me: \"Comparar\"\n    },\n});\n","// *********\n// |docname|\n// *********\n// This file contains the JS for the Runestone fillintheblank component. It was created By Isaiah Mayerchak and Kirby Olson, 6/4/15 then revised by Brad Miller, 2/7/20.\n\"use strict\";\n\nimport RunestoneBase from \"../../common/js/runestonebase.js\";\nimport \"./fitb-i18n.en.js\";\nimport \"./fitb-i18n.pt-br.js\";\nimport \"../css/fitb.css\";\n\nexport var FITBList = {}; // Object containing all instances of FITB that aren't a child of a timed assessment.\n\n// FITB constructor\nexport default class FITB extends RunestoneBase {\n    constructor(opts) {\n        super(opts);\n        var orig = opts.orig; // entire <p> element\n        this.useRunestoneServices = opts.useRunestoneServices;\n        this.origElem = orig;\n        this.divid = orig.id;\n        this.correct = null;\n        // See comments in fitb.py for the format of ``feedbackArray`` (which is identical in both files).\n        //\n        // Find the script tag containing JSON and parse it. See `SO <https://stackoverflow.com/questions/9320427/best-practice-for-embedding-arbitrary-json-in-the-dom>`_. If this parses to ``false``, then no feedback is available; server-side grading will be performed.\n        this.feedbackArray = JSON.parse(\n            this.scriptSelector(this.origElem).html()\n        );\n        this.createFITBElement();\n        this.caption = \"Fill in the Blank\";\n        this.addCaption(\"runestone\");\n        this.checkServer(\"fillb\", true);\n    }\n    // Find the script tag containing JSON in a given root DOM node.\n    scriptSelector(root_node) {\n        return $(root_node).find(`script[type=\"application/json\"]`);\n    }\n    /*===========================================\n    ====   Functions generating final HTML   ====\n    ===========================================*/\n    createFITBElement() {\n        this.renderFITBInput();\n        this.renderFITBButtons();\n        this.renderFITBFeedbackDiv();\n        // replaces the intermediate HTML for this component with the rendered HTML of this component\n        $(this.origElem).replaceWith(this.containerDiv);\n    }\n    renderFITBInput() {\n        // The text [input] elements are created by the template.\n        this.containerDiv = document.createElement(\"div\");\n        $(this.containerDiv).addClass(\"alert alert-warning\");\n        this.containerDiv.id = this.divid;\n        // Copy the original elements to the container holding what the user will see.\n        $(this.origElem).children().clone().appendTo(this.containerDiv);\n        // Remove the script tag.\n        this.scriptSelector(this.containerDiv).remove();\n        // Set the class for the text inputs, then store references to them.\n        let ba = $(this.containerDiv).find(\":input\");\n        ba.attr(\"class\", \"form form-control selectwidthauto\");\n        ba.attr(\"aria-label\", \"input area\");\n        this.blankArray = ba.toArray();\n        // When a blank is changed mark this component as interacted with.\n        // And set a class on the component in case we want to render components that have been used\n        // differently\n        for (let blank of this.blankArray) {\n            $(blank).change(this.recordAnswered.bind(this));\n        }\n    }\n\n    recordAnswered() {\n        this.isAnswered = true;\n        //let rcontainer = this.containerDiv.closest(\".runestone\");\n        //rcontainer.addClass(\"answered\");\n    }\n\n    renderFITBButtons() {\n        // \"submit\" button and \"compare me\" button\n        this.submitButton = document.createElement(\"button\");\n        this.submitButton.textContent = $.i18n(\"msg_fitb_check_me\");\n        $(this.submitButton).attr({\n            class: \"btn btn-success\",\n            name: \"do answer\",\n            type: \"button\",\n        });\n        this.submitButton.addEventListener(\n            \"click\",\n            function () {\n                this.checkCurrentAnswer();\n                this.logCurrentAnswer();\n            }.bind(this),\n            false\n        );\n        this.containerDiv.appendChild(document.createElement(\"br\"));\n        this.containerDiv.appendChild(document.createElement(\"br\"));\n        this.containerDiv.appendChild(this.submitButton);\n        if (this.useRunestoneServices) {\n            this.compareButton = document.createElement(\"button\");\n            $(this.compareButton).attr({\n                class: \"btn btn-default\",\n                id: this.origElem.id + \"_bcomp\",\n                disabled: \"\",\n                name: \"compare\",\n            });\n            this.compareButton.textContent = $.i18n(\"msg_fitb_compare_me\");\n            this.compareButton.addEventListener(\n                \"click\",\n                function () {\n                    this.compareFITBAnswers();\n                }.bind(this),\n                false\n            );\n            this.containerDiv.appendChild(this.compareButton);\n        }\n        this.containerDiv.appendChild(document.createElement(\"div\"));\n    }\n    renderFITBFeedbackDiv() {\n        this.feedBackDiv = document.createElement(\"div\");\n        this.feedBackDiv.id = this.divid + \"_feedback\";\n        this.containerDiv.appendChild(document.createElement(\"br\"));\n        this.containerDiv.appendChild(this.feedBackDiv);\n    }\n    /*===================================\n    === Checking/loading from storage ===\n    ===================================*/\n    restoreAnswers(data) {\n        var arr;\n        // Restore answers from storage retrieval done in RunestoneBase.\n        try {\n            // The newer format encodes data as a JSON object.\n            arr = JSON.parse(data.answer);\n            // The result should be an array. If not, try comma parsing instead.\n            if (!Array.isArray(arr)) {\n                throw new Error();\n            }\n        } catch (err) {\n            // The old format didn't.\n            arr = data.answer.split(\",\");\n        }\n        for (var i = 0; i < this.blankArray.length; i++) {\n            $(this.blankArray[i]).attr(\"value\", arr[i]);\n        }\n        // Use the feedback from the server, or recompute it locally.\n        if (!this.feedbackArray) {\n            this.displayFeed = data.displayFeed;\n            this.correct = data.correct;\n            this.isCorrectArray = data.isCorrectArray;\n            // Only render if all the data is present; local storage might have old data missing some of these items.\n            if (\n                typeof this.displayFeed !== \"undefined\" &&\n                typeof this.correct !== \"undefined\" &&\n                typeof this.isCorrectArray !== \"undefined\"\n            ) {\n                this.renderFeedback();\n            }\n        } else {\n            this.checkCurrentAnswer();\n        }\n    }\n    checkLocalStorage() {\n        // Loads previous answers from local storage if they exist\n        var storedData;\n        if (this.graderactive) {\n            return;\n        }\n        var len = localStorage.length;\n        if (len > 0) {\n            var ex = localStorage.getItem(this.localStorageKey());\n            if (ex !== null) {\n                try {\n                    storedData = JSON.parse(ex);\n                    var arr = storedData.answer;\n                } catch (err) {\n                    // error while parsing; likely due to bad value stored in storage\n                    console.log(err.message);\n                    localStorage.removeItem(this.localStorageKey());\n                    return;\n                }\n                this.restoreAnswers(storedData);\n            }\n        }\n    }\n    setLocalStorage(data) {\n        let key = this.localStorageKey();\n        localStorage.setItem(key, JSON.stringify(data));\n    }\n\n    checkCurrentAnswer() {\n        // Start of the evaluation chain\n        this.isCorrectArray = [];\n        this.displayFeed = [];\n        this.given_arr = [];\n        for (var i = 0; i < this.blankArray.length; i++)\n            this.given_arr.push(this.blankArray[i].value);\n        if (this.useRunestoneServices) {\n            if (eBookConfig.enableCompareMe) {\n                this.enableCompareButton();\n            }\n        }\n        // Grade locally if we can't ask the server to grade.\n        if (this.feedbackArray) {\n            this.evaluateAnswers();\n            if (!this.isTimed) {\n                this.renderFeedback();\n            }\n        }\n    }\n\n    async logCurrentAnswer(sid) {\n        let answer = JSON.stringify(this.given_arr);\n        // Save the answer locally.\n        let feedback = true;\n        this.setLocalStorage({\n            answer: answer,\n            timestamp: new Date(),\n        });\n        let data = {\n            event: \"fillb\",\n            act: answer,\n            answer: answer,\n            correct: this.correct ? \"T\" : \"F\",\n            div_id: this.divid,\n        };\n        if (typeof sid !== \"undefined\") {\n            data.sid = sid;\n            feedback = false;\n        };\n        data = await this.logBookEvent(data);\n        if (!feedback) return;\n        if (!this.feedbackArray) {\n            // On success, update the feedback from the server's grade.\n            this.setLocalStorage({\n                answer: answer,\n                timestamp: data.timestamp,\n            });\n            this.correct = data.correct;\n            this.displayFeed = data.displayFeed;\n            this.isCorrectArray = data.isCorrectArray;\n            if (!this.isTimed) {\n                this.renderFeedback();\n            }\n        }\n        return data;\n    }\n\n    /*==============================\n    === Evaluation of answer and ===\n    ===     display feedback     ===\n    ==============================*/\n    // Inputs:\n    //\n    // - Strings entered by the student in ``this.blankArray[i].value``.\n    // - Feedback in ``this.feedbackArray``.\n    //\n    // Outputs:\n    //\n    // - ``this.displayFeed`` is an array of HTML feedback.\n    // - ``this.isCorrectArray`` is an array of true, false, or null (the question wasn't answered).\n    // - ``this.correct`` is true, false, or null (the question wasn't answered).\n    evaluateAnswers() {\n        // Keep track if all answers are correct or not.\n        this.correct = true;\n        for (var i = 0; i < this.blankArray.length; i++) {\n            var given = this.blankArray[i].value;\n            // If this blank is empty, provide no feedback for it.\n            if (given === \"\") {\n                this.isCorrectArray.push(null);\n                this.displayFeed.push($.i18n(\"msg_no_answer\"));\n                this.correct = false;\n            } else {\n                // Look through all feedback for this blank. The last element in the array always matches. If no feedback for this blank exists, use an empty list.\n                var fbl = this.feedbackArray[i] || [];\n                for (var j = 0; j < fbl.length; j++) {\n                    // The last item of feedback always matches.\n                    if (j === fbl.length - 1) {\n                        this.displayFeed.push(fbl[j][\"feedback\"]);\n                        break;\n                    }\n                    // If this is a regexp...\n                    if (\"regex\" in fbl[j]) {\n                        var patt = RegExp(\n                            fbl[j][\"regex\"],\n                            fbl[j][\"regexFlags\"]\n                        );\n                        if (patt.test(given)) {\n                            this.displayFeed.push(fbl[j][\"feedback\"]);\n                            break;\n                        }\n                    } else {\n                        // This is a number.\n                        console.assert(\"number\" in fbl[j]);\n                        var [min, max] = fbl[j][\"number\"];\n                        // Convert the given string to a number. While there are `lots of ways <https://coderwall.com/p/5tlhmw/converting-strings-to-number-in-javascript-pitfalls>`_ to do this; this version supports other bases (hex/binary/octal) as well as floats.\n                        var actual = +given;\n                        if (actual >= min && actual <= max) {\n                            this.displayFeed.push(fbl[j][\"feedback\"]);\n                            break;\n                        }\n                    }\n                }\n                // The answer is correct if it matched the first element in the array. A special case: if only one answer is provided, count it wrong; this is a misformed problem.\n                let is_correct = j === 0 && fbl.length > 1;\n                this.isCorrectArray.push(is_correct);\n                if (!is_correct) {\n                    this.correct = false;\n                }\n            }\n        }\n        this.percent =\n            this.isCorrectArray.filter(Boolean).length / this.blankArray.length;\n    }\n\n    renderFeedback() {\n        if (this.correct) {\n            $(this.feedBackDiv).attr(\"class\", \"alert alert-info\");\n            for (let j = 0; j < this.blankArray.length; j++) {\n                $(this.blankArray[j]).removeClass(\"input-validation-error\");\n            }\n        } else {\n            if (this.displayFeed === null) {\n                this.displayFeed = \"\";\n            }\n            for (let j = 0; j < this.blankArray.length; j++) {\n                if (this.isCorrectArray[j] !== true) {\n                    $(this.blankArray[j]).addClass(\"input-validation-error\");\n                } else {\n                    $(this.blankArray[j]).removeClass(\"input-validation-error\");\n                }\n            }\n            $(this.feedBackDiv).attr(\"class\", \"alert alert-danger\");\n        }\n        var feedback_html = \"<ul>\";\n        for (var i = 0; i < this.displayFeed.length; i++) {\n            feedback_html += \"<li>\" + this.displayFeed[i] + \"</li>\";\n        }\n        feedback_html += \"</ul>\";\n        // Remove the list if it's just one element.\n        if (this.displayFeed.length == 1) {\n            feedback_html = feedback_html.slice(\n                \"<ul><li>\".length,\n                -\"</li></ul>\".length\n            );\n        }\n        this.feedBackDiv.innerHTML = feedback_html;\n        if (typeof MathJax !== \"undefined\") {\n            this.queueMathJax(document.body)\n        }\n    }\n\n    /*==================================\n    === Functions for compare button ===\n    ==================================*/\n    enableCompareButton() {\n        this.compareButton.disabled = false;\n    }\n    compareFITBAnswers() {\n        var data = {};\n        data.div_id = this.divid;\n        data.course = eBookConfig.course;\n        jQuery.get(\n            eBookConfig.ajaxURL + \"gettop10Answers\",\n            data,\n            this.compareFITB\n        );\n    }\n    compareFITB(data, status, whatever) {\n        var answers = eval(data)[0];\n        var misc = eval(data)[1];\n        var body = \"<table>\";\n        body += \"<tr><th>Answer</th><th>Count</th></tr>\";\n        for (var row in answers) {\n            body +=\n                \"<tr><td>\" +\n                answers[row].answer +\n                \"</td><td>\" +\n                answers[row].count +\n                \" times</td></tr>\";\n        }\n        body += \"</table>\";\n        if (misc[\"yourpct\"] !== \"unavailable\") {\n            body +=\n                \"<br /><p>You have \" +\n                misc[\"yourpct\"] +\n                \"% correct for all questions</p>\";\n        }\n        var html =\n            \"<div class='modal fade'>\" +\n            \"    <div class='modal-dialog compare-modal'>\" +\n            \"        <div class='modal-content'>\" +\n            \"            <div class='modal-header'>\" +\n            \"                <button type='button' class='close' data-dismiss='modal' aria-hidden='true'>&times;</button>\" +\n            \"                <h4 class='modal-title'>Top Answers</h4>\" +\n            \"            </div>\" +\n            \"            <div class='modal-body'>\" +\n            body +\n            \"            </div>\" +\n            \"        </div>\" +\n            \"    </div>\" +\n            \"</div>\";\n        var el = $(html);\n        el.modal();\n    }\n\n    disableInteraction() {\n        for (var i = 0; i < this.blankArray.length; i++) {\n            this.blankArray[i].disabled = true;\n        }\n    }\n}\n\n/*=================================\n== Find the custom HTML tags and ==\n==   execute our code on them    ==\n=================================*/\n$(document).bind(\"runestone:login-complete\", function () {\n    $(\"[data-component=fillintheblank]\").each(function (index) {\n        var opts = {\n            orig: this,\n            useRunestoneServices: eBookConfig.useRunestoneServices,\n        };\n        if ($(this).closest(\"[data-component=timedAssessment]\").length == 0) {\n            // If this element exists within a timed component, don't render it here\n            try {\n                FITBList[this.id] = new FITB(opts);\n            } catch (err) {\n                console.log(\n                    `Error rendering Fill in the Blank Problem ${this.id}\n                     Details: ${err}`\n                );\n            }\n        }\n    });\n});\n","import FITB from \"./fitb.js\";\nexport default class TimedFITB extends FITB {\n    constructor(opts) {\n        super(opts);\n        this.renderTimedIcon(this.inputDiv);\n        this.hideButtons();\n        this.needsReinitialization = true;\n    }\n    hideButtons() {\n        $(this.submitButton).hide();\n        $(this.compareButton).hide();\n    }\n    renderTimedIcon(component) {\n        // renders the clock icon on timed components.    The component parameter\n        // is the element that the icon should be appended to.\n        var timeIconDiv = document.createElement(\"div\");\n        var timeIcon = document.createElement(\"img\");\n        $(timeIcon).attr({\n            src: \"../_static/clock.png\",\n            style: \"width:15px;height:15px\",\n        });\n        timeIconDiv.className = \"timeTip\";\n        timeIconDiv.title = \"\";\n        timeIconDiv.appendChild(timeIcon);\n        $(component).prepend(timeIconDiv);\n    }\n    checkCorrectTimed() {\n        // Returns if the question was correct, incorrect, or skipped (return null in the last case)\n        switch (this.correct) {\n            case true:\n                return \"T\";\n            case false:\n                return \"F\";\n            default:\n                return null;\n        }\n    }\n    hideFeedback() {\n        for (var i = 0; i < this.blankArray.length; i++) {\n            $(this.blankArray[i]).removeClass(\"input-validation-error\");\n        }\n        this.feedBackDiv.style.display = \"none\";\n    }\n\n    reinitializeListeners() {\n        for (let blank of this.blankArray) {\n            $(blank).change(this.recordAnswered.bind(this));\n        }\n    }\n}\n\nif (typeof window.component_factory === \"undefined\") {\n    window.component_factory = {};\n}\nwindow.component_factory.fillintheblank = function (opts) {\n    if (opts.timed) {\n        return new TimedFITB(opts);\n    }\n    return new FITB(opts);\n};\n"],"names":["RunestoneBase","constructor","opts","this","component_ready_promise","Promise","resolve","_component_ready_resolve_fn","optional","window","allComponents","push","sid","graderactive","showfeedback","timed","isTimed","enforceDeadline","deadline","$","orig","data","selector_id","assessmentTaken","timedWrapper","location","href","indexOf","text","question_label","jsonHeaders","Headers","Accept","async","eventInfo","post_return","course","eBookConfig","clientLoginStatus","isLoggedIn","timezoneoffset","Date","getTimezoneOffset","percent","useRunestoneServices","logLevel","postLogMessage","debug","console","log","JSON","stringify","div_id","replace","event","act","request","Request","ajaxURL","method","headers","body","response","fetch","ok","Error","json","e","alert","post_promise","forceSave","save_code","will_be_ready","self","checkServerComplete","reject","csresolver","divid","rawdeadline","tzoff","practice_mode","repopulateFromStorage","err","checkLocalStorage","loadData","indicate_component_ready","containerDiv","classList","add","shouldUseServer","restoreAnswers","setLocalStorage","correct","localStorage","length","storedData","ex","getItem","localStorageKey","parse","message","removeItem","answer","storageDate","timestamp","email","addCaption","elType","capDiv","document","createElement","caption","html","addClass","appendChild","hasUserActivity","isAnswered","checkCurrentAnswer","renderFeedback","disableInteraction","toString","name","queueMathJax","component","MathJax","version","substring","Hub","Queue","typesetPromise","i18n","load","en","msg_no_answer","msg_fitb_check_me","msg_fitb_compare_me","FITBList","FITB","super","origElem","id","feedbackArray","scriptSelector","createFITBElement","checkServer","root_node","find","renderFITBInput","renderFITBButtons","renderFITBFeedbackDiv","replaceWith","children","clone","appendTo","remove","ba","attr","blankArray","toArray","blank","change","recordAnswered","bind","submitButton","textContent","class","type","addEventListener","logCurrentAnswer","compareButton","disabled","compareFITBAnswers","feedBackDiv","arr","Array","isArray","split","i","displayFeed","isCorrectArray","key","setItem","given_arr","value","enableCompareMe","enableCompareButton","evaluateAnswers","feedback","logBookEvent","given","fbl","j","RegExp","test","assert","min","max","actual","is_correct","filter","Boolean","removeClass","feedback_html","slice","innerHTML","jQuery","get","compareFITB","status","whatever","answers","eval","misc","row","count","el","modal","each","index","closest","TimedFITB","renderTimedIcon","inputDiv","hideButtons","needsReinitialization","hide","timeIconDiv","timeIcon","src","style","className","title","prepend","checkCorrectTimed","hideFeedback","display","reinitializeListeners","component_factory","fillintheblank"],"sourceRoot":""}