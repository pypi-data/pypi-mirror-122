__authors__ = ["Jérôme Kieffer"]
__license__ = "MIT"
__date__ = "08/10/2021"

import numpy
import h5py


def topas_parser(infile):
    """Parser for TOPAS output file with geometry of the multianalyzer
    
    :param infile: name of the file containing the TOPAS refined parameters, usually 'out7.pars'
    :return: dict with the data from the file (no conversion is made)
    """
    res = {}
    with open(infile, "r") as f:
        keys = ["centre", "rollx", "rolly", "offset"]
        for line in f:
            words = line.split()
            if not words:
                continue
            if words[0] == "Wavelength":
                res["wavelength"] = float(words[2])
            if words[:2] == ["manom", "mantth"]:
                line = f.readline()
                words = line.split()
                res["manom"] = float(words[0])
                res["mantth"] = float(words[1])
            if words[:2] == ["L1", "L2"]:
                line = f.readline()
                words = line.split()
                res["L1"] = float(words[0])
                res["L2"] = float(words[1])
            if words == keys:
                for k in keys:
                    res[k] = []
                for line in f:
                    words = line.split()
                    if len(words) < len(keys) + 1:
                        break
                    for k, v in zip(keys, words):
                        res[k].append(float(v))
    return res


def ID22_bliss_parser(infile, entry=None):
    """Read an HDF5 file as generated by BLISS on ID22 and returns valuable information from there
    
    :param infile: name of the HDF5 file
    :return: dict with 
        * tha: the acceptance angle of the analyzer
        * thd: the diffractio angle of the analyzer (~2xtha)
        * roicol: A collection of ROI for each frame
        * mon: a monitor for the intensity of the incoming beam
        * arm: the position of the 2theta arm when collecting 
    """
    res = {}
    with h5py.File(infile, "r") as h:
        entries = [k for k, v in h.items() if v.attrs.get("NX_class") == "NXentry"]
        if not(entry and entry in entries):
            entries.sort()
            entry = entries[0]
        entry = h[entry]
        res["roicol"] = entry["measurement/eiger_roi_collection"][()]
        res["arm"] = entry["measurement/tth"][()]
        res["mon"] = entry["measurement/mon"][()]
        res["tha"] = entry["instrument/positioners/manom"][()]
        res["thd"] = entry["instrument/positioners/mantth"][()]
    return res

