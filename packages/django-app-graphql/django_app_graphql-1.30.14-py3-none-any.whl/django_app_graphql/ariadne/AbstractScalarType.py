import abc
from typing import TypeVar, Generic, Tuple, Callable, Set, FrozenSet

from ariadne import ScalarType

from django_app_graphql.ariadne.decorators import AriadneSchemaEntityYielder

T = TypeVar("T")


class AbstractScalarType(Generic[T], abc.ABC):
    """
    Allows you to generate an ariadne scala type

    .. code-block :: python

        class ZonedDateTimeScalar(AbstractScalarType):
        \"\"\"
        Serialize time zone sensitive date time using UTC
        \"\"\"

            @property
            def name(self):
                return "ZonedDateTime"

            def serialize(self, value: Arrow, *args, **kwargs) -> str:
                return value.to(tz.gettz("UTC")).isoformat()

            def deserialize(self, value: str, *args, **kwargs) -> Arrow:
                return arrow.get(value).to(tz.gettz("UTC"))

        # used to register actual ariadne entities
        zonedatetime_scalar, zonedatetime_serializer, zonedatetime_deserializer = ZonedDateTimeScalar().generate_scalar()

    """

    @property
    @abc.abstractmethod
    def _name(self):
        """
        :return: identfiier used in the graphql schema type
        """
        pass

    @abc.abstractmethod
    def _serialize(self, value: T, *args, **kwargs) -> any:
        """
        Pick an instance of a scalar and  convert it into a value that will be yielded
        by the grpahql server
        :param value: value to serialize
        :param args: arguments passed in generate_scalar, as is
        :param kwargs: arguments passed in generate_scalar, as is
        :return: the value to put in the output JSON. Can be str, int or even dict
        """
        pass

    @abc.abstractmethod
    def _deserialize(self, value: any, *args, **kwargs) -> T:
        """
        Parse the value generated by serialize method into the original instance
        :param value: vbalue to parse
        :param args: arguments passed in generate_scalar, as is
        :param kwargs: arguments passed in generate_scalar, as is
        :return: instance of a scalar
        """
        pass

    def generate_scalar(self, *args, **kwargs) -> Tuple[ScalarType, Callable[[any], any], Callable[[any], any]]:
        """
        Generate all the fields required by ariadne in order to make a scalar
        :param args: custom argumetns that you can use in the serialization methods. Scalar type specific
        :param kwargs: custom argumetns that you can use in the serialization methods. Scalar type specific
        :return: a tuple where:
         - the object representing the scalar (e.g.g, datatime_scalar)
         - the method already decorated with serializer (e.g.g @datetime_scala.serializer)
         - the method already decorated with deserializer (e.g.g @datetime_scala.value_parser)
        """

        scalar_type = ScalarType(self._name)

        @scalar_type.serializer
        def serialize(value: T) -> any:
            return self._serialize(value, *args, **kwargs)

        @scalar_type.value_parser
        def deserialize(value: any) -> T:
            return self._deserialize(value, *args, **kwargs)

        AriadneSchemaEntityYielder().add_scalar(scalar_type)

        return scalar_type, serialize, deserialize

