"""{{module}}

This module has been generated with SqlPyGen.
"""

from pprint import pprint
from typing import Optional, Iterable, cast

import sqlite3
ConnectionType = sqlite3.Connection

{% for stmt in import_stmts %}
from {{ stmt.module }} import {% for name in stmt.names %}{{ name }}{{ comma_sep(loop) }}{% endfor %}

{% endfor %}

SCHEMA = {}
{% for schema in schemas %}
SCHEMA["{{ schema.name }}"] = """
{{ schema.sql }}
"""

{% endfor %}

QUERY = {}
{% for query in queries %}
QUERY["{{ query.name }}"] = """
{{ query.sql }}
"""

{% endfor %}

def create_schema(connection: ConnectionType) -> None:
    """Create the table schema."""
    with connection:
        cursor = connection.cursor()

        {% for schema in schemas %}
        try:
            sql = SCHEMA["{{ schema.name }}"]

            cursor.execute(sql)
        except Exception as e:
            raise RuntimeError("An unexpected exception occurred when creating schema: {{ schema.name }}") from e
        {% endfor %}

{% for query in queries %}
def {{ query.name }}({{ query.params.fn_params }}) -> {{ query.return_.wt_return }}:
    """Query {{query.name}} with transaction."""
    {% if query.params.has_params %}
    query_args = {{ query.params.query_args }}
    {% endif %}

    with connection:
        cursor = connection.cursor()
        try:
            sql = QUERY["{{ query.name }}"]

            {% if query.params.has_params %}
            cursor.execute(sql, query_args)
            {% else %}
            cursor.execute(sql)
            {% endif %}

            {% if query.return_.does_return %}
            {% if query.return_.returns_one %}
            return cursor.fetchone()
            {% else %}
            return cursor.fetchall()
            {% endif %}
            {% endif %}

        except Exception as e:
            raise RuntimeError("An unexpected exception occurred while executing query: {{ query.name }}") from e

def {{ query.name }}_nt({{ query.params.fn_params }}) -> {{ query.return_.nt_return }}:
    """Query {{query.name}} no implied transaction."""
    {% if query.params.has_params %}
    query_args = {{ query.params.query_args }}
    {% endif %}

    cursor = connection.cursor()
    try:
        sql = QUERY["{{ query.name }}"]

        {% if query.params.has_params %}
        cursor.execute(sql, query_args)
        {% else %}
        cursor.execute(sql)
        {% endif %}

        {% if query.return_.does_return %}
        {% if query.return_.returns_one %}
        return cursor.fetchone()
        {% else %}
        return cast({{ query.return_.nt_return }}, cursor)
        {% endif %}
        {% endif %}
    except Exception as e:
        raise RuntimeError("An unexpected exception occurred while executing query: {{ query.name }}") from e

{% endfor %}

def explain_queries() -> None:
    connection = sqlite3.connect(":memory:")
    create_schema(connection)

    with connection:
        cursor = connection.cursor()

        {% for query in queries %}
        try:
            sql = QUERY["{{ query.name }}"]
            sql = "EXPLAIN " + sql

            {% if query.params.has_params %}
            query_args = {{ query.params.explain_args }}
            {% endif %}

            {% if query.params.has_params %}
            cursor.execute(sql, query_args)
            {% else %}
            cursor.execute(sql)
            {% endif %}

            print("Query explanation for {{ query.name }}")
            print("-" * 80)
            pprint(cursor.fetchall())
        except Exception as e:
            raise RuntimeError("An unexpected exception occurred while executing query plan for: {{ query.name }}") from e

        {% endfor %}

if __name__ == "__main__":
    explain_queries()
