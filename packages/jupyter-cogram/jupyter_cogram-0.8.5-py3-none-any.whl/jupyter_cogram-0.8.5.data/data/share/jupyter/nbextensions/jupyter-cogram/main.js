define(["jquery","base/js/keyboard","require","base/js/namespace","notebook/js/cell","notebook/js/codecell","module"],(function(e,o,t,n,r,s,i){"use strict";const c="["+i.id+"]";let l=.5,a=6e5,u=2e3,p=12e4,d=!0,g=!1,m={is_open:!1,current_choice_idx:void 0,choices:[],considering_choices:!1,suggestionAcceptTimeout:void 0,version_is_up_to_date:void 0,queryTimeout:void 0,pre_cursor:void 0,post_cursor:void 0,auth_token:void 0,current_completion_query:void 0},h=s.CodeCell,_=o.keycodes,f=[_.enter,_.esc,_.shift,_.ctrl,_.alt,_.meta,_.capslock,_.pageup,_.pagedown,_.end,_.home,_.insert,_.delete,_.numlock,_.f1,_.f2,_.f3,_.f4,_.f5,_.f6,_.f7,_.f8,_.f9,_.f10,_.f11,_.f12,_.f13,_.f14,_.f15];const y=e=>{const o=document.cookie.match("\\b"+e+"=([^;]*)\\b");return o?o[1]:void 0},k=()=>n.notebook.get_selected_cell(),b=(navigator.platform.toUpperCase().indexOf("MAC"),e=>{const o=e.split("\n");if(0===o.length)return[0,0];return[o.length-1,o.slice(-1)[0].length]}),v=e=>{const[o,t]=b(e);n.notebook.get_selected_cell().code_mirror.setCursor(o,t)},x=(e,o,t)=>{e.code_mirror.options[o]=t},T=e=>{x(k(),"readOnly",!1)},C=(e,o,t,n)=>{let r=e.code_mirror;console.log(c,"Setting opacity from",o,"to",t,"to",n),r.markText(o,t,{css:`opacity:${n};`})},w=e=>{const o=b(e);return{line:o[0],ch:o[1]}},j=()=>{void 0!==m.suggestionAcceptTimeout&&clearTimeout(m.suggestionAcceptTimeout)},S=e=>{if(!m.considering_choices)return;const o=(()=>{const e=m.choices[m.current_choice_idx].imports;if(e)return console.log(c,"Found imports\n",e),e+"\n\n";console.log(c,"No imports found associated with suggestion")})();(e=>{if(!d||!e)return;const o=k(),t=o.get_text();o.set_text(e+t)})(o);let t=m.pre_cursor+(o??"")+m.choices[m.current_choice_idx].suggestion;v(t);const n=w(t);console.log(c,"Setting cursor at",n),C(e,{line:0,ch:0},n,1),ie(),A(),T()},A=()=>{m.considering_choices=!1,m.choices=[],m.pre_cursor=void 0,m.post_cursor=void 0},D=(e=a)=>{m.suggestionAcceptTimeout&&clearTimeout(m.suggestionAcceptTimeout);let o=k();m.suggestionAcceptTimeout=setTimeout((()=>{S(o)}),e)},R=()=>{x(k(),"readOnly",!0);let e=k();m.current_completion_query=void 0;let o=m.choices[m.current_choice_idx].suggestion;m.considering_choices=!0,ce(),j();const t=m.pre_cursor+o,n=t+m.post_cursor;e.set_text(n);const r=w(m.pre_cursor),s=w(t);C(e,r,s,l),v(m.pre_cursor),D(),ne()},q=o=>{o?e("#cogram-spinner").addClass("fa-spin").css("color","orange"):e("#cogram-spinner").removeClass("fa-spin").css("color","green")},N=()=>{const o=n.notebook.get_selected_index();let t=n.notebook.get_cells().map((e=>e.get_text())).slice(0,o+1);t.pop();let r=k();m.pre_cursor=(e=>{const o=e.code_mirror.getCursor();return e.code_mirror.getRange({line:0,ch:0},o)})(r),m.post_cursor=(e=>{const o=e.code_mirror.getCursor(),t=e.code_mirror.lineCount()-1,n={line:t,ch:e.code_mirror.getLine(t).length};return e.code_mirror.getRange(o,n)})(r);const s=n.notebook.session.id,i=n.notebook.kernel.id;let l={queries:[m.pre_cursor],cell_contents:t,session_id:s,kernel_id:i,auth_token:m.auth_token};console.log(c,"Have query from cell",l);const a=y("_xsrf");m.current_completion_query=e.post({url:"/cogram",data:JSON.stringify(l),headers:{"X-XSRFToken":a},dataType:"json",contentType:"application/json",beforeSend:function(e){q(!0)},success:function(e){((e,o)=>{let t=o.message;t=t.filter((e=>""!==e.suggestion.trim())),t.length>0?(console.log(c,"Received",t.length,"code suggestions"),m.choices=t,m.current_choice_idx=0,R()):console.log(c,"Did not receive any non-empty suggestions...")})(0,e)},error:G,complete:function(){q(!1)}})},O=(o=!1)=>{const t="boolean"==typeof o&&o;console.log(c,"Checking if valid token exists with `logLaunch`=",t);let n=null;return e.get({url:"/token",dataType:"JSON",data:{log_launch:t},async:!1,success:function(e){var o;o=e,m.auth_token=o.auth_token,n="ok"},error:function(e,o,t){n=((e,o,t)=>{m.auth_token=void 0,console.log(c,"`checkValidTokenExists` ajax error:",e,o,t);const n=e.status;if(500===n)return"unavailable";if(403==n){let o=JSON.parse(e.responseText);return console.log(c,"Returning 403 error",o),o?.error}return null})(e,o,t)}}),console.log(c,"check completed. status",n),n},$=()=>(e("body").on("click","#upgrade_button",(()=>{e("#upgrade_button").html('<i class="fa fa-spinner fa-spin" aria-hidden="true"></i>'),ge()})),'<button id="upgrade_button" class="mui-btn mui-btn--primary">Upgrade</button>'),J=(e,o,t)=>{console.log(c,"In /checkVersion error callback"),m.version_is_up_to_date=!1;let n=JSON.parse(e.responseText);console.log(c,n);let r=n?.pypi_version;let s=`<div class="mui--text-subhead">A new version of Jupyter Cogram is out  🎈<span class="mui--text-body2"><div style="line-height:120%;"><br></div>Click here to automatically upgrade to version ${r}</span></div>`+$()+'<span class="mui--text-body1"><br>Alternatively, you can upgrade to manually by running<br><span style="font-family:monospace">pip install -U jupyter-cogram</span> <br>in your terminal. Afterwards, please restart your Jupyter Notebook server.</span>';ee(s,p)};const I=o=>{o?(console.log(c,"Extension is off. Turning it on."),e("#cogram-status").show(),m.is_open=!0):(console.log(c,"Extension is on. Turning it off."),e("#cogram-status").hide(),m.is_open=!1)},E=o=>{o.attr("id","info-panel-content"),console.log("Showing panel with content",o),e("#info-panel-content").remove(),e("#jupyter-cogram-info-panel").append(o),e("#jupyter-cogram-info-panel").show()},P=(o=!1)=>{if(m.is_open)return void I(!1);const t=O(o);console.log(c,"Valid token exists:",t),"ok"===t?(e("#jupyter-cogram-info-panel").hide(),I(!0)):"unavailable"===t?Z(ae,1e4):t?E(oe(t)):(E(oe()),I(!1))},X=e=>e.get_text().split("\n")[e.code_mirror.getCursor().line];function U(e){return e.ctrlKey||e.metaKey}function K(e){const o=e.which;return o===_.left||o===_.right}function L(e){const o=e.which;return o===_.up||o===_.down}const F=e=>e.which===_.tab,H=e=>e.which===_.backspace,M=e=>{const o=m.current_choice_idx,t=m.choices.length;if(1===t)return;let n;n=e?o<=t-2?o+1:0:o>0?o-1:t-1,m.current_choice_idx=n};const B=()=>{const e=k(),o=e.code_mirror.getCursor().line,t=e.code_mirror.getCursor().ch;return e.code_mirror.getLine(o).length===t};function V(o){const t=""===X(k()).trim(),n=B();return console.log(c,"In processTabKey - is_empty_line?",t,"isAtEndOfLine?",n),m.is_open&&m.considering_choices?(console.log(c,"Accepting choice with Tab"),e("#hint-accept-link").click(),o.preventDefault(),!0):m.is_open&&n?(console.log(c,"Submitting completion query on Tab"),z(0),o.preventDefault(),!0):(console.log(c,"Processing ordinary Tab key"),!1)}const W=()=>{let e=k().get_text().split("\n");if(0===e.length)return!1;let o=e[e.length-1];return!!o.startsWith("#")||(!!(e.length>1&&e[e.length-2].startsWith("#"))||""!==o.trim())},z=(e=u)=>{console.log(c,`Scheduling query to run in ${e} ms`),m.queryTimeout=setTimeout(N,e)},Y=()=>{console.log(c,"Patching 'Cell.prototype.handle_codemirror_keyevent'");let o=h.prototype.handle_codemirror_keyevent;h.prototype.handle_codemirror_keyevent=function(t,n){const r=-1!==f.indexOf(n.which),s=U(n),i=B(),l=W(),a=String.fromCharCode(n.which),u=F(n);let p;if(m.is_open&&console.log(c,"Handling keyevent",n.key,"type",n.type,`character '${a}'`,"is special?",r,"isTab?",u,"command plus event?",s,"isAtEndOfLine?",i,"isNonEmpty?",l),this instanceof h&&m.is_open&&!r&&!s){m.queryTimeout&&clearTimeout(m.queryTimeout),m.current_completion_query&&(m.current_completion_query.abort(),m.current_completion_query=void 0),""===this.get_text().trim()||(u?(p=V(n),console.log(c,"Received CM ignore from Tab key",p)):m.considering_choices&&m.choices.length>1&&K(n)?(n.preventDefault(),M(n.which===_.right),R()):m.considering_choices&&K(n)?(n.preventDefault(),console.log(c,"Recording left/right key")):m.considering_choices&&L(n)?(n.preventDefault(),console.log(c,"Recording up/down key")):m.considering_choices&&H(n)?(console.log(c,"Recording backspace key. Deleting suggestion."),n.preventDefault(),e("#hint-delete-link").click()):m.considering_choices?(console.log(c,"Recording ordinary key. Deleting suggestion."),e("#hint-delete-link").click(),g&&z()):i&&g&&z())}let d=p??o.apply(this,arguments);return d}},G=(e,o,t)=>{if(console.log("jupyter_cogram ajax error:",e,o,t),"abort"===o)return;if(408===e?.status||409===e?.status)return void console.log(c,"Request timed out");let n=JSON.parse(e?.responseText??"");Z(`${n?.message}`,1e4)},Q=()=>{let o=e("<button/>").attr("id","cogram-status").attr("class","btn btn-default").attr("title","Cogram status").attr("style","display: none;"),t=e("<i/>").attr("id","cogram-spinner").attr("style","color: green;").attr("class","fa fa-circle-o-notch");o.append(t),e("#cogram-button-group").append(o)},Z=(o,t=2e3)=>{console.log(c,"Showing alert message");const n=e("#info-panel-content").html();let r=e("<div class='mui--text-body2 alert-message'>"+o+"</div>");E(r),t&&setTimeout((()=>{n&&e("#info-panel-content").html(n),e("#jupyter-cogram-info-panel").hide()}),t)},ee=(o,t=5e3)=>{console.log(c,"Showing success message with timeout",t);const n=e("#info-panel-content").html();let r=e("<div class='mui--text-body2 success-message'>"+o+"</div>");E(r),t&&setTimeout((()=>{n&&e("#info-panel-content").html(n),e("#jupyter-cogram-info-panel").hide()}),t)},oe=(o=null)=>{let t=e('<div id="info-panel-content"/>');o?t.html(o):t.text("Please submit your API token");let n=e('<form id="token_submit_form"><div class="mui-textfield"><input type="text"name="api_token" placeholder="Your API token" spellcheck="false"class="mui--is-empty mui--is-pristine mui--is-touched"></div><button id="cogram_token_submit" class="mui-btn mui-btn--primary" type="submit">Submit</button></form>');return t.append(n),e("body").on("submit","#token_submit_form",(o=>{o.preventDefault();const t=o.target,[n,r]=(o=>{console.log(c,"Submitting token",o);let t,n=!1;return e.post({url:"/token",data:JSON.stringify({auth_token:o}),headers:{"X-XSRFToken":y("_xsrf")},dataType:"json",async:!1,contentType:"application/json",success:function(e){m.auth_token=o,I(!0),n=!0},error:function(e,o,n){let r=JSON.parse(e.responseText);t=`Error ${e.status}: ${r.error}`,console.log("Have error msg from `submitToken()`",t)}}),console.log(c,"Token submission completed. Success?",n),[n,t]})(t?.api_token?.value);n?ee("Thanks, your token looks good 🎉",2e3):Z(r,5e3)})),t};function te(){var e=k().code_mirror;if(e.state.focused){var o=e.display;clearInterval(o.blinker);var t=!0;o.cursorDiv.style.visibility="",e.options.cursorBlinkRate>0?o.blinker=setInterval((function(){return o.cursorDiv.style.visibility=(t=!t)?"":"hidden"}),e.options.cursorBlinkRate):e.options.cursorBlinkRate<0&&(o.cursorDiv.style.visibility="hidden")}}const ne=()=>{n.notebook.get_selected_cell().code_mirror.display.input.focus(),e(".cell.code_cell.selected .CodeMirror").addClass("CodeMirror-focused")},re=()=>{e("#hint-accept-link").click((e=>{e.preventDefault(),D(0),ne(),te()})),e("#hint-delete-link").click((e=>{e.preventDefault(),(()=>{const e=m.pre_cursor+m.post_cursor;k().set_text(e),v(m.pre_cursor),A(),ie(),j(),T()})(),ne(),te()})),e("#hint-left-link").click((e=>{e.preventDefault(),M(!1),R(),ne(),te()})),e("#hint-right-link").click((e=>{e.preventDefault(),M(!0),R(),ne(),te()}))},se=o=>{let t=e('<div class="mui-panel" id="cogram-hint"/>'),n=e(`<div class="mui--text-body2" id="cogram-hint-text">${o}</div>`);t.append(n);const r=[(s=e(".cell.code_cell.selected .CodeMirror-cursor")).css("left"),s.css("top")];var s;t.css("left",r[0]).css("top",r[1]),t.css("left","+=102"),t.css("top","-=14"),e(".cell.code_cell.selected .inner_cell").append(t),re()},ie=()=>e("#cogram-hint").remove(),ce=()=>{var e,o;ie(),se((e="&nbsp &nbsp",o="",m.choices.length>1&&(o+=`<a href="#" class="hint-accept" id="hint-right-link">Next (→)</a> ${e} <a href="#" class="hint-accept" id="hint-left-link">Previous (←)</a> ${e}`),o+`<a href="#" class="hint-accept" id="hint-accept-link">Accept (Tab)</a> ${e} <a href="#" class="hint-accept" id="hint-delete-link">Delete (⌫)</a>`))},le=e=>{let o=document.createElement("link");o.type="text/css",o.rel="stylesheet",o.href=t.toUrl(e),document.getElementsByTagName("head")[0].appendChild(o)},ae="The Cogram API server is unavailable. Please refresh and try again. If this keeps happening, please contact support@cogram.ai",ue=()=>{const o=O();"ok"===o?(console.log(c,"Checking if version is up to date..."),e.get({url:"/checkVersion",dataType:"JSON",async:!1,success:function(e){m.version_is_up_to_date=!0},error:J})):"unavailable"===o?Z(ae,1e4):E(o?oe(o):oe())},pe=o=>{m.version_is_up_to_date=!0;let t=`<div class="mui--text-subhead">Successfully upgraded to version ${o?.new_version} 🎉<span class="mui--text-body2"><br>Please refresh your notebook:</span></div>`+(e("body").on("click","#refresh_button",(()=>{window.location.reload()})),'<button id="refresh_button" class="mui-btn mui-btn--primary">Refresh</button>');ee(t,p)},de=(e,o,t)=>{m.version_is_up_to_date=!1;let n=JSON.parse(e.responseText);m.version_is_up_to_date=!1,console.log(c,"Auto upgrade error:",n),Z(`<span class="mui--text-body2">${n?.message}</span>`,1e4)},ge=()=>{(console.log(c,"Upgrading package"),e.post({url:"/upgrade",headers:{"X-XSRFToken":y("_xsrf")},dataType:"json",contentType:"application/json",success:pe,error:de})).then((e=>console.log(c,"`autoUpgrade()` result:",e))).catch((e=>console.log(c,"Error in `autoUpgrade()`:",e)))},me=()=>{console.log(c,"Initializing extension..."),n.toolbar.add_buttons_group([n.keyboard_manager.actions.register({help:"Launch jupyter-cogram",icon:"fas fa-link",handler:P},"create-jupyter-cogram-from-notebook","Cogram")],"cogram-button-group"),e(".fas.fa-link.fa").replaceWith('<img id="cogram-button-logo" src="https://uploads-ssl.webflow.com/61294dc1bd225d7c490b4389/6131d7249979f73249363dd0_icon_black_64.png" style="max-height:16px;"alt="Cogram">'),Q(),P(!0),ue(),(()=>{let o,t;m.auth_token||console.log(c,"No valid token. Skipping launch message."),e.get({url:"/launch",headers:{"X-XSRFToken":y("_xsrf")},async:!1,dataType:"JSON",success:e=>{console.log(c,"Have launch result",e),o=e?.status,t=e?.msg},error:(e,o,t)=>{console.log(c,"Have launch result error",e)}}),t&&["first_launch","new_version"].includes(o)&&(console.log(c,"Will show success message.",t),ee(t,6e4))})()};function he(){le("//cdn.muicss.com/mui-0.10.3/css/mui.min.css"),le("./jupyter_cogram.css"),Y(),function(){console.log(c,"Patching 'CodeCell.prototype.execute'");let e=h.prototype.execute;h.prototype.execute=function(o){return S(this),e.apply(this,arguments)}}(),(()=>{let o=e("<div/>").attr("id","jupyter-cogram-info-panel").attr("class","cogram_info_panel_display mui-panel mui--text-subhead mui--z2").attr("style","display: none;"),t=e("<div id='cogram_token_close'>x</div>");o.append(t).append(e('<div id="info-panel-content"/>')),e("body").on("click","#cogram_token_close",(()=>e("#jupyter-cogram-info-panel").hide())),e("body").on("focus","#jupyter-cogram-info-panel",(()=>n.keyboard_manager.disable())),e("body").on("blur","#jupyter-cogram-info-panel",(()=>n.keyboard_manager.enable())),e("#site").prepend(o)})(),n.notebook.kernel?(console.log(c,"Initialising with Kernel ready!"),me()):(console.log(c,"Kernel not ready. Initialising later"),n.notebook.events.one("kernel_ready.Kernel",(()=>me())))}return{load_jupyter_extension:he,load_ipython_extension:he}}));