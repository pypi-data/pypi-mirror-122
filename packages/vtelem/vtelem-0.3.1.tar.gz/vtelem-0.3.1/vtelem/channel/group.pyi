from typing import Any, Dict, Iterator
from vtelem.enums.primitive import Primitive as Primitive, default_val as default_val
from vtelem.telemetry.environment import TelemetryEnvironment as TelemetryEnvironment

class ChannelGroup:
    env: Any
    name: Any
    channels: Any
    def __init__(self, name: str, env: TelemetryEnvironment) -> None: ...
    def add_channel(self, name: str, instance: Primitive, rate: float, track_change: bool = ...) -> bool: ...
    def add_enum_channel(self, name: str, enum_name: str, rate: float, track_change: bool = ...) -> bool: ...
    def data(self) -> Iterator[Dict[str, Any]]: ...
    def read(self) -> Dict[str, Any]: ...
    def write(self, values: Dict[str, Any]) -> None: ...
