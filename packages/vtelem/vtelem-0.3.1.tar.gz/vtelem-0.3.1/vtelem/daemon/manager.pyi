from typing import Any, Dict, List, Optional
from vtelem.classes.time_entity import LockEntity as LockEntity
from vtelem.daemon import DaemonBase as DaemonBase
from vtelem.enums.daemon import DaemonOperation as DaemonOperation, operation_str as operation_str, str_to_operation as str_to_operation

LOG: Any
NAME_DENYLIST: Any

class DaemonManager(LockEntity):
    daemons: Any
    depends_on: Any
    def __init__(self) -> None: ...
    def get(self, name: str) -> Optional[DaemonBase]: ...
    def add_daemon(self, daemon: DaemonBase, depends_on: List[str] = ...) -> bool: ...
    def perform_stack(self, name_stack: List[str], executed: List[str], results: Dict[str, bool], operation: DaemonOperation, *args, **kwargs) -> None: ...
    def perform_all(self, operation: DaemonOperation, *args, **kwargs) -> bool: ...
    def perform_str_all(self, operation: str, *args, **kwargs) -> bool: ...
    def perform(self, name: str, operation: DaemonOperation, *args, **kwargs) -> bool: ...
    def perform_str(self, name: str, operation: str, *args, **kwargs) -> bool: ...
    def states(self, as_str: bool = ...) -> dict: ...
