from enum import IntEnum
from typing import Any, Dict, Type
from vtelem.classes.serdes import ObjectData as ObjectData, ObjectMap as ObjectMap, Serializable as Serializable, max_key as max_key
from vtelem.classes.time_entity import LockEntity as LockEntity
from vtelem.classes.user_enum import UserEnum as UserEnum, from_enum as from_enum

class EnumRegistry(Serializable, LockEntity):
    curr_id: Any
    enums: Any
    def init(self, data: ObjectData) -> None: ...
    @property
    def enum_data(self) -> Dict[str, ObjectData]: ...
    def get_enum(self, enum_id: int) -> UserEnum: ...
    def add(self, enum: UserEnum) -> int: ...
    def add_from_enum(self, enum_cls: Type[IntEnum]) -> int: ...
