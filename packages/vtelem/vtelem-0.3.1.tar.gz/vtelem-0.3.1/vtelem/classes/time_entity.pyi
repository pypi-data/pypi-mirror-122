from contextlib import AbstractContextManager
from threading import RLock
from typing import Any, Optional, Type
from typing_extensions import Literal as Literal

class OptionalRLock(AbstractContextManager):
    lock: Any
    item: Any
    def __init__(self, make_lock: bool, item: Optional[Any] = ..., lock_cls: Type[RLock] = ...) -> None: ...
    def __enter__(self) -> Optional[Any]: ...
    def __exit__(self, exc_type, __, ___) -> Literal[False]: ...

class LockEntity:
    lock: Any
    def __init__(self, make_lock: bool = ...) -> None: ...

class TimeEntity(LockEntity):
    time: Any
    def __init__(self, init_time: float = ...) -> None: ...
    def advance_time(self, amount: float) -> None: ...
    def set_time(self, time: float) -> None: ...
    def get_time(self) -> float: ...
