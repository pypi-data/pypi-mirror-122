from typing import Any, Tuple
from vtelem.classes.byte_buffer import ByteBuffer as ByteBuffer
from vtelem.classes.type_primitive import TypePrimitive as TypePrimitive, new_default as new_default
from vtelem.enums.primitive import random_integer as random_integer

FRAME_OVERHEAD: Any

def time_to_int(time: float, precision: int = ...) -> int: ...

class Frame:
    mtu: Any
    used: int
    buffer: Any
    id_primitive: Any
    finalized: bool
    initialized: bool
    count: Any
    crc: Any
    overhead: Any
    def __init__(self, mtu: int, frame_id: TypePrimitive, frame_type: TypePrimitive, timestamp: TypePrimitive, use_crc: bool = ...) -> None: ...
    def write(self, elem: TypePrimitive) -> None: ...
    @property
    def space(self) -> int: ...
    def increment_count(self, amount: int = ...) -> None: ...
    def pad(self, num_bytes: int) -> int: ...
    def pad_to_mtu(self) -> None: ...
    @property
    def raw(self) -> Tuple[bytearray, int]: ...
    def with_size_header(self, frame_size: TypePrimitive = ...) -> Tuple[bytes, int]: ...
    def finalize_hook(self) -> None: ...
    def finalize(self, write_crc: bool = ...) -> int: ...
