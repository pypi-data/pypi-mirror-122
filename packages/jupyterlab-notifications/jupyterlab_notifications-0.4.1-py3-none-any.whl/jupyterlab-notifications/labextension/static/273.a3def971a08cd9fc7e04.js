(self.webpackChunkjupyterlab_notifications=self.webpackChunkjupyterlab_notifications||[]).push([[273],{273:(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>s});var i=o(433);function n(e){"granted"===e?alert("Browser Notifications are allowed. (^_^)b"):alert("Browser Notifications are not allowed. Please update your browser settings to allow notifications.")}const a={id:"jupyterlab-notifications:plugin",autoStart:!0,optional:[o(389).ISettingRegistry],activate:async(e,t)=>{"Notification"in window?"granted"!==Notification.permission&&(function(){try{Notification.requestPermission().then()}catch(e){return!1}return!0}()?Notification.requestPermission().then((e=>{n(e)})):Notification.requestPermission((e=>{n(e)}))):alert("This browser does not support notifications.");let o=!1,s=60,c=!0,r=!0;if(t){const e=await t.load(a.id),i=()=>{o=e.get("enabled").composite,s=e.get("minimum_cell_execution_time").composite,c=e.get("report_cell_execution_time").composite,r=e.get("report_cell_number").composite};i(),e.changed.connect(i)}i.NotebookActions.executed.connect(((e,t)=>{if(o){const{cell:e,notebook:o}=t,i="code"===e.model.type,n=e.model.value.text.length>0,a=e.model.metadata;if(i&&n)if(a.has("execution")){const[e,t]=function(e){const t=Object.assign({},e.get("execution"));return[new Date(t["shell.execute_reply.started"]),new Date(t["shell.execute_reply"])]}(a),i=new Date(t-e);i.getSeconds()>=s&&function(e,t,o,i){const n={icon:"/static/favicon.ico",body:""};let a="";o&&i?a=`Cell[${t}] Duration: ${e}`:o?a=`Cell Number: ${t}`:i&&(a=`Cell Duration: ${e}`),n.body=a,new Notification("Notebook Cell Completed!",n)}(i.toISOString().substr(11,8),o.activeCellIndex,r,c)}else alert('Notebook Cell Timing needs to be enabled for Jupyterlab Notifications to work. Please go to Settings -> Advanced Settings Editor -> Notebook and update setting to {"recordTiming": true}')}}))}},s=a}}]);