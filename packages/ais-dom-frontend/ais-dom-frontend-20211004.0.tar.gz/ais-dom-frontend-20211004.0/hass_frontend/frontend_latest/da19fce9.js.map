{"version":3,"file":"da19fce9.js","mappings":";;AAoBA;AACA;;AAfA;;;;;;;;;;;;;;;AAAA;AC6FA;AACA;AACA;AAqBA;AACA;AAGA;AAGA;;;AAGA;AAEA;AACA;;AAEA;AAKA;AAOA;AACA;AACA;AAKA;;AAIA;AAOA;AACA;AAGA;;;;AAqBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA;;;;;;;;;;;AAWA;;;;;AAOA;;;;;AAKA;;AAIA;;;;;;AAYA;;;AAGA;;;;AAOA","sources":["webpack://home-assistant-frontend/./src/components/ha-icon-button.ts","webpack://home-assistant-frontend/./src/panels/config/blueprint/ha-blueprint-overview.ts"],"sourcesContent":["import \"@material/mwc-icon-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-button\")\nexport class HaIconButton extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  @property({ type: String }) icon = \"\";\n\n  @property({ type: String }) label = \"\";\n\n  static shadowRootOptions: ShadowRootInit = {\n    mode: \"open\",\n    delegatesFocus: true,\n  };\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-icon-button .label=${this.label} .disabled=${this.disabled}>\n        <ha-icon .icon=${this.icon}></ha-icon>\n      </mwc-icon-button>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        outline: none;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n      }\n      mwc-icon-button {\n        --mdc-theme-on-primary: currentColor;\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n      ha-icon {\n        --ha-icon-display: inline;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button\": HaIconButton;\n  }\n}\n","import \"@material/mwc-icon-button\";\nimport {\n  mdiDelete,\n  mdiDownload,\n  mdiHelpCircle,\n  mdiRobot,\n  mdiShareVariant,\n} from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { navigate } from \"../../../common/navigate\";\nimport { extractSearchParam } from \"../../../common/url/search-params\";\nimport { DataTableColumnContainer } from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/entity/ha-entity-toggle\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-svg-icon\";\nimport { showAutomationEditor } from \"../../../data/automation\";\nimport {\n  BlueprintMetaData,\n  Blueprints,\n  deleteBlueprint,\n} from \"../../../data/blueprint\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { configSections } from \"../ha-panel-config\";\nimport { showAddBlueprintDialog } from \"./show-dialog-import-blueprint\";\n\ninterface BlueprintMetaDataPath extends BlueprintMetaData {\n  path: string;\n  error: boolean;\n}\n\nconst createNewFunctions = {\n  automation: (blueprintMeta: BlueprintMetaDataPath) => {\n    showAutomationEditor({\n      alias: blueprintMeta.name,\n      use_blueprint: { path: blueprintMeta.path },\n    });\n  },\n};\n\n@customElement(\"ha-blueprint-overview\")\nclass HaBlueprintOverview extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @property() public blueprints!: Blueprints;\n\n  private _processedBlueprints = memoizeOne((blueprints: Blueprints) => {\n    const result = Object.entries(blueprints).map(([path, blueprint]) => {\n      if (\"error\" in blueprint) {\n        return {\n          name: blueprint.error,\n          error: true,\n          path,\n        };\n      }\n      return {\n        ...blueprint.metadata,\n        error: false,\n        path,\n      };\n    });\n    return result;\n  });\n\n  private _columns = memoizeOne(\n    (narrow, _language): DataTableColumnContainer => ({\n      name: {\n        title: this.hass.localize(\n          \"ui.panel.config.blueprint.overview.headers.name\"\n        ),\n        sortable: true,\n        filterable: true,\n        direction: \"asc\",\n        grows: true,\n        template: narrow\n          ? (name, entity: any) =>\n              html`\n                ${name}<br />\n                <div class=\"secondary\">${entity.path}</div>\n              `\n          : undefined,\n      },\n      path: {\n        title: this.hass.localize(\n          \"ui.panel.config.blueprint.overview.headers.file_name\"\n        ),\n        sortable: true,\n        filterable: true,\n        hidden: narrow,\n        direction: \"asc\",\n        width: \"25%\",\n      },\n      create: {\n        title: \"\",\n        type: narrow ? \"icon-button\" : undefined,\n        template: (_, blueprint: any) =>\n          blueprint.error\n            ? \"\"\n            : narrow\n            ? html`<mwc-icon-button\n                .blueprint=${blueprint}\n                .label=${this.hass.localize(\n                  \"ui.panel.config.blueprint.overview.use_blueprint\"\n                )}\n                title=${this.hass.localize(\n                  \"ui.panel.config.blueprint.overview.use_blueprint\"\n                )}\n                @click=${(ev) => this._createNew(ev)}\n              >\n                <ha-svg-icon .path=${mdiRobot}></ha-svg-icon>\n              </mwc-icon-button>`\n            : html`<mwc-button\n                .blueprint=${blueprint}\n                @click=${(ev) => this._createNew(ev)}\n              >\n                ${this.hass.localize(\n                  \"ui.panel.config.blueprint.overview.use_blueprint\"\n                )}\n              </mwc-button>`,\n      },\n      share: {\n        title: \"\",\n        type: \"icon-button\",\n        template: (_, blueprint: any) =>\n          blueprint.error\n            ? \"\"\n            : html`<mwc-icon-button\n                .blueprint=${blueprint}\n                .disabled=${!blueprint.source_url}\n                .label=${this.hass.localize(\n                  blueprint.source_url\n                    ? \"ui.panel.config.blueprint.overview.share_blueprint\"\n                    : \"ui.panel.config.blueprint.overview.share_blueprint_no_url\"\n                )}\n                @click=${(ev) => this._share(ev)}\n                ><ha-svg-icon .path=${mdiShareVariant}></ha-svg-icon\n              ></mwc-icon-button>`,\n      },\n      delete: {\n        title: \"\",\n        type: \"icon-button\",\n        template: (_, blueprint: any) =>\n          blueprint.error\n            ? \"\"\n            : html` <mwc-icon-button\n                .blueprint=${blueprint}\n                .label=${this.hass.localize(\n                  \"ui.panel.config.blueprint.overview.delete_blueprint\"\n                )}\n                @click=${(ev) => this._delete(ev)}\n                ><ha-svg-icon .path=${mdiDelete}></ha-svg-icon\n              ></mwc-icon-button>`,\n      },\n    })\n  );\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (this.route.path === \"/import\") {\n      const url = extractSearchParam(\"blueprint_url\");\n      navigate(\"/config/blueprint/dashboard\", { replace: true });\n      if (url) {\n        this._addBlueprint(url);\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.automation}\n        .columns=${this._columns(this.narrow, this.hass.language)}\n        .data=${this._processedBlueprints(this.blueprints)}\n        id=\"entity_id\"\n        .noDataText=${this.hass.localize(\n          \"ui.panel.config.blueprint.overview.no_blueprints\"\n        )}\n        hasFab\n        .appendRow=${html` <div\n          class=\"mdc-data-table__cell\"\n          style=\"width: 100%; text-align: center;\"\n          role=\"cell\"\n        >\n          <a\n            href=\"https://www.home-assistant.io/get-blueprints\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            <mwc-button\n              >${this.hass.localize(\n                \"ui.panel.config.blueprint.overview.discover_more\"\n              )}</mwc-button\n            >\n          </a>\n        </div>`}\n      >\n        <mwc-icon-button slot=\"toolbar-icon\" @click=${this._showHelp}>\n          <ha-svg-icon .path=${mdiHelpCircle}></ha-svg-icon>\n        </mwc-icon-button>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.blueprint.overview.add_blueprint\"\n          )}\n          extended\n          @click=${this._addBlueprintClicked}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiDownload}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _showHelp() {\n    showAlertDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.blueprint.caption\"),\n      text: html`\n        ${this.hass.localize(\"ui.panel.config.blueprint.overview.introduction\")}\n        <p>\n          <a\n            href=${documentationUrl(\n              this.hass,\n              \"/docs/automation/using_blueprints/\"\n            )}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.blueprint.overview.learn_more\"\n            )}\n          </a>\n        </p>\n      `,\n    });\n  }\n\n  private _addBlueprint(url?: string) {\n    showAddBlueprintDialog(this, {\n      url,\n      importedCallback: () => this._reload(),\n    });\n  }\n\n  private _addBlueprintClicked(): void {\n    this._addBlueprint();\n  }\n\n  private _reload() {\n    fireEvent(this, \"reload-blueprints\");\n  }\n\n  private _createNew(ev) {\n    const blueprint = ev.currentTarget.blueprint as BlueprintMetaDataPath;\n    createNewFunctions[blueprint.domain](blueprint);\n  }\n\n  private _share(ev) {\n    const blueprint = ev.currentTarget.blueprint;\n    const params = new URLSearchParams();\n    params.append(\"redirect\", \"blueprint_import\");\n    params.append(\"blueprint_url\", blueprint.source_url);\n    window.open(\n      `https://my.home-assistant.io/create-link/?${params.toString()}`\n    );\n  }\n\n  private async _delete(ev) {\n    const blueprint = ev.currentTarget.blueprint;\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.blueprint.overview.confirm_delete_header\"\n        ),\n        text: this.hass.localize(\n          \"ui.panel.config.blueprint.overview.confirm_delete_text\"\n        ),\n      }))\n    ) {\n      return;\n    }\n    await deleteBlueprint(this.hass, blueprint.domain, blueprint.path);\n    fireEvent(this, \"reload-blueprints\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-blueprint-overview\": HaBlueprintOverview;\n  }\n}\n"],"names":[],"sourceRoot":""}