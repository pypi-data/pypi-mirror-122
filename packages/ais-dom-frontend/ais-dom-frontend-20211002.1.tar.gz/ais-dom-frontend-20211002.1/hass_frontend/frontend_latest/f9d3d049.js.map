{"version":3,"file":"f9d3d049.js","mappings":";;AAqFA;;;AAGA;AAIA;AChFA;;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;ACnBA;ACcA;AACA;;AAfA;;;;;;;;;;;;;;;AAAA;;;ACgEA;;;;;AAKA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;AAaA;AACA;;;;;;;AAOA;AACA;;;AAGA;AAEA;AAEA;;;;;;AAMA;AAKA;;;;AAIA;AACA;AACA;;;;AAOA;;;AAGA;;AAGA;AACA;;;AAGA;AACA;;;AAGA;;;AAzFA;;;;;;;;;;;;;;;;;AApCA","sources":["webpack://home-assistant-frontend/mwc-formfield-base.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-icon-button.ts","webpack://home-assistant-frontend/./src/panels/config/energy/dialogs/dialog-energy-solar-settings.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n// tslint:disable:no-new-decorators\n\nimport {MDCFormFieldAdapter} from '@material/form-field/adapter';\nimport MDCFormFieldFoundation from '@material/form-field/foundation';\nimport {BaseElement, EventType, SpecificEventListener} from '@material/mwc-base/base-element';\nimport {FormElement} from '@material/mwc-base/form-element';\nimport {observer} from '@material/mwc-base/observer';\nimport {html, property, query, queryAssignedNodes} from 'lit-element';\nimport {classMap} from 'lit-html/directives/class-map.js';\n\n\nexport class FormfieldBase extends BaseElement {\n  @property({type: Boolean}) alignEnd = false;\n  @property({type: Boolean}) spaceBetween = false;\n  @property({type: Boolean}) nowrap = false;\n\n  @property({type: String})\n  @observer(async function(this: FormfieldBase, label: string) {\n    this.input?.setAttribute('aria-label', label);\n  })\n  label = '';\n\n  @query('.mdc-form-field') protected mdcRoot!: HTMLElement;\n\n  protected mdcFoundation!: MDCFormFieldFoundation;\n\n  protected readonly mdcFoundationClass = MDCFormFieldFoundation;\n\n  protected createAdapter(): MDCFormFieldAdapter {\n    return {\n      registerInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.addEventListener(type, handler);\n          },\n      deregisterInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.removeEventListener(type, handler);\n          },\n      activateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.startPress();\n          }\n        }\n      },\n      deactivateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.endPress();\n          }\n        }\n      },\n    };\n  }\n\n  @queryAssignedNodes('', true, '*')\n  protected slottedInputs!: HTMLElement[]|null;\n\n  @query('label') protected labelEl!: HTMLLabelElement;\n\n  protected get input() {\n    return this.slottedInputs?.[0] ?? null;\n  }\n\n  protected override render() {\n    const classes = {\n      'mdc-form-field--align-end': this.alignEnd,\n      'mdc-form-field--space-between': this.spaceBetween,\n      'mdc-form-field--nowrap': this.nowrap\n    };\n\n    return html`\n      <div class=\"mdc-form-field ${classMap(classes)}\">\n        <slot></slot>\n        <label class=\"mdc-label\"\n               @click=\"${this._labelClick}\">${this.label}</label>\n      </div>`;\n  }\n\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      input.click();\n    }\n  }\n}\n","import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <mwc-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  >\n    <ha-svg-icon .path=${mdiClose}></ha-svg-icon>\n  </mwc-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { Formfield } from \"@material/mwc-formfield\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-formfield\")\n// @ts-expect-error\nexport class HaFormfield extends Formfield {\n  protected static get styles(): CSSResultGroup {\n    return [\n      Formfield.styles,\n      css`\n        :host(:not([alignEnd])) ::slotted(ha-switch) {\n          margin-right: 10px;\n        }\n        :host([dir=\"rtl\"]:not([alignEnd])) ::slotted(ha-switch) {\n          margin-left: 10px;\n          margin-right: auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import \"@material/mwc-icon-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-button\")\nexport class HaIconButton extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  @property({ type: String }) icon = \"\";\n\n  @property({ type: String }) label = \"\";\n\n  static shadowRootOptions: ShadowRootInit = {\n    mode: \"open\",\n    delegatesFocus: true,\n  };\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-icon-button .label=${this.label} .disabled=${this.disabled}>\n        <ha-icon .icon=${this.icon}></ha-icon>\n      </mwc-icon-button>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        outline: none;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n      }\n      mwc-icon-button {\n        --mdc-theme-on-primary: currentColor;\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n      ha-icon {\n        --ha-icon-display: inline;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button\": HaIconButton;\n  }\n}\n","import { mdiSolarPower } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-dialog\";\nimport {\n  emptySolarEnergyPreference,\n  SolarSourceTypeEnergyPreference,\n} from \"../../../../data/energy\";\nimport { HassDialog } from \"../../../../dialogs/make-dialog-manager\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { EnergySettingsSolarDialogParams } from \"./show-dialogs-energy\";\nimport \"@material/mwc-button/mwc-button\";\nimport \"../../../../components/entity/ha-statistic-picker\";\nimport \"../../../../components/ha-radio\";\nimport \"../../../../components/ha-checkbox\";\nimport type { HaCheckbox } from \"../../../../components/ha-checkbox\";\nimport \"../../../../components/ha-formfield\";\nimport type { HaRadio } from \"../../../../components/ha-radio\";\nimport { showConfigFlowDialog } from \"../../../../dialogs/config-flow/show-dialog-config-flow\";\nimport { ConfigEntry, getConfigEntries } from \"../../../../data/config_entries\";\nimport { brandsUrl } from \"../../../../util/brands-url\";\n\nconst energyUnits = [\"kWh\"];\nconst energyDeviceClasses = [\"energy\"];\n\n@customElement(\"dialog-energy-solar-settings\")\nexport class DialogEnergySolarSettings\n  extends LitElement\n  implements HassDialog<EnergySettingsSolarDialogParams>\n{\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: EnergySettingsSolarDialogParams;\n\n  @state() private _source?: SolarSourceTypeEnergyPreference;\n\n  @state() private _configEntries?: ConfigEntry[];\n\n  @state() private _forecast?: boolean;\n\n  @state() private _error?: string;\n\n  public async showDialog(\n    params: EnergySettingsSolarDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._fetchSolarForecastConfigEntries();\n    this._source = params.source\n      ? { ...params.source }\n      : (this._source = emptySolarEnergyPreference());\n    this._forecast = this._source.config_entry_solar_forecast !== null;\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    this._source = undefined;\n    this._error = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params || !this._source) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        .heading=${html`<ha-svg-icon\n            .path=${mdiSolarPower}\n            style=\"--mdc-icon-size: 32px;\"\n          ></ha-svg-icon>\n          Configure solar panels`}\n        @closed=${this.closeDialog}\n      >\n        ${this._error ? html`<p class=\"error\">${this._error}</p>` : \"\"}\n\n        <ha-statistic-picker\n          .hass=${this.hass}\n          .includeUnitOfMeasurement=${energyUnits}\n          .includeDeviceClasses=${energyDeviceClasses}\n          .value=${this._source.stat_energy_from}\n          .label=${`Solar production energy (kWh)`}\n          entities-only\n          @value-changed=${this._statisticChanged}\n        ></ha-statistic-picker>\n\n        <h3>Solar production forecast</h3>\n        <p>\n          Adding solar production forecast information will allow you to quickly\n          see your expected production for today.\n        </p>\n\n        <ha-formfield label=\"Don't forecast production\">\n          <ha-radio\n            value=\"false\"\n            name=\"forecast\"\n            .checked=${!this._forecast}\n            @change=${this._handleForecastChanged}\n          ></ha-radio>\n        </ha-formfield>\n        <ha-formfield label=\"Forecast Production\">\n          <ha-radio\n            value=\"true\"\n            name=\"forecast\"\n            .checked=${this._forecast}\n            @change=${this._handleForecastChanged}\n          ></ha-radio>\n        </ha-formfield>\n        ${this._forecast\n          ? html`<div class=\"forecast-options\">\n              ${this._configEntries?.map(\n                (entry) => html`<ha-formfield\n                  .label=${html`<div\n                    style=\"display: flex; align-items: center;\"\n                  >\n                    <img\n                      referrerpolicy=\"no-referrer\"\n                      style=\"height: 24px; margin-right: 16px;\"\n                      src=${brandsUrl({\n                        domain: entry.domain,\n                        type: \"icon\",\n                        darkOptimized: this.hass.selectedTheme?.dark,\n                      })}\n                    />${entry.title}\n                  </div>`}\n                >\n                  <ha-checkbox\n                    .entry=${entry}\n                    @change=${this._forecastCheckChanged}\n                    .checked=${this._source?.config_entry_solar_forecast?.includes(\n                      entry.entry_id\n                    )}\n                  >\n                  </ha-checkbox>\n                </ha-formfield>`\n              )}\n              <mwc-button @click=${this._addForecast}>\n                Add forecast\n              </mwc-button>\n            </div>`\n          : \"\"}\n\n        <mwc-button @click=${this.closeDialog} slot=\"secondaryAction\">\n          ${this.hass.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        <mwc-button\n          @click=${this._save}\n          .disabled=${!this._source.stat_energy_from}\n          slot=\"primaryAction\"\n        >\n          ${this.hass.localize(\"ui.common.save\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private async _fetchSolarForecastConfigEntries() {\n    const domains = this._params!.info.solar_forecast_domains;\n    this._configEntries = (await getConfigEntries(this.hass)).filter((entry) =>\n      domains.includes(entry.domain)\n    );\n  }\n\n  private _handleForecastChanged(ev: CustomEvent) {\n    const input = ev.currentTarget as HaRadio;\n    this._forecast = input.value === \"true\";\n  }\n\n  private _forecastCheckChanged(ev) {\n    const input = ev.currentTarget as HaCheckbox;\n    const entry = (input as any).entry as ConfigEntry;\n    const checked = input.checked;\n    if (checked) {\n      if (this._source!.config_entry_solar_forecast === null) {\n        this._source!.config_entry_solar_forecast = [];\n      }\n      this._source!.config_entry_solar_forecast.push(entry.entry_id);\n    } else {\n      this._source!.config_entry_solar_forecast!.splice(\n        this._source!.config_entry_solar_forecast!.indexOf(entry.entry_id),\n        1\n      );\n    }\n  }\n\n  private _addForecast() {\n    showConfigFlowDialog(this, {\n      startFlowHandler: \"forecast_solar\",\n      dialogClosedCallback: (params) => {\n        if (params.entryId) {\n          if (this._source!.config_entry_solar_forecast === null) {\n            this._source!.config_entry_solar_forecast = [];\n          }\n          this._source!.config_entry_solar_forecast.push(params.entryId);\n          this._fetchSolarForecastConfigEntries();\n        }\n      },\n    });\n  }\n\n  private _statisticChanged(ev: CustomEvent<{ value: string }>) {\n    this._source = { ...this._source!, stat_energy_from: ev.detail.value };\n  }\n\n  private async _save() {\n    try {\n      if (!this._forecast) {\n        this._source!.config_entry_solar_forecast = null;\n      }\n      await this._params!.saveCallback(this._source!);\n      this.closeDialog();\n    } catch (err: any) {\n      this._error = err.message;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 430px;\n        }\n        img {\n          height: 24px;\n          margin-right: 16px;\n        }\n        ha-formfield {\n          display: block;\n        }\n        .forecast-options {\n          padding-left: 32px;\n        }\n        .forecast-options mwc-button {\n          padding-left: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-energy-solar-settings\": DialogEnergySolarSettings;\n  }\n}\n"],"names":[],"sourceRoot":""}