"""
    Bundesagentur für Arbeit: Jobsuche API

    Die größte Stellendatenbank Deutschlands durchsuchen, Details zu Stellenanzeigen und Informationen über Arbeitgeber abrufen. <br><br> Die Authentifizierung funktioniert per OAuth 2 Client Credentials mit JWTs. Folgende Client-Credentials können dafür verwendet werden:<br><br> **ClientID:** c003a37f-024f-462a-b36d-b001be4cd24a <br> **ClientSecret:** 32a39620-32b3-4307-9aa1-511e3d7f48a8  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from deutschland.jobsuche.api_client import ApiClient, Endpoint as _Endpoint
from deutschland.jobsuche.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)
from deutschland.jobsuche.model.job_application_details import JobApplicationDetails
from deutschland.jobsuche.model.job_details import JobDetails
from deutschland.jobsuche.model.job_search_response import JobSearchResponse


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.ed_v1_arbeitgeberlogo_hash_id_get_endpoint = _Endpoint(
            settings={
                "response_type": (file_type,),
                "auth": ["clientCredAuth"],
                "endpoint_path": "/ed/v1/arbeitgeberlogo/{hashID}",
                "operation_id": "ed_v1_arbeitgeberlogo_hash_id_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "hash_id",
                ],
                "required": [
                    "hash_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "hash_id": (str,),
                },
                "attribute_map": {
                    "hash_id": "hashID",
                },
                "location_map": {
                    "hash_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["image/png"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.pc_v1_app_jobs_hash_id_bewerbung_get_endpoint = _Endpoint(
            settings={
                "response_type": (JobApplicationDetails,),
                "auth": ["clientCredAuth"],
                "endpoint_path": "/pc/v1/app/jobs/{hashID}/bewerbung",
                "operation_id": "pc_v1_app_jobs_hash_id_bewerbung_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "hash_id",
                ],
                "required": [
                    "hash_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "hash_id": (str,),
                },
                "attribute_map": {
                    "hash_id": "hashID",
                },
                "location_map": {
                    "hash_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.pc_v1_jobdetails_hash_id_get_endpoint = _Endpoint(
            settings={
                "response_type": (JobDetails,),
                "auth": ["clientCredAuth"],
                "endpoint_path": "/pc/v1/jobdetails/{hashID}",
                "operation_id": "pc_v1_jobdetails_hash_id_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "hash_id",
                ],
                "required": [
                    "hash_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "hash_id": (str,),
                },
                "attribute_map": {
                    "hash_id": "hashID",
                },
                "location_map": {
                    "hash_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.pc_v2_app_jobs_get_endpoint = _Endpoint(
            settings={
                "response_type": (JobSearchResponse,),
                "auth": ["clientCredAuth"],
                "endpoint_path": "/pc/v2/app/jobs/",
                "operation_id": "pc_v2_app_jobs_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "was",
                    "wo",
                    "page",
                    "size",
                    "arbeitgeber",
                    "fct_aktualitaet",
                    "fct_arbeitsvermittlung",
                    "fct_angebotsart",
                    "fct_befristung",
                    "fct_arbeitszeitmodell",
                    "fct_behinderung",
                    "fct_aktion",
                    "fct_umkreis",
                ],
                "required": [],
                "nullable": [],
                "enum": [
                    "fct_arbeitsvermittlung",
                    "fct_angebotsart",
                    "fct_befristung",
                    "fct_arbeitszeitmodell",
                    "fct_behinderung",
                    "fct_aktion",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("fct_arbeitsvermittlung",): {"MIT_AV": "MIT_AV", "EMPTY": ""},
                    ("fct_angebotsart",): {
                        "ARBEIT": "ARBEIT",
                        "SELBSTAENDIGKEIT": "SELBSTAENDIGKEIT",
                        "AUSBILDUNG": "AUSBILDUNG",
                        "PRAKTIKUM_TRAINEE": "PRAKTIKUM_TRAINEE",
                    },
                    ("fct_befristung",): {
                        "UNBEFRISTET": "UNBEFRISTET",
                        "KEINE_ANGABE": "KEINE_ANGABE",
                        "BEFRISTET": "BEFRISTET",
                    },
                    ("fct_arbeitszeitmodell",): {
                        "VOLLZEIT": "VOLLZEIT",
                        "TEILZEIT": "TEILZEIT",
                        "SCHICHT_NACHTARBEIT_WOCHENENDE": "SCHICHT_NACHTARBEIT_WOCHENENDE",
                        "HEIM_TELEARBEIT": "HEIM_TELEARBEIT",
                        "MINIJOB": "MINIJOB",
                    },
                    ("fct_behinderung",): {"AUS": "AUS", "AN": "AN"},
                    ("fct_aktion",): {"AN": "AN"},
                },
                "openapi_types": {
                    "was": (str,),
                    "wo": (str,),
                    "page": (int,),
                    "size": (int,),
                    "arbeitgeber": (str,),
                    "fct_aktualitaet": (int,),
                    "fct_arbeitsvermittlung": (str,),
                    "fct_angebotsart": (str,),
                    "fct_befristung": (str,),
                    "fct_arbeitszeitmodell": (str,),
                    "fct_behinderung": (str,),
                    "fct_aktion": (str,),
                    "fct_umkreis": (int,),
                },
                "attribute_map": {
                    "was": "was",
                    "wo": "wo",
                    "page": "page",
                    "size": "size",
                    "arbeitgeber": "ARBEITGEBER",
                    "fct_aktualitaet": "FCT.AKTUALITAET",
                    "fct_arbeitsvermittlung": "FCT.ARBEITSVERMITTLUNG",
                    "fct_angebotsart": "FCT.ANGEBOTSART",
                    "fct_befristung": "FCT.BEFRISTUNG",
                    "fct_arbeitszeitmodell": "FCT.ARBEITSZEITMODELL",
                    "fct_behinderung": "FCT.BEHINDERUNG",
                    "fct_aktion": "FCT.AKTION",
                    "fct_umkreis": "FCT.UMKREIS",
                },
                "location_map": {
                    "was": "query",
                    "wo": "query",
                    "page": "query",
                    "size": "query",
                    "arbeitgeber": "query",
                    "fct_aktualitaet": "query",
                    "fct_arbeitsvermittlung": "query",
                    "fct_angebotsart": "query",
                    "fct_befristung": "query",
                    "fct_arbeitszeitmodell": "query",
                    "fct_behinderung": "query",
                    "fct_aktion": "query",
                    "fct_umkreis": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )

    def ed_v1_arbeitgeberlogo_hash_id_get(self, hash_id, **kwargs):
        """Unternehmen Logo  # noqa: E501

        Abrufen des Logos eines Unternehmens  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ed_v1_arbeitgeberlogo_hash_id_get(hash_id, async_req=True)
        >>> result = thread.get()

        Args:
            hash_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["hash_id"] = hash_id
        return self.ed_v1_arbeitgeberlogo_hash_id_get_endpoint.call_with_http_info(
            **kwargs
        )

    def pc_v1_app_jobs_hash_id_bewerbung_get(self, hash_id, **kwargs):
        """Bewerbung Kontaktdaten  # noqa: E501

        Abrufen von Kontaktdaten zu einem Job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pc_v1_app_jobs_hash_id_bewerbung_get(hash_id, async_req=True)
        >>> result = thread.get()

        Args:
            hash_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            JobApplicationDetails
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["hash_id"] = hash_id
        return self.pc_v1_app_jobs_hash_id_bewerbung_get_endpoint.call_with_http_info(
            **kwargs
        )

    def pc_v1_jobdetails_hash_id_get(self, hash_id, **kwargs):
        """Jobdetail  # noqa: E501

        Abrufen von Details zu einem Job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pc_v1_jobdetails_hash_id_get(hash_id, async_req=True)
        >>> result = thread.get()

        Args:
            hash_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            JobDetails
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["hash_id"] = hash_id
        return self.pc_v1_jobdetails_hash_id_get_endpoint.call_with_http_info(**kwargs)

    def pc_v2_app_jobs_get(self, **kwargs):
        """Jobsuche  # noqa: E501

        Die Jobsuche ermöglicht verfügbare Jobangebote mit verschiedenen get Parametern zu filtern.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pc_v2_app_jobs_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            was (str): Freitext suche Jobtitel. [optional]
            wo (str): Freitext suche Beschäftigungsort. [optional]
            page (int): Ergebnissseite. [optional]
            size (int): Anzahl von Ergebnissen. [optional]
            arbeitgeber (str): Arbeitgeber der Stelle. [optional]
            fct_aktualitaet (int): Anzahl der Tage, seit der Job veröffentlicht wurde. Kann zwischen 0 und 100 Tagen liegen.. [optional]
            fct_arbeitsvermittlung (str): Gibt an, ob Jobs von externen Arbeitsvermittlungen in die Suchergebnisse einbezogen werden sollen.. [optional]
            fct_angebotsart (str): [optional]
            fct_befristung (str): Kann mehrere Werte haben z.B. FCT.BEFRISTUNG=UNBEFRISTET&FCT.BEFRISTUNG=KEINE_ANGABE.. [optional]
            fct_arbeitszeitmodell (str): Kann mehrere Werte haben z.B. FCT.ARBEITSZEITMODELL=HEIM_TELEARBEIT&FCT.ARBEITSZEITMODELL=MINIJOB. [optional]
            fct_behinderung (str): [optional]
            fct_aktion (str): Wenn AN, werden nur Jobs die im Kontext von Corona angeboten werden angezeigt.. [optional] if omitted the server will use the default value of "AN"
            fct_umkreis (int): Umkreis in Kilometern von Wo-Parameter. (z.B. 25 oder 200). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            JobSearchResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        return self.pc_v2_app_jobs_get_endpoint.call_with_http_info(**kwargs)
